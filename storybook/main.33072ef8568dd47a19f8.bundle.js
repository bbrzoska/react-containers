(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1394:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),objectWithoutPropertiesLoose=__webpack_require__(584),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),esm_extends=__webpack_require__(1416),index_esm=__webpack_require__(3),tabbable=__webpack_require__(585),tabbable_default=__webpack_require__.n(tabbable),activeElement=__webpack_require__(827),useFocusJail=function(_temp){var _ref=void 0===_temp?{containerRef:Object(react.createRef)()}:_temp,_ref$focusOnMount=_ref.focusOnMount,focusOnMount=void 0===_ref$focusOnMount||_ref$focusOnMount,_ref$restoreFocus=_ref.restoreFocus,restoreFocus=void 0===_ref$restoreFocus||_ref$restoreFocus,environment=_ref.environment,focusElem=_ref.focusElem,containerRef=_ref.containerRef,restoreFocusElement=Object(react.useRef)(null),_useState=Object(react.useState)(containerRef.current),currentRef=_useState[0],setCurrentRef=_useState[1];Object(react.useEffect)((function(){containerRef.current!==currentRef&&setCurrentRef(containerRef.current)}));var focusElement=Object(react.useCallback)((function(element){focusElem?focusElem(element):element&&element.focus()}),[focusElem]),getInitialFocusNode=function(){var doc=environment||document,activeElem=Object(activeElement.a)(doc),containerElem=currentRef;return containerElem.contains(activeElem)?activeElem:containerElem};return Object(react.useEffect)((function(){return restoreFocusElement.current=Object(activeElement.a)(environment||document),focusOnMount&&focusElement(currentRef),function(){var isBodyInactive=restoreFocusElement.current!==document.body,hasActiveElement=null!==restoreFocusElement.current;isBodyInactive&&hasActiveElement&&restoreFocus&&focusElement(restoreFocusElement.current)}}),[focusOnMount,restoreFocus,environment,focusElement,currentRef]),{getContainerProps:function(_temp2){var _ref2=void 0===_temp2?{}:_temp2,onKeyDown=_ref2.onKeyDown,other=Object(objectWithoutPropertiesLoose.a)(_ref2,["onKeyDown"]);return Object(esm_extends.a)({onKeyDown:Object(index_esm.b)(onKeyDown,(function(event){if(event.keyCode===index_esm.a.TAB){!function(){if(!currentRef)throw new Error("Accessibility Error: You must apply the ref prop to your containing element.")}();var elements,tabbableNodes={firstItem:(elements=tabbable_default()(currentRef))[0]||getInitialFocusNode(),lastItem:elements[elements.length-1]||getInitialFocusNode()};!event.shiftKey||event.target!==tabbableNodes.firstItem&&event.target!==currentRef||(focusElement(tabbableNodes.lastItem),event.preventDefault()),event.shiftKey||event.target!==tabbableNodes.lastItem||(focusElement(tabbableNodes.firstItem),event.preventDefault())}})),"data-garden-container-id":"containers.focusjail","data-garden-container-version":"storybook"},other)},focusElement:focusElement}},FocusJailContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=Object(objectWithoutPropertiesLoose.a)(_ref,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(useFocusJail(options))))};FocusJailContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,focusOnMount:prop_types_default.a.bool,environment:prop_types_default.a.any,containerRef:prop_types_default.a.any.isRequired,focusElem:prop_types_default.a.func},FocusJailContainer.__docgenInfo={description:"",methods:[],displayName:"FocusJailContainer",props:{children:{type:{name:"func"},required:!1,description:"A children render prop function which receives a focus jail prop getter"},render:{type:{name:"func"},required:!1,description:"A render prop function which receives a focus jail prop getter"},focusOnMount:{type:{name:"bool"},required:!1,description:"Focuses on the `containerRef` element after mounting"},environment:{type:{name:"any"},required:!1,description:"The global environment where the focus jail is rendered"},containerRef:{type:{name:"any"},required:!0,description:"A [ref](https://reactjs.org/docs/refs-and-the-dom.html) pointing to the focus jail's container element"},focusElem:{type:{name:"func"},required:!1,description:"A callback function that receives the focused element"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/focusjail/src/FocusJailContainer.tsx"]={name:"FocusJailContainer",docgenInfo:FocusJailContainer.__docgenInfo,path:"packages/focusjail/src/FocusJailContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/focusjail",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/focusjail";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/focusjail\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, createRef } from \'react\';\\\\n\\\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const containerRef = createRef<HTMLElement>();\\\\n\\\\n  return (\\\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\\\n      {({ getContainerProps }) => (\\\\n        <>\\\\n          <input />\\\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n            <p>Focus is locked within the parent element</p>\\\\n            <input />\\\\n            <button>Focusable Items</button>\\\\n          </div>\\\\n        </>\\\\n      )}\\\\n    </FocusJailContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const containerRef = useRef(null);\\\\n  const { getContainerProps } = useFocusJail({\\\\n    focusOnMount: boolean(\'focusOnMount\', true),\\\\n    containerRef\\\\n  });\\\\n\\\\n  return (\\\\n    <>\\\\n      <input />\\\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n        <p>Focus is locked within the parent element</p>\\\\n        <input />\\\\n        <button>Focusable Items</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusJailContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusJail\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusJail\\\\\\\\` hook allows you to trap focus to a container element. Useful\\\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusJail Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusJailContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"focusjail-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":31},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":31}},\\"focusjail-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":33},\\"endLoc\\":{\\"col\\":1,\\"line\\":50},\\"startBody\\":{\\"col\\":20,\\"line\\":33},\\"endBody\\":{\\"col\\":1,\\"line\\":50}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/focusjail.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, createRef } from \'react\';\\\\n\\\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const containerRef = createRef<HTMLElement>();\\\\n\\\\n  return (\\\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\\\n      {({ getContainerProps }) => (\\\\n        <>\\\\n          <input />\\\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n            <p>Focus is locked within the parent element</p>\\\\n            <input />\\\\n            <button>Focusable Items</button>\\\\n          </div>\\\\n        </>\\\\n      )}\\\\n    </FocusJailContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const containerRef = useRef(null);\\\\n  const { getContainerProps } = useFocusJail({\\\\n    focusOnMount: boolean(\'focusOnMount\', true),\\\\n    containerRef\\\\n  });\\\\n\\\\n  return (\\\\n    <>\\\\n      <input />\\\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n        <p>Focus is locked within the parent element</p>\\\\n        <input />\\\\n        <button>Focusable Items</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusJailContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusJail\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusJail\\\\\\\\` hook allows you to trap focus to a container element. Useful\\\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusJail Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusJailContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"focusjail-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":31},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":31}},\\"focusjail-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":33},\\"endLoc\\":{\\"col\\":1,\\"line\\":50},\\"startBody\\":{\\"col\\":20,\\"line\\":33},\\"endBody\\":{\\"col\\":1,\\"line\\":50}}}},\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"focusjail-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":53},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":53}},"focusjail-container--hook":{"startLoc":{"col":20,"line":55},"endLoc":{"col":139,"line":72},"startBody":{"col":20,"line":55},"endBody":{"col":139,"line":72}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/focusjail.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/focusjail";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = () => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"focusjail-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":31},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":31}},"focusjail-container--hook":{"startLoc":{"col":20,"line":33},"endLoc":{"col":1,"line":50},"startBody":{"col":20,"line":33},"endBody":{"col":1,"line":50}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/focusjail.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, createRef } from \'react\';\n\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\n\nimport { FocusJailContainer, useFocusJail } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const containerRef = createRef<HTMLElement>();\n\n  return (\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\n      {({ getContainerProps }) => (\n        <>\n          <input />\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n            <p>Focus is locked within the parent element</p>\n            <input />\n            <button>Focusable Items</button>\n          </div>\n        </>\n      )}\n    </FocusJailContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const containerRef = useRef(null);\n  const { getContainerProps } = useFocusJail({\n    focusOnMount: boolean(\'focusOnMount\', true),\n    containerRef\n  });\n\n  return (\n    <>\n      <input />\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n        <p>Focus is locked within the parent element</p>\n        <input />\n        <button>Focusable Items</button>\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FocusJailContainer\'\n};\n\nHook.story = {\n  name: \'useFocusJail\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusJail\\` hook allows you to trap focus to a container element. Useful\n      for modals and widgets. Garden uses this in react-components for the modals package.`\n    }\n  }\n};\n\nexport default {\n  title: \'FocusJail Container\',\n  decorators: [withKnobs],\n  component: FocusJailContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/focusjail\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, createRef } from \'react\';\\\\n\\\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const containerRef = createRef<HTMLElement>();\\\\n\\\\n  return (\\\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\\\n      {({ getContainerProps }) => (\\\\n        <>\\\\n          <input />\\\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n            <p>Focus is locked within the parent element</p>\\\\n            <input />\\\\n            <button>Focusable Items</button>\\\\n          </div>\\\\n        </>\\\\n      )}\\\\n    </FocusJailContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const containerRef = useRef(null);\\\\n  const { getContainerProps } = useFocusJail({\\\\n    focusOnMount: boolean(\'focusOnMount\', true),\\\\n    containerRef\\\\n  });\\\\n\\\\n  return (\\\\n    <>\\\\n      <input />\\\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n        <p>Focus is locked within the parent element</p>\\\\n        <input />\\\\n        <button>Focusable Items</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusJailContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusJail\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusJail\\\\\\\\` hook allows you to trap focus to a container element. Useful\\\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusJail Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusJailContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"focusjail-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":31},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":31}},\\"focusjail-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":33},\\"endLoc\\":{\\"col\\":1,\\"line\\":50},\\"startBody\\":{\\"col\\":20,\\"line\\":33},\\"endBody\\":{\\"col\\":1,\\"line\\":50}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/focusjail.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, createRef } from \'react\';\\\\n\\\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const containerRef = createRef<HTMLElement>();\\\\n\\\\n  return (\\\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\\\n      {({ getContainerProps }) => (\\\\n        <>\\\\n          <input />\\\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n            <p>Focus is locked within the parent element</p>\\\\n            <input />\\\\n            <button>Focusable Items</button>\\\\n          </div>\\\\n        </>\\\\n      )}\\\\n    </FocusJailContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const containerRef = useRef(null);\\\\n  const { getContainerProps } = useFocusJail({\\\\n    focusOnMount: boolean(\'focusOnMount\', true),\\\\n    containerRef\\\\n  });\\\\n\\\\n  return (\\\\n    <>\\\\n      <input />\\\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n        <p>Focus is locked within the parent element</p>\\\\n        <input />\\\\n        <button>Focusable Items</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusJailContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusJail\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusJail\\\\\\\\` hook allows you to trap focus to a container element. Useful\\\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusJail Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusJailContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"focusjail-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":31},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":31}},\\"focusjail-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":33},\\"endLoc\\":{\\"col\\":1,\\"line\\":50},\\"startBody\\":{\\"col\\":20,\\"line\\":33},\\"endBody\\":{\\"col\\":1,\\"line\\":50}}}},\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  },};\\n","locationsMap":{"focusjail-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":53},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":53}},"focusjail-container--hook":{"startLoc":{"col":20,"line":55},"endLoc":{"col":139,"line":72},"startBody":{"col":20,"line":55},"endBody":{"col":139,"line":72}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = () => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  }\\n};\\n","locationsMap":{"focusjail-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":31},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":31}},"focusjail-container--hook":{"startLoc":{"col":20,"line":33},"endLoc":{"col":1,"line":50},"startBody":{"col":20,"line":33},"endBody":{"col":1,"line":50}}}},\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\n  },};\n',__ADDS_MAP__={"focusjail-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:75},startBody:{col:25,line:58},endBody:{col:277,line:75}},"focusjail-container--hook":{startLoc:{col:20,line:77},endLoc:{col:277,line:94},startBody:{col:20,line:77},endBody:{col:277,line:94}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},Container=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/focusjail",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/focusjail";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = () => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"focusjail-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":31},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":31}},"focusjail-container--hook":{"startLoc":{"col":20,"line":33},"endLoc":{"col":1,"line":50},"startBody":{"col":20,"line":33},"endBody":{"col":1,"line":50}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/focusjail.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, createRef } from \'react\';\n\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\n\nimport { FocusJailContainer, useFocusJail } from \'./src\';\n\nexport const Container = addSourceDecorator(() => {\n  const containerRef = createRef<HTMLElement>();\n\n  return (\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\n      {({ getContainerProps }) => (\n        <>\n          <input />\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n            <p>Focus is locked within the parent element</p>\n            <input />\n            <button>Focusable Items</button>\n          </div>\n        </>\n      )}\n    </FocusJailContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const containerRef = useRef(null);\n  const { getContainerProps } = useFocusJail({\n    focusOnMount: boolean(\'focusOnMount\', true),\n    containerRef\n  });\n\n  return (\n    <>\n      <input />\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n        <p>Focus is locked within the parent element</p>\n        <input />\n        <button>Focusable Items</button>\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FocusJailContainer\'\n};\n\nHook.story = {\n  name: \'useFocusJail\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusJail\\` hook allows you to trap focus to a container element. Useful\n      for modals and widgets. Garden uses this in react-components for the modals package.`\n    }\n  }\n};\n\nexport default {\n  title: \'FocusJail Container\',\n  decorators: [withKnobs],\n  component: FocusJailContainer,\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = () => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  }\\n};\\n","locationsMap":{"focusjail-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":31},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":31}},"focusjail-container--hook":{"startLoc":{"col":20,"line":33},"endLoc":{"col":1,"line":50},"startBody":{"col":20,"line":33},"endBody":{"col":1,"line":50}}}},\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\n  },};\n',__ADDS_MAP__={"focusjail-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:53},startBody:{col:25,line:36},endBody:{col:139,line:53}},"focusjail-container--hook":{startLoc:{col:20,line:55},endLoc:{col:139,line:72},startBody:{col:20,line:55},endBody:{col:139,line:72}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(2).withSource,(addSourceDecorator=__webpack_require__(2).addSource)(addSourceDecorator(addSourceDecorator((function(){var containerRef=Object(react.createRef)();return(react_default.a.createElement(FocusJailContainer,{containerRef:containerRef,focusOnMount:Object(dist.boolean)("focusOnMount",!0)},(function(_ref){var getContainerProps=_ref.getContainerProps;return(react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("input",null),react_default.a.createElement("div",getContainerProps({ref:containerRef,tabIndex:-1}),react_default.a.createElement("p",null,"Focus is locked within the parent element"),react_default.a.createElement("input",null),react_default.a.createElement("button",null,"Focusable Items"))))})))}),{__STORY__:__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, createRef } from 'react';\n\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\n\nimport { FocusJailContainer, useFocusJail } from './src';\n\nexport const Container = () => {\n  const containerRef = createRef<HTMLElement>();\n\n  return (\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean('focusOnMount', true)}>\n      {({ getContainerProps }) => (\n        <>\n          <input />\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n            <p>Focus is locked within the parent element</p>\n            <input />\n            <button>Focusable Items</button>\n          </div>\n        </>\n      )}\n    </FocusJailContainer>\n  );\n};\n\nexport const Hook = () => {\n  const containerRef = useRef(null);\n  const { getContainerProps } = useFocusJail({\n    focusOnMount: boolean('focusOnMount', true),\n    containerRef\n  });\n\n  return (\n    <>\n      <input />\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n        <p>Focus is locked within the parent element</p>\n        <input />\n        <button>Focusable Items</button>\n      </div>\n    </>\n  );\n};\n\nContainer.story = {\n  name: 'FocusJailContainer'\n};\n\nHook.story = {\n  name: 'useFocusJail',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusJail\\` hook allows you to trap focus to a container element. Useful\n      for modals and widgets. Garden uses this in react-components for the modals package.`\n    }\n  }\n};\n\nexport default {\n  title: 'FocusJail Container',\n  decorators: [withKnobs],\n  component: FocusJailContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\n  }\n};\n",__ADDS_MAP__:__ADDS_MAP__={"focusjail-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:31},startBody:{col:25,line:14},endBody:{col:1,line:31}},"focusjail-container--hook":{startLoc:{col:20,line:33},endLoc:{col:1,line:50},startBody:{col:20,line:33},endBody:{col:1,line:50}}},__MAIN_FILE_LOCATION__:"/focusjail.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/home/circleci/project/packages/focusjail",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusjail.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusjail.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var containerRef=Object(react.useRef)(null),getContainerProps=useFocusJail({focusOnMount:Object(dist.boolean)("focusOnMount",!0),containerRef:containerRef}).getContainerProps;return(react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("input",null),react_default.a.createElement("div",getContainerProps({ref:containerRef,tabIndex:-1}),react_default.a.createElement("p",null,"Focus is locked within the parent element"),react_default.a.createElement("input",null),react_default.a.createElement("button",null,"Focusable Items"))))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusjail.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusjail.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusjail.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"FocusJailContainer"},Hook.story={name:"useFocusJail",parameters:{docs:{storyDescription:"The `useFocusJail` hook allows you to trap focus to a container element. Useful\n      for modals and widgets. Garden uses this in react-components for the modals package."}}};__webpack_exports__.default={title:"FocusJail Container",decorators:[dist.withKnobs],component:FocusJailContainer,parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/focusjail";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/focusjail\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, createRef } from \'react\';\\\\n\\\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const containerRef = createRef<HTMLElement>();\\\\n\\\\n  return (\\\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\\\n      {({ getContainerProps }) => (\\\\n        <>\\\\n          <input />\\\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n            <p>Focus is locked within the parent element</p>\\\\n            <input />\\\\n            <button>Focusable Items</button>\\\\n          </div>\\\\n        </>\\\\n      )}\\\\n    </FocusJailContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const containerRef = useRef(null);\\\\n  const { getContainerProps } = useFocusJail({\\\\n    focusOnMount: boolean(\'focusOnMount\', true),\\\\n    containerRef\\\\n  });\\\\n\\\\n  return (\\\\n    <>\\\\n      <input />\\\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n        <p>Focus is locked within the parent element</p>\\\\n        <input />\\\\n        <button>Focusable Items</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusJailContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusJail\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusJail\\\\\\\\` hook allows you to trap focus to a container element. Useful\\\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusJail Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusJailContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"focusjail-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":31},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":31}},\\"focusjail-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":33},\\"endLoc\\":{\\"col\\":1,\\"line\\":50},\\"startBody\\":{\\"col\\":20,\\"line\\":33},\\"endBody\\":{\\"col\\":1,\\"line\\":50}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/focusjail.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, createRef } from \'react\';\\\\n\\\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const containerRef = createRef<HTMLElement>();\\\\n\\\\n  return (\\\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\\\n      {({ getContainerProps }) => (\\\\n        <>\\\\n          <input />\\\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n            <p>Focus is locked within the parent element</p>\\\\n            <input />\\\\n            <button>Focusable Items</button>\\\\n          </div>\\\\n        </>\\\\n      )}\\\\n    </FocusJailContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const containerRef = useRef(null);\\\\n  const { getContainerProps } = useFocusJail({\\\\n    focusOnMount: boolean(\'focusOnMount\', true),\\\\n    containerRef\\\\n  });\\\\n\\\\n  return (\\\\n    <>\\\\n      <input />\\\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n        <p>Focus is locked within the parent element</p>\\\\n        <input />\\\\n        <button>Focusable Items</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusJailContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusJail\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusJail\\\\\\\\` hook allows you to trap focus to a container element. Useful\\\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusJail Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusJailContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"focusjail-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":31},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":31}},\\"focusjail-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":33},\\"endLoc\\":{\\"col\\":1,\\"line\\":50},\\"startBody\\":{\\"col\\":20,\\"line\\":33},\\"endBody\\":{\\"col\\":1,\\"line\\":50}}}},\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"focusjail-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":53},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":53}},"focusjail-container--hook":{"startLoc":{"col":20,"line":55},"endLoc":{"col":139,"line":72},"startBody":{"col":20,"line":55},"endBody":{"col":139,"line":72}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/focusjail.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/focusjail";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = () => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"focusjail-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":31},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":31}},"focusjail-container--hook":{"startLoc":{"col":20,"line":33},"endLoc":{"col":1,"line":50},"startBody":{"col":20,"line":33},"endBody":{"col":1,"line":50}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/focusjail.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, createRef } from \'react\';\n\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\n\nimport { FocusJailContainer, useFocusJail } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const containerRef = createRef<HTMLElement>();\n\n  return (\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\n      {({ getContainerProps }) => (\n        <>\n          <input />\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n            <p>Focus is locked within the parent element</p>\n            <input />\n            <button>Focusable Items</button>\n          </div>\n        </>\n      )}\n    </FocusJailContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const containerRef = useRef(null);\n  const { getContainerProps } = useFocusJail({\n    focusOnMount: boolean(\'focusOnMount\', true),\n    containerRef\n  });\n\n  return (\n    <>\n      <input />\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n        <p>Focus is locked within the parent element</p>\n        <input />\n        <button>Focusable Items</button>\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FocusJailContainer\'\n};\n\nHook.story = {\n  name: \'useFocusJail\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusJail\\` hook allows you to trap focus to a container element. Useful\n      for modals and widgets. Garden uses this in react-components for the modals package.`\n    }\n  }\n};\n\nexport default {\n  title: \'FocusJail Container\',\n  decorators: [withKnobs],\n  component: FocusJailContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/focusjail\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, createRef } from \'react\';\\\\n\\\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const containerRef = createRef<HTMLElement>();\\\\n\\\\n  return (\\\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\\\n      {({ getContainerProps }) => (\\\\n        <>\\\\n          <input />\\\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n            <p>Focus is locked within the parent element</p>\\\\n            <input />\\\\n            <button>Focusable Items</button>\\\\n          </div>\\\\n        </>\\\\n      )}\\\\n    </FocusJailContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const containerRef = useRef(null);\\\\n  const { getContainerProps } = useFocusJail({\\\\n    focusOnMount: boolean(\'focusOnMount\', true),\\\\n    containerRef\\\\n  });\\\\n\\\\n  return (\\\\n    <>\\\\n      <input />\\\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n        <p>Focus is locked within the parent element</p>\\\\n        <input />\\\\n        <button>Focusable Items</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusJailContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusJail\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusJail\\\\\\\\` hook allows you to trap focus to a container element. Useful\\\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusJail Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusJailContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"focusjail-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":31},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":31}},\\"focusjail-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":33},\\"endLoc\\":{\\"col\\":1,\\"line\\":50},\\"startBody\\":{\\"col\\":20,\\"line\\":33},\\"endBody\\":{\\"col\\":1,\\"line\\":50}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/focusjail.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, createRef } from \'react\';\\\\n\\\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const containerRef = createRef<HTMLElement>();\\\\n\\\\n  return (\\\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\\\n      {({ getContainerProps }) => (\\\\n        <>\\\\n          <input />\\\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n            <p>Focus is locked within the parent element</p>\\\\n            <input />\\\\n            <button>Focusable Items</button>\\\\n          </div>\\\\n        </>\\\\n      )}\\\\n    </FocusJailContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const containerRef = useRef(null);\\\\n  const { getContainerProps } = useFocusJail({\\\\n    focusOnMount: boolean(\'focusOnMount\', true),\\\\n    containerRef\\\\n  });\\\\n\\\\n  return (\\\\n    <>\\\\n      <input />\\\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\\\n        <p>Focus is locked within the parent element</p>\\\\n        <input />\\\\n        <button>Focusable Items</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusJailContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusJail\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusJail\\\\\\\\` hook allows you to trap focus to a container element. Useful\\\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusJail Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusJailContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"focusjail-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":31},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":31}},\\"focusjail-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":33},\\"endLoc\\":{\\"col\\":1,\\"line\\":50},\\"startBody\\":{\\"col\\":20,\\"line\\":33},\\"endBody\\":{\\"col\\":1,\\"line\\":50}}}},\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  },};\\n","locationsMap":{"focusjail-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":53},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":53}},"focusjail-container--hook":{"startLoc":{"col":20,"line":55},"endLoc":{"col":139,"line":72},"startBody":{"col":20,"line":55},"endBody":{"col":139,"line":72}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = () => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  }\\n};\\n","locationsMap":{"focusjail-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":31},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":31}},"focusjail-container--hook":{"startLoc":{"col":20,"line":33},"endLoc":{"col":1,"line":50},"startBody":{"col":20,"line":33},"endBody":{"col":1,"line":50}}}},\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\n  },};\n',locationsMap:{"focusjail-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:75},startBody:{col:25,line:58},endBody:{col:277,line:75}},"focusjail-container--hook":{startLoc:{col:20,line:77},endLoc:{col:277,line:94},startBody:{col:20,line:77},endBody:{col:277,line:94}}}}},_parameters.storySource={source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/focusjail";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = () => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"focusjail-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":31},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":31}},"focusjail-container--hook":{"startLoc":{"col":20,"line":33},"endLoc":{"col":1,"line":50},"startBody":{"col":20,"line":33},"endBody":{"col":1,"line":50}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/focusjail.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, createRef } from \'react\';\n\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\n\nimport { FocusJailContainer, useFocusJail } from \'./src\';\n\nexport const Container = addSourceDecorator(() => {\n  const containerRef = createRef<HTMLElement>();\n\n  return (\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\n      {({ getContainerProps }) => (\n        <>\n          <input />\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n            <p>Focus is locked within the parent element</p>\n            <input />\n            <button>Focusable Items</button>\n          </div>\n        </>\n      )}\n    </FocusJailContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const containerRef = useRef(null);\n  const { getContainerProps } = useFocusJail({\n    focusOnMount: boolean(\'focusOnMount\', true),\n    containerRef\n  });\n\n  return (\n    <>\n      <input />\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n        <p>Focus is locked within the parent element</p>\n        <input />\n        <button>Focusable Items</button>\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FocusJailContainer\'\n};\n\nHook.story = {\n  name: \'useFocusJail\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusJail\\` hook allows you to trap focus to a container element. Useful\n      for modals and widgets. Garden uses this in react-components for the modals package.`\n    }\n  }\n};\n\nexport default {\n  title: \'FocusJail Container\',\n  decorators: [withKnobs],\n  component: FocusJailContainer,\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, createRef } from \'react\';\\n\\nimport { withKnobs, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { FocusJailContainer, useFocusJail } from \'./src\';\\n\\nexport const Container = () => {\\n  const containerRef = createRef<HTMLElement>();\\n\\n  return (\\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean(\'focusOnMount\', true)}>\\n      {({ getContainerProps }) => (\\n        <>\\n          <input />\\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n            <p>Focus is locked within the parent element</p>\\n            <input />\\n            <button>Focusable Items</button>\\n          </div>\\n        </>\\n      )}\\n    </FocusJailContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const containerRef = useRef(null);\\n  const { getContainerProps } = useFocusJail({\\n    focusOnMount: boolean(\'focusOnMount\', true),\\n    containerRef\\n  });\\n\\n  return (\\n    <>\\n      <input />\\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\\n        <p>Focus is locked within the parent element</p>\\n        <input />\\n        <button>Focusable Items</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'FocusJailContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusJail\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusJail\\\\` hook allows you to trap focus to a container element. Useful\\n      for modals and widgets. Garden uses this in react-components for the modals package.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusJail Container\',\\n  decorators: [withKnobs],\\n  component: FocusJailContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\\n  }\\n};\\n","locationsMap":{"focusjail-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":31},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":31}},"focusjail-container--hook":{"startLoc":{"col":20,"line":33},"endLoc":{"col":1,"line":50},"startBody":{"col":20,"line":33},"endBody":{"col":1,"line":50}}}},\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\n  },};\n',locationsMap:{"focusjail-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:53},startBody:{col:25,line:36},endBody:{col:139,line:53}},"focusjail-container--hook":{startLoc:{col:20,line:55},endLoc:{col:139,line:72},startBody:{col:20,line:55},endBody:{col:139,line:72}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, createRef } from 'react';\n\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\n\nimport { FocusJailContainer, useFocusJail } from './src';\n\nexport const Container = () => {\n  const containerRef = createRef<HTMLElement>();\n\n  return (\n    <FocusJailContainer containerRef={containerRef} focusOnMount={boolean('focusOnMount', true)}>\n      {({ getContainerProps }) => (\n        <>\n          <input />\n          <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n            <p>Focus is locked within the parent element</p>\n            <input />\n            <button>Focusable Items</button>\n          </div>\n        </>\n      )}\n    </FocusJailContainer>\n  );\n};\n\nexport const Hook = () => {\n  const containerRef = useRef(null);\n  const { getContainerProps } = useFocusJail({\n    focusOnMount: boolean('focusOnMount', true),\n    containerRef\n  });\n\n  return (\n    <>\n      <input />\n      <div {...getContainerProps({ ref: containerRef, tabIndex: -1 })}>\n        <p>Focus is locked within the parent element</p>\n        <input />\n        <button>Focusable Items</button>\n      </div>\n    </>\n  );\n};\n\nContainer.story = {\n  name: 'FocusJailContainer'\n};\n\nHook.story = {\n  name: 'useFocusJail',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusJail\\` hook allows you to trap focus to a container element. Useful\n      for modals and widgets. Garden uses this in react-components for the modals package.`\n    }\n  }\n};\n\nexport default {\n  title: 'FocusJail Container',\n  decorators: [withKnobs],\n  component: FocusJailContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useFocusJail hook.`\n  }\n};\n",locationsMap:{"focusjail-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:31},startBody:{col:25,line:14},endBody:{col:1,line:31}},"focusjail-container--hook":{startLoc:{col:20,line:33},endLoc:{col:1,line:50},startBody:{col:20,line:33},endBody:{col:1,line:50}}}},_parameters.componentSubtitle="A container component which wraps the useFocusJail hook.",_parameters)}},1415:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return useSelection}));__webpack_require__(45);var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(408),_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(127),react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(0),_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(3);function stateReducer(state,action){switch(action.type){case"FOCUS":return action.onFocus?(action.payload!==action.focusedItem&&action.onFocus(action.payload),state):Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)({},state,{focusedItem:action.payload});case"INCREMENT":var controlledFocusedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(action.focusedItem,state.focusedItem),controlledSelectedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(action.selectedItem,state.selectedItem),currentItemIndex=void 0===controlledFocusedItem?action.items.indexOf(controlledSelectedItem):action.items.indexOf(controlledFocusedItem),newFocusedItem=action.items[(currentItemIndex+1)%action.items.length];return action.onFocus?(action.onFocus(newFocusedItem),state):Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)({},state,{focusedItem:newFocusedItem});case"DECREMENT":var _controlledFocusedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(action.focusedItem,state.focusedItem),_controlledSelectedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(action.selectedItem,state.selectedItem),_currentItemIndex=void 0===_controlledFocusedItem?action.items.indexOf(_controlledSelectedItem):action.items.indexOf(_controlledFocusedItem),_newFocusedItem=action.items[(_currentItemIndex+action.items.length-1)%action.items.length];return action.onFocus?(action.onFocus(_newFocusedItem),state):Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)({},state,{focusedItem:_newFocusedItem});case"HOME":return action.onFocus?(action.onFocus(action.items[0]),state):Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)({},state,{focusedItem:action.items[0]});case"END":return action.onFocus?(action.onFocus(action.items[action.items.length-1]),state):Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)({},state,{focusedItem:action.items[action.items.length-1]});case"MOUSE_SELECT":var isSelectControlled=!1,isFocusControlled=!1;if(action.onSelect&&(action.onSelect(action.payload),isSelectControlled=!0),action.onFocus&&(action.onFocus(void 0),isFocusControlled=!0),isFocusControlled&&isSelectControlled)return state;var updatedState=Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)({},state);return isSelectControlled||(updatedState.selectedItem=action.payload),isFocusControlled||(updatedState.focusedItem=void 0),updatedState;case"KEYBOARD_SELECT":return action.onSelect?(action.onSelect(action.payload),state):Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)({},state,{selectedItem:action.payload});case"EXIT_WIDGET":return action.onFocus?(action.onFocus(void 0),state):Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)({},state,{focusedItem:void 0});default:return state}}function useSelection(_temp){var _ref=void 0===_temp?{}:_temp,_ref$direction=_ref.direction,direction=void 0===_ref$direction?"horizontal":_ref$direction,_ref$defaultFocusedIn=_ref.defaultFocusedIndex,defaultFocusedIndex=void 0===_ref$defaultFocusedIn?0:_ref$defaultFocusedIn,defaultSelectedIndex=_ref.defaultSelectedIndex,rtl=_ref.rtl,selectedItem=_ref.selectedItem,focusedItem=_ref.focusedItem,onSelect=_ref.onSelect,onFocus=_ref.onFocus,refs=[],items=[],_useReducer=Object(react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(stateReducer,{selectedItem:selectedItem,focusedItem:focusedItem}),state=_useReducer[0],dispatch=_useReducer[1],controlledFocusedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(focusedItem,state.focusedItem),controlledSelectedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(selectedItem,state.selectedItem);return Object(react__WEBPACK_IMPORTED_MODULE_3__.useEffect)((function(){if(void 0!==controlledFocusedItem){var focusedIndex=items.indexOf(controlledFocusedItem);refs[focusedIndex]&&refs[focusedIndex].current.focus()}}),[controlledFocusedItem]),Object(react__WEBPACK_IMPORTED_MODULE_3__.useEffect)((function(){void 0===selectedItem&&void 0!==defaultSelectedIndex&&dispatch({type:"KEYBOARD_SELECT",payload:items[defaultSelectedIndex],onSelect:onSelect})}),[]),{focusedItem:controlledFocusedItem,selectedItem:controlledSelectedItem,getItemProps:function(_temp3,propGetterName){var _extends2,_ref3=void 0===_temp3?{}:_temp3,_ref3$selectedAriaKey=_ref3.selectedAriaKey,selectedAriaKey=void 0===_ref3$selectedAriaKey?"aria-selected":_ref3$selectedAriaKey,_ref3$role=_ref3.role,role=void 0===_ref3$role?"option":_ref3$role,onFocusCallback=_ref3.onFocus,onKeyDown=_ref3.onKeyDown,onClick=_ref3.onClick,item=_ref3.item,focusRef=_ref3.focusRef,_ref3$refKey=_ref3.refKey,refKey=void 0===_ref3$refKey?"ref":_ref3$refKey,other=Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__.a)(_ref3,["selectedAriaKey","role","onFocus","onKeyDown","onClick","item","focusRef","refKey"]);if(void 0===propGetterName&&(propGetterName="getItemProps"),void 0===item)throw new Error('Accessibility Error: You must provide an "item" option to "'+propGetterName+'()"');if(void 0===focusRef)throw new Error('Accessibility Error: You must provide a "focusRef" option to "'+propGetterName+'()"');refs.push(focusRef),items.push(item);var isSelected=controlledSelectedItem===item,tabIndex=(void 0===controlledFocusedItem?isSelected:controlledFocusedItem===item)||void 0===controlledSelectedItem&&void 0===controlledFocusedItem&&items.indexOf(item)===defaultFocusedIndex?0:-1,verticalDirection="vertical"===direction||"both"===direction,horizontalDirection="horizontal"===direction||"both"===direction;return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)(((_extends2={role:role,tabIndex:tabIndex})[selectedAriaKey]=selectedAriaKey?isSelected:void 0,_extends2[refKey]=focusRef,_extends2.onFocus=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.b)(onFocusCallback,(function(){dispatch({type:"FOCUS",payload:item,focusedItem:focusedItem,onFocus:onFocus})})),_extends2.onBlur=function(e){0===e.target.tabIndex&&dispatch({type:"EXIT_WIDGET",onFocus:onFocus})},_extends2.onClick=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.b)(onClick,(function(){dispatch({type:"MOUSE_SELECT",payload:item,onSelect:onSelect,onFocus:onFocus})})),_extends2.onKeyDown=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.b)(onKeyDown,(function(e){e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.UP&&verticalDirection||e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.LEFT&&horizontalDirection?(dispatch(rtl&&!verticalDirection?{type:"INCREMENT",items:items,focusedItem:focusedItem,selectedItem:selectedItem,onFocus:onFocus}:{type:"DECREMENT",items:items,focusedItem:focusedItem,selectedItem:selectedItem,onFocus:onFocus}),e.preventDefault()):e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.DOWN&&verticalDirection||e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.RIGHT&&horizontalDirection?(dispatch(rtl&&!verticalDirection?{type:"DECREMENT",items:items,focusedItem:focusedItem,selectedItem:selectedItem,onFocus:onFocus}:{type:"INCREMENT",items:items,focusedItem:focusedItem,selectedItem:selectedItem,onFocus:onFocus}),e.preventDefault()):e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.HOME?(dispatch({type:"HOME",items:items,onFocus:onFocus}),e.preventDefault()):e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.END?(dispatch({type:"END",items:items,onFocus:onFocus}),e.preventDefault()):e.keyCode!==_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.SPACE&&e.keyCode!==_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.ENTER||(dispatch({type:"KEYBOARD_SELECT",payload:item,onSelect:onSelect}),e.preventDefault())})),_extends2),other)},getContainerProps:function(_temp2){var _ref2=void 0===_temp2?{}:_temp2,_ref2$role=_ref2.role,role=void 0===_ref2$role?"listbox":_ref2$role,other=Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__.a)(_ref2,["role"]);return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__.a)({role:role,"data-garden-container-id":"containers.selection","data-garden-container-version":"storybook"},other)}}}},1426:function(module,exports,__webpack_require__){__webpack_require__(1427),__webpack_require__(1576),__webpack_require__(1577),__webpack_require__(2502),__webpack_require__(2503),__webpack_require__(2732),module.exports=__webpack_require__(2781)},1449:function(module,exports){},2503:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(196),__webpack_require__(275),__webpack_require__(225),__webpack_require__(276),__webpack_require__(2512);var react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__),_storybook_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(406),_storybook_addon_centered_react__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(1412),_storybook_addon_centered_react__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(_storybook_addon_centered_react__WEBPACK_IMPORTED_MODULE_7__),_storybook_addon_a11y__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(1413);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_6__.addDecorator)((function(){for(var params=new URL(document.location).searchParams,isInDockView="docs"===params.get("viewMode"),_len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return isInDockView?react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{style:{display:"flex",alignItems:"center",overflow:"auto"}},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{style:{margin:"auto",maxHeight:"100%"}},args[0]())):_storybook_addon_centered_react__WEBPACK_IMPORTED_MODULE_7___default.a.apply(void 0,args)})),Object(_storybook_react__WEBPACK_IMPORTED_MODULE_6__.addDecorator)(_storybook_addon_a11y__WEBPACK_IMPORTED_MODULE_8__.withA11y)},2781:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(406);module._StorybookPreserveDecorators=!0,Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.configure)([__webpack_require__(2783)],module)}.call(this,__webpack_require__(2782)(module))},2783:function(module,exports,__webpack_require__){var map={"./accordion/accordion.stories.tsx":2813,"./breadcrumb/breadcrumb.stories.tsx":2814,"./buttongroup/buttongroup.stories.tsx":2815,"./buttongroup/node_modules/@zendeskgarden/container-selection/selection.stories.tsx":574,"./field/field.stories.tsx":2816,"./focusjail/focusjail.stories.tsx":1394,"./focusvisible/focusvisible.stories.tsx":2817,"./keyboardfocus/keyboardfocus.stories.tsx":2818,"./modal/modal.stories.tsx":2811,"./modal/node_modules/@zendeskgarden/container-focusjail/focusjail.stories.tsx":1394,"./pagination/node_modules/@zendeskgarden/container-selection/selection.stories.tsx":574,"./pagination/pagination.stories.tsx":2819,"./schedule/schedule.stories.tsx":2820,"./selection/selection.stories.tsx":574,"./tabs/node_modules/@zendeskgarden/container-selection/selection.stories.tsx":574,"./tabs/tabs.stories.tsx":2821,"./tooltip/tooltip.stories.tsx":2812};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=2783},2811:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),objectWithoutPropertiesLoose=__webpack_require__(200),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),esm_extends=__webpack_require__(293),hooks=__webpack_require__(2844),index_esm=__webpack_require__(3),tabbable=(__webpack_require__(45),__webpack_require__(76),__webpack_require__(66),__webpack_require__(585)),tabbable_default=__webpack_require__.n(tabbable);function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}function activeElement(doc){void 0===doc&&(doc=function ownerDocument(node){return node&&node.ownerDocument||document}());try{var active=doc.activeElement;return active&&active.nodeName?active:null}catch(e){return doc.body}}var useFocusJail=function(_temp){var _ref=void 0===_temp?{containerRef:Object(react.createRef)()}:_temp,_ref$focusOnMount=_ref.focusOnMount,focusOnMount=void 0===_ref$focusOnMount||_ref$focusOnMount,_ref$restoreFocus=_ref.restoreFocus,restoreFocus=void 0===_ref$restoreFocus||_ref$restoreFocus,environment=_ref.environment,focusElem=_ref.focusElem,containerRef=_ref.containerRef,restoreFocusElement=Object(react.useRef)(null),_useState=Object(react.useState)(containerRef.current),currentRef=_useState[0],setCurrentRef=_useState[1];Object(react.useEffect)((function(){containerRef.current!==currentRef&&setCurrentRef(containerRef.current)}));var focusElement=Object(react.useCallback)((function(element){focusElem?focusElem(element):element&&element.focus()}),[focusElem]),getInitialFocusNode=function(){var activeElem=activeElement(environment||document),containerElem=currentRef;return containerElem.contains(activeElem)?activeElem:containerElem};return Object(react.useEffect)((function(){return restoreFocusElement.current=activeElement(environment||document),focusOnMount&&focusElement(currentRef),function(){var isBodyInactive=restoreFocusElement.current!==document.body,hasActiveElement=null!==restoreFocusElement.current;isBodyInactive&&hasActiveElement&&restoreFocus&&focusElement(restoreFocusElement.current)}}),[focusOnMount,restoreFocus,environment,focusElement,currentRef]),{getContainerProps:function(_temp2){var _ref2=void 0===_temp2?{}:_temp2,onKeyDown=_ref2.onKeyDown,other=_objectWithoutPropertiesLoose(_ref2,["onKeyDown"]);return _extends({onKeyDown:Object(index_esm.b)(onKeyDown,(function(event){if(event.keyCode===index_esm.a.TAB){!function(){if(!currentRef)throw new Error("Accessibility Error: You must apply the ref prop to your containing element.")}();var elements,tabbableNodes={firstItem:(elements=tabbable_default()(currentRef))[0]||getInitialFocusNode(),lastItem:elements[elements.length-1]||getInitialFocusNode()};!event.shiftKey||event.target!==tabbableNodes.firstItem&&event.target!==currentRef||(focusElement(tabbableNodes.lastItem),event.preventDefault()),event.shiftKey||event.target!==tabbableNodes.lastItem||(focusElement(tabbableNodes.firstItem),event.preventDefault())}})),"data-garden-container-id":"containers.focusjail","data-garden-container-version":"1.4.3"},other)},focusElement:focusElement}},FocusJailContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=_objectWithoutPropertiesLoose(_ref,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(useFocusJail(options))))};function useModal(_temp){var _ref=void 0===_temp?{}:_temp,onClose=_ref.onClose,modalRef=_ref.modalRef,_id=_ref.id,focusOnMount=_ref.focusOnMount,restoreFocus=_ref.restoreFocus,environment=_ref.environment,seed=Object(hooks.a)(),idPrefix=Object(react.useState)(_id||seed("modal_storybook"))[0],titleId=idPrefix+"--title",contentId=idPrefix+"--content",closeModal=function(event){onClose&&onClose(event)},getContainerProps=useFocusJail({containerRef:modalRef,focusOnMount:focusOnMount,restoreFocus:restoreFocus,environment:environment}).getContainerProps;return{getBackdropProps:function(_temp2){var _ref2=void 0===_temp2?{}:_temp2,onClick=_ref2.onClick,other=Object(objectWithoutPropertiesLoose.a)(_ref2,["onClick"]);return Object(esm_extends.a)({onClick:Object(index_esm.b)(onClick,(function(event){closeModal(event)})),"data-garden-container-id":"containers.modal","data-garden-container-version":"storybook"},other)},getModalProps:function(props){return getContainerProps((_ref3$role=(_ref3=void 0===(_temp3=props)?{}:_temp3).role,role=void 0===_ref3$role?"dialog":_ref3$role,onClick=_ref3.onClick,onKeyDown=_ref3.onKeyDown,other=Object(objectWithoutPropertiesLoose.a)(_ref3,["role","onClick","onKeyDown"]),Object(esm_extends.a)({role:role,tabIndex:-1,"aria-modal":!0,"aria-labelledby":titleId,"aria-describedby":contentId,onClick:Object(index_esm.b)(onClick,(function(event){event.stopPropagation()})),onKeyDown:Object(index_esm.b)(onKeyDown,(function(event){event.keyCode===index_esm.a.ESCAPE&&closeModal(event)}))},other)));var _temp3,_ref3,_ref3$role,role,onClick,onKeyDown,other},getTitleProps:function(_temp4){var _ref4=void 0===_temp4?{}:_temp4,_ref4$id=_ref4.id,id=void 0===_ref4$id?titleId:_ref4$id,other=Object(objectWithoutPropertiesLoose.a)(_ref4,["id"]);return Object(esm_extends.a)({id:id},other)},getContentProps:function(_temp5){var _ref5=void 0===_temp5?{}:_temp5,_ref5$id=_ref5.id,id=void 0===_ref5$id?contentId:_ref5$id,other=Object(objectWithoutPropertiesLoose.a)(_ref5,["id"]);return Object(esm_extends.a)({id:id},other)},getCloseProps:function(_temp6){var _ref6=void 0===_temp6?{}:_temp6,onClick=_ref6.onClick,other=Object(objectWithoutPropertiesLoose.a)(_ref6,["onClick"]);return Object(esm_extends.a)({"aria-label":"Close modal",onClick:Object(index_esm.b)(onClick,(function(event){closeModal(event)}))},other)},closeModal:closeModal}}FocusJailContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,focusOnMount:prop_types_default.a.bool,environment:prop_types_default.a.any,containerRef:prop_types_default.a.any.isRequired,focusElem:prop_types_default.a.func},FocusJailContainer.__docgenInfo={description:"",methods:[],displayName:"FocusJailContainer",props:{children:{type:{name:"func"},required:!1,description:""},render:{type:{name:"func"},required:!1,description:""},focusOnMount:{type:{name:"bool"},required:!1,description:""},environment:{type:{name:"any"},required:!1,description:""},containerRef:{type:{name:"any"},required:!0,description:""},focusElem:{type:{name:"func"},required:!1,description:""}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/focusjail/dist/index.esm.js"]={name:"FocusJailContainer",docgenInfo:FocusJailContainer.__docgenInfo,path:"packages/focusjail/dist/index.esm.js"});var ModalContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=Object(objectWithoutPropertiesLoose.a)(_ref,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(useModal(options))))};ModalContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,onClose:prop_types_default.a.func,modalRef:prop_types_default.a.any.isRequired,id:prop_types_default.a.string,focusOnMount:prop_types_default.a.bool,environment:prop_types_default.a.any},ModalContainer.__docgenInfo={description:"",methods:[],displayName:"ModalContainer",props:{children:{type:{name:"func"},required:!1,description:"A children render prop function"},render:{type:{name:"func"},required:!1,description:"A render prop function"},onClose:{type:{name:"func"},required:!1,description:"A callback when a close action has been completed"},modalRef:{type:{name:"any"},required:!0,description:"A ref pointing to a DOM element which contains the modal content"},id:{type:{name:"string"},required:!1,description:"An ID that is applied to modal elements"},focusOnMount:{type:{name:"bool"},required:!1,description:"Determines if the modal's focus jail container should focus on mount"},environment:{type:{name:"any"},required:!1,description:"The environment where the focus jail is rendered"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/modal/src/ModalContainer.tsx"]={name:"ModalContainer",docgenInfo:ModalContainer.__docgenInfo,path:"packages/modal/src/ModalContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/modal",__STORY__="\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/modal\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/home/circleci/project/packages/modal\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useState, useRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\\\n\\\\nimport { ModalContainer, useModal } from './src';\\\\n\\\\nexport const Container = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const modalRef = useRef(null);\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\\\n          return (\\\\n            isModalVisible && (\\\\n              <div\\\\n                {...getBackdropProps({\\\\n                  style: {\\\\n                    background: 'rgba(0,0,0,0.2)',\\\\n                    position: 'fixed',\\\\n                    top: '0',\\\\n                    right: '0',\\\\n                    bottom: '0',\\\\n                    left: '0',\\\\n                    display: 'flex',\\\\n                    justifyContent: 'center',\\\\n                    alignItems: 'center'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                <div\\\\n                  {...getModalProps({\\\\n                    ref: modalRef,\\\\n                    style: {\\\\n                      padding: '20px',\\\\n                      background: '#fff',\\\\n                      minWidth: '500px',\\\\n                      minHeight: '400px',\\\\n                      position: 'relative'\\\\n                    }\\\\n                  })}\\\\n                >\\\\n                  <h1 {...getTitleProps()}>Example header</h1>\\\\n                  <section {...getContentProps()}>\\\\n                    <p>Modal contents</p>\\\\n                    <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n                    <button>Submit</button>\\\\n                  </section>\\\\n                  <button\\\\n                    {...(getCloseProps({\\\\n                      'aria-label': 'Schließen Sie Modal',\\\\n                      style: {\\\\n                        position: 'absolute',\\\\n                        top: '20px',\\\\n                        right: '20px',\\\\n                        cursor: 'pointer'\\\\n                      }\\\\n                    }) as any)}\\\\n                  >\\\\n                    X\\\\n                  </button>\\\\n                </div>\\\\n              </div>\\\\n            )\\\\n          );\\\\n        }}\\\\n      </ModalContainer>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const restoreFocus = boolean('restoreFocus', true);\\\\n  const modalRef = useRef(null);\\\\n  const {\\\\n    getBackdropProps,\\\\n    getModalProps,\\\\n    getTitleProps,\\\\n    getContentProps,\\\\n    getCloseProps\\\\n  } = useModal({\\\\n    onClose: () => setModalVisibility(false),\\\\n    modalRef,\\\\n    restoreFocus,\\\\n    environment: window.document\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      {isModalVisible && (\\\\n        <div\\\\n          {...getBackdropProps({\\\\n            style: {\\\\n              background: 'rgba(0,0,0,0.2)',\\\\n              position: 'fixed',\\\\n              top: '0',\\\\n              right: '0',\\\\n              bottom: '0',\\\\n              left: '0',\\\\n              display: 'flex',\\\\n              justifyContent: 'center',\\\\n              alignItems: 'center'\\\\n            }\\\\n          })}\\\\n        >\\\\n          <div\\\\n            {...getModalProps({\\\\n              ref: modalRef,\\\\n              style: {\\\\n                padding: '20px',\\\\n                background: '#fff',\\\\n                minWidth: '500px',\\\\n                minHeight: '400px',\\\\n                position: 'relative'\\\\n              }\\\\n            })}\\\\n          >\\\\n            <h1 {...getTitleProps()}>Example header</h1>\\\\n            <section {...getContentProps()}>\\\\n              <p>Modal contents</p>\\\\n              <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n              <button>Submit</button>\\\\n            </section>\\\\n            <button\\\\n              {...(getCloseProps({\\\\n                'aria-label': 'Schließen Sie Modal',\\\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\\\n              }) as any)}\\\\n            >\\\\n              X\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n      )}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'ModalContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useModal',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useModal\\\\\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Modal Container',\\\\n  decorators: [withKnobs],\\\\n  component: ModalContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useModal.`\\\\n  }\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"modal-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":79},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":79}},\\\"modal-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/modal.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useState, useRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\\\n\\\\nimport { ModalContainer, useModal } from './src';\\\\n\\\\nexport const Container = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const modalRef = useRef(null);\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\\\n          return (\\\\n            isModalVisible && (\\\\n              <div\\\\n                {...getBackdropProps({\\\\n                  style: {\\\\n                    background: 'rgba(0,0,0,0.2)',\\\\n                    position: 'fixed',\\\\n                    top: '0',\\\\n                    right: '0',\\\\n                    bottom: '0',\\\\n                    left: '0',\\\\n                    display: 'flex',\\\\n                    justifyContent: 'center',\\\\n                    alignItems: 'center'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                <div\\\\n                  {...getModalProps({\\\\n                    ref: modalRef,\\\\n                    style: {\\\\n                      padding: '20px',\\\\n                      background: '#fff',\\\\n                      minWidth: '500px',\\\\n                      minHeight: '400px',\\\\n                      position: 'relative'\\\\n                    }\\\\n                  })}\\\\n                >\\\\n                  <h1 {...getTitleProps()}>Example header</h1>\\\\n                  <section {...getContentProps()}>\\\\n                    <p>Modal contents</p>\\\\n                    <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n                    <button>Submit</button>\\\\n                  </section>\\\\n                  <button\\\\n                    {...(getCloseProps({\\\\n                      'aria-label': 'Schließen Sie Modal',\\\\n                      style: {\\\\n                        position: 'absolute',\\\\n                        top: '20px',\\\\n                        right: '20px',\\\\n                        cursor: 'pointer'\\\\n                      }\\\\n                    }) as any)}\\\\n                  >\\\\n                    X\\\\n                  </button>\\\\n                </div>\\\\n              </div>\\\\n            )\\\\n          );\\\\n        }}\\\\n      </ModalContainer>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const restoreFocus = boolean('restoreFocus', true);\\\\n  const modalRef = useRef(null);\\\\n  const {\\\\n    getBackdropProps,\\\\n    getModalProps,\\\\n    getTitleProps,\\\\n    getContentProps,\\\\n    getCloseProps\\\\n  } = useModal({\\\\n    onClose: () => setModalVisibility(false),\\\\n    modalRef,\\\\n    restoreFocus,\\\\n    environment: window.document\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      {isModalVisible && (\\\\n        <div\\\\n          {...getBackdropProps({\\\\n            style: {\\\\n              background: 'rgba(0,0,0,0.2)',\\\\n              position: 'fixed',\\\\n              top: '0',\\\\n              right: '0',\\\\n              bottom: '0',\\\\n              left: '0',\\\\n              display: 'flex',\\\\n              justifyContent: 'center',\\\\n              alignItems: 'center'\\\\n            }\\\\n          })}\\\\n        >\\\\n          <div\\\\n            {...getModalProps({\\\\n              ref: modalRef,\\\\n              style: {\\\\n                padding: '20px',\\\\n                background: '#fff',\\\\n                minWidth: '500px',\\\\n                minHeight: '400px',\\\\n                position: 'relative'\\\\n              }\\\\n            })}\\\\n          >\\\\n            <h1 {...getTitleProps()}>Example header</h1>\\\\n            <section {...getContentProps()}>\\\\n              <p>Modal contents</p>\\\\n              <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n              <button>Submit</button>\\\\n            </section>\\\\n            <button\\\\n              {...(getCloseProps({\\\\n                'aria-label': 'Schließen Sie Modal',\\\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\\\n              }) as any)}\\\\n            >\\\\n              X\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n      )}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'ModalContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useModal',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useModal\\\\\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Modal Container',\\\\n  decorators: [withKnobs],\\\\n  component: ModalContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useModal.`\\\\n  }\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"modal-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":79},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":79}},\\\"modal-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}}},\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  },};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":36},\"endLoc\":{\"col\":139,\"line\":101},\"startBody\":{\"col\":25,\"line\":36},\"endBody\":{\"col\":139,\"line\":101}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":103},\"endLoc\":{\"col\":139,\"line\":170},\"startBody\":{\"col\":20,\"line\":103},\"endBody\":{\"col\":139,\"line\":170}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/modal.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/modal\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":79},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":79}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":81},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":20,\"line\":81},\"endBody\":{\"col\":1,\"line\":148}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/modal.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useState, useRef } from 'react';\n\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\n\nimport { ModalContainer, useModal } from './src';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const modalRef = useRef(null);\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\n          return (\n            isModalVisible && (\n              <div\n                {...getBackdropProps({\n                  style: {\n                    background: 'rgba(0,0,0,0.2)',\n                    position: 'fixed',\n                    top: '0',\n                    right: '0',\n                    bottom: '0',\n                    left: '0',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  }\n                })}\n              >\n                <div\n                  {...getModalProps({\n                    ref: modalRef,\n                    style: {\n                      padding: '20px',\n                      background: '#fff',\n                      minWidth: '500px',\n                      minHeight: '400px',\n                      position: 'relative'\n                    }\n                  })}\n                >\n                  <h1 {...getTitleProps()}>Example header</h1>\n                  <section {...getContentProps()}>\n                    <p>Modal contents</p>\n                    <input placeholder=\"focusable content\" />\n                    <button>Submit</button>\n                  </section>\n                  <button\n                    {...(getCloseProps({\n                      'aria-label': 'Schließen Sie Modal',\n                      style: {\n                        position: 'absolute',\n                        top: '20px',\n                        right: '20px',\n                        cursor: 'pointer'\n                      }\n                    }) as any)}\n                  >\n                    X\n                  </button>\n                </div>\n              </div>\n            )\n          );\n        }}\n      </ModalContainer>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const restoreFocus = boolean('restoreFocus', true);\n  const modalRef = useRef(null);\n  const {\n    getBackdropProps,\n    getModalProps,\n    getTitleProps,\n    getContentProps,\n    getCloseProps\n  } = useModal({\n    onClose: () => setModalVisibility(false),\n    modalRef,\n    restoreFocus,\n    environment: window.document\n  });\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      {isModalVisible && (\n        <div\n          {...getBackdropProps({\n            style: {\n              background: 'rgba(0,0,0,0.2)',\n              position: 'fixed',\n              top: '0',\n              right: '0',\n              bottom: '0',\n              left: '0',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            }\n          })}\n        >\n          <div\n            {...getModalProps({\n              ref: modalRef,\n              style: {\n                padding: '20px',\n                background: '#fff',\n                minWidth: '500px',\n                minHeight: '400px',\n                position: 'relative'\n              }\n            })}\n          >\n            <h1 {...getTitleProps()}>Example header</h1>\n            <section {...getContentProps()}>\n              <p>Modal contents</p>\n              <input placeholder=\"focusable content\" />\n              <button>Submit</button>\n            </section>\n            <button\n              {...(getCloseProps({\n                'aria-label': 'Schließen Sie Modal',\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\n              }) as any)}\n            >\n              X\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'ModalContainer'\n};\n\nHook.story = {\n  name: 'useModal',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useModal\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Modal Container',\n  decorators: [withKnobs],\n  component: ModalContainer,\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/home/circleci/project/packages/modal\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useState, useRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\\\n\\\\nimport { ModalContainer, useModal } from './src';\\\\n\\\\nexport const Container = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const modalRef = useRef(null);\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\\\n          return (\\\\n            isModalVisible && (\\\\n              <div\\\\n                {...getBackdropProps({\\\\n                  style: {\\\\n                    background: 'rgba(0,0,0,0.2)',\\\\n                    position: 'fixed',\\\\n                    top: '0',\\\\n                    right: '0',\\\\n                    bottom: '0',\\\\n                    left: '0',\\\\n                    display: 'flex',\\\\n                    justifyContent: 'center',\\\\n                    alignItems: 'center'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                <div\\\\n                  {...getModalProps({\\\\n                    ref: modalRef,\\\\n                    style: {\\\\n                      padding: '20px',\\\\n                      background: '#fff',\\\\n                      minWidth: '500px',\\\\n                      minHeight: '400px',\\\\n                      position: 'relative'\\\\n                    }\\\\n                  })}\\\\n                >\\\\n                  <h1 {...getTitleProps()}>Example header</h1>\\\\n                  <section {...getContentProps()}>\\\\n                    <p>Modal contents</p>\\\\n                    <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n                    <button>Submit</button>\\\\n                  </section>\\\\n                  <button\\\\n                    {...(getCloseProps({\\\\n                      'aria-label': 'Schließen Sie Modal',\\\\n                      style: {\\\\n                        position: 'absolute',\\\\n                        top: '20px',\\\\n                        right: '20px',\\\\n                        cursor: 'pointer'\\\\n                      }\\\\n                    }) as any)}\\\\n                  >\\\\n                    X\\\\n                  </button>\\\\n                </div>\\\\n              </div>\\\\n            )\\\\n          );\\\\n        }}\\\\n      </ModalContainer>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const restoreFocus = boolean('restoreFocus', true);\\\\n  const modalRef = useRef(null);\\\\n  const {\\\\n    getBackdropProps,\\\\n    getModalProps,\\\\n    getTitleProps,\\\\n    getContentProps,\\\\n    getCloseProps\\\\n  } = useModal({\\\\n    onClose: () => setModalVisibility(false),\\\\n    modalRef,\\\\n    restoreFocus,\\\\n    environment: window.document\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      {isModalVisible && (\\\\n        <div\\\\n          {...getBackdropProps({\\\\n            style: {\\\\n              background: 'rgba(0,0,0,0.2)',\\\\n              position: 'fixed',\\\\n              top: '0',\\\\n              right: '0',\\\\n              bottom: '0',\\\\n              left: '0',\\\\n              display: 'flex',\\\\n              justifyContent: 'center',\\\\n              alignItems: 'center'\\\\n            }\\\\n          })}\\\\n        >\\\\n          <div\\\\n            {...getModalProps({\\\\n              ref: modalRef,\\\\n              style: {\\\\n                padding: '20px',\\\\n                background: '#fff',\\\\n                minWidth: '500px',\\\\n                minHeight: '400px',\\\\n                position: 'relative'\\\\n              }\\\\n            })}\\\\n          >\\\\n            <h1 {...getTitleProps()}>Example header</h1>\\\\n            <section {...getContentProps()}>\\\\n              <p>Modal contents</p>\\\\n              <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n              <button>Submit</button>\\\\n            </section>\\\\n            <button\\\\n              {...(getCloseProps({\\\\n                'aria-label': 'Schließen Sie Modal',\\\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\\\n              }) as any)}\\\\n            >\\\\n              X\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n      )}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'ModalContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useModal',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useModal\\\\\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Modal Container',\\\\n  decorators: [withKnobs],\\\\n  component: ModalContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useModal.`\\\\n  }\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"modal-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":79},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":79}},\\\"modal-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/modal.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useState, useRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\\\n\\\\nimport { ModalContainer, useModal } from './src';\\\\n\\\\nexport const Container = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const modalRef = useRef(null);\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\\\n          return (\\\\n            isModalVisible && (\\\\n              <div\\\\n                {...getBackdropProps({\\\\n                  style: {\\\\n                    background: 'rgba(0,0,0,0.2)',\\\\n                    position: 'fixed',\\\\n                    top: '0',\\\\n                    right: '0',\\\\n                    bottom: '0',\\\\n                    left: '0',\\\\n                    display: 'flex',\\\\n                    justifyContent: 'center',\\\\n                    alignItems: 'center'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                <div\\\\n                  {...getModalProps({\\\\n                    ref: modalRef,\\\\n                    style: {\\\\n                      padding: '20px',\\\\n                      background: '#fff',\\\\n                      minWidth: '500px',\\\\n                      minHeight: '400px',\\\\n                      position: 'relative'\\\\n                    }\\\\n                  })}\\\\n                >\\\\n                  <h1 {...getTitleProps()}>Example header</h1>\\\\n                  <section {...getContentProps()}>\\\\n                    <p>Modal contents</p>\\\\n                    <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n                    <button>Submit</button>\\\\n                  </section>\\\\n                  <button\\\\n                    {...(getCloseProps({\\\\n                      'aria-label': 'Schließen Sie Modal',\\\\n                      style: {\\\\n                        position: 'absolute',\\\\n                        top: '20px',\\\\n                        right: '20px',\\\\n                        cursor: 'pointer'\\\\n                      }\\\\n                    }) as any)}\\\\n                  >\\\\n                    X\\\\n                  </button>\\\\n                </div>\\\\n              </div>\\\\n            )\\\\n          );\\\\n        }}\\\\n      </ModalContainer>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const restoreFocus = boolean('restoreFocus', true);\\\\n  const modalRef = useRef(null);\\\\n  const {\\\\n    getBackdropProps,\\\\n    getModalProps,\\\\n    getTitleProps,\\\\n    getContentProps,\\\\n    getCloseProps\\\\n  } = useModal({\\\\n    onClose: () => setModalVisibility(false),\\\\n    modalRef,\\\\n    restoreFocus,\\\\n    environment: window.document\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      {isModalVisible && (\\\\n        <div\\\\n          {...getBackdropProps({\\\\n            style: {\\\\n              background: 'rgba(0,0,0,0.2)',\\\\n              position: 'fixed',\\\\n              top: '0',\\\\n              right: '0',\\\\n              bottom: '0',\\\\n              left: '0',\\\\n              display: 'flex',\\\\n              justifyContent: 'center',\\\\n              alignItems: 'center'\\\\n            }\\\\n          })}\\\\n        >\\\\n          <div\\\\n            {...getModalProps({\\\\n              ref: modalRef,\\\\n              style: {\\\\n                padding: '20px',\\\\n                background: '#fff',\\\\n                minWidth: '500px',\\\\n                minHeight: '400px',\\\\n                position: 'relative'\\\\n              }\\\\n            })}\\\\n          >\\\\n            <h1 {...getTitleProps()}>Example header</h1>\\\\n            <section {...getContentProps()}>\\\\n              <p>Modal contents</p>\\\\n              <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n              <button>Submit</button>\\\\n            </section>\\\\n            <button\\\\n              {...(getCloseProps({\\\\n                'aria-label': 'Schließen Sie Modal',\\\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\\\n              }) as any)}\\\\n            >\\\\n              X\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n      )}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'ModalContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useModal',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useModal\\\\\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Modal Container',\\\\n  decorators: [withKnobs],\\\\n  component: ModalContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useModal.`\\\\n  }\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"modal-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":79},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":79}},\\\"modal-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}}},\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  },};\\n\",\"locationsMap\":{\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":36},\"endLoc\":{\"col\":139,\"line\":101},\"startBody\":{\"col\":25,\"line\":36},\"endBody\":{\"col\":139,\"line\":101}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":103},\"endLoc\":{\"col\":139,\"line\":170},\"startBody\":{\"col\":20,\"line\":103},\"endBody\":{\"col\":139,\"line\":170}}}},\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  }\\n};\\n\",\"locationsMap\":{\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":79},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":79}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":81},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":20,\"line\":81},\"endBody\":{\"col\":1,\"line\":148}}}},\n    componentSubtitle: `A container component which wraps the useModal.`\n  },};\n",__ADDS_MAP__={"modal-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:123},startBody:{col:25,line:58},endBody:{col:277,line:123}},"modal-container--hook":{startLoc:{col:20,line:125},endLoc:{col:277,line:192},startBody:{col:20,line:125},endBody:{col:277,line:192}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},Container=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/modal",__STORY__="\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/modal\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":79},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":79}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":81},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":20,\"line\":81},\"endBody\":{\"col\":1,\"line\":148}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/modal.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useState, useRef } from 'react';\n\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\n\nimport { ModalContainer, useModal } from './src';\n\nexport const Container = addSourceDecorator(() => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const modalRef = useRef(null);\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\n          return (\n            isModalVisible && (\n              <div\n                {...getBackdropProps({\n                  style: {\n                    background: 'rgba(0,0,0,0.2)',\n                    position: 'fixed',\n                    top: '0',\n                    right: '0',\n                    bottom: '0',\n                    left: '0',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  }\n                })}\n              >\n                <div\n                  {...getModalProps({\n                    ref: modalRef,\n                    style: {\n                      padding: '20px',\n                      background: '#fff',\n                      minWidth: '500px',\n                      minHeight: '400px',\n                      position: 'relative'\n                    }\n                  })}\n                >\n                  <h1 {...getTitleProps()}>Example header</h1>\n                  <section {...getContentProps()}>\n                    <p>Modal contents</p>\n                    <input placeholder=\"focusable content\" />\n                    <button>Submit</button>\n                  </section>\n                  <button\n                    {...(getCloseProps({\n                      'aria-label': 'Schließen Sie Modal',\n                      style: {\n                        position: 'absolute',\n                        top: '20px',\n                        right: '20px',\n                        cursor: 'pointer'\n                      }\n                    }) as any)}\n                  >\n                    X\n                  </button>\n                </div>\n              </div>\n            )\n          );\n        }}\n      </ModalContainer>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const restoreFocus = boolean('restoreFocus', true);\n  const modalRef = useRef(null);\n  const {\n    getBackdropProps,\n    getModalProps,\n    getTitleProps,\n    getContentProps,\n    getCloseProps\n  } = useModal({\n    onClose: () => setModalVisibility(false),\n    modalRef,\n    restoreFocus,\n    environment: window.document\n  });\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      {isModalVisible && (\n        <div\n          {...getBackdropProps({\n            style: {\n              background: 'rgba(0,0,0,0.2)',\n              position: 'fixed',\n              top: '0',\n              right: '0',\n              bottom: '0',\n              left: '0',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            }\n          })}\n        >\n          <div\n            {...getModalProps({\n              ref: modalRef,\n              style: {\n                padding: '20px',\n                background: '#fff',\n                minWidth: '500px',\n                minHeight: '400px',\n                position: 'relative'\n              }\n            })}\n          >\n            <h1 {...getTitleProps()}>Example header</h1>\n            <section {...getContentProps()}>\n              <p>Modal contents</p>\n              <input placeholder=\"focusable content\" />\n              <button>Submit</button>\n            </section>\n            <button\n              {...(getCloseProps({\n                'aria-label': 'Schließen Sie Modal',\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\n              }) as any)}\n            >\n              X\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'ModalContainer'\n};\n\nHook.story = {\n  name: 'useModal',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useModal\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Modal Container',\n  decorators: [withKnobs],\n  component: ModalContainer,\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  }\\n};\\n\",\"locationsMap\":{\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":79},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":79}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":81},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":20,\"line\":81},\"endBody\":{\"col\":1,\"line\":148}}}},\n    componentSubtitle: `A container component which wraps the useModal.`\n  },};\n",__ADDS_MAP__={"modal-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:101},startBody:{col:25,line:36},endBody:{col:139,line:101}},"modal-container--hook":{startLoc:{col:20,line:103},endLoc:{col:139,line:170},startBody:{col:20,line:103},endBody:{col:139,line:170}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(2).withSource,(addSourceDecorator=__webpack_require__(2).addSource)(addSourceDecorator(addSourceDecorator((function(){var _useState=Object(react.useState)(!1),isModalVisible=_useState[0],setModalVisibility=_useState[1],modalRef=Object(react.useRef)(null);return(react_default.a.createElement("div",{style:{height:"60vh",display:"flex",alignItems:"center"}},react_default.a.createElement("button",{onClick:function(){return setModalVisibility(!isModalVisible)}},"Open Modal"),react_default.a.createElement(ModalContainer,{modalRef:modalRef,onClose:function(){return setModalVisibility(!1)}},(function(_ref){var getBackdropProps=_ref.getBackdropProps,getModalProps=_ref.getModalProps,getTitleProps=_ref.getTitleProps,getContentProps=_ref.getContentProps,getCloseProps=_ref.getCloseProps;return isModalVisible&&react_default.a.createElement("div",getBackdropProps({style:{background:"rgba(0,0,0,0.2)",position:"fixed",top:"0",right:"0",bottom:"0",left:"0",display:"flex",justifyContent:"center",alignItems:"center"}}),react_default.a.createElement("div",getModalProps({ref:modalRef,style:{padding:"20px",background:"#fff",minWidth:"500px",minHeight:"400px",position:"relative"}}),react_default.a.createElement("h1",getTitleProps(),"Example header"),react_default.a.createElement("section",getContentProps(),react_default.a.createElement("p",null,"Modal contents"),react_default.a.createElement("input",{placeholder:"focusable content"}),react_default.a.createElement("button",null,"Submit")),react_default.a.createElement("button",getCloseProps({"aria-label":"Schließen Sie Modal",style:{position:"absolute",top:"20px",right:"20px",cursor:"pointer"}}),"X")))}))))}),{__STORY__:__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useState, useRef } from 'react';\n\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\n\nimport { ModalContainer, useModal } from './src';\n\nexport const Container = () => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const modalRef = useRef(null);\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\n          return (\n            isModalVisible && (\n              <div\n                {...getBackdropProps({\n                  style: {\n                    background: 'rgba(0,0,0,0.2)',\n                    position: 'fixed',\n                    top: '0',\n                    right: '0',\n                    bottom: '0',\n                    left: '0',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  }\n                })}\n              >\n                <div\n                  {...getModalProps({\n                    ref: modalRef,\n                    style: {\n                      padding: '20px',\n                      background: '#fff',\n                      minWidth: '500px',\n                      minHeight: '400px',\n                      position: 'relative'\n                    }\n                  })}\n                >\n                  <h1 {...getTitleProps()}>Example header</h1>\n                  <section {...getContentProps()}>\n                    <p>Modal contents</p>\n                    <input placeholder=\"focusable content\" />\n                    <button>Submit</button>\n                  </section>\n                  <button\n                    {...(getCloseProps({\n                      'aria-label': 'Schließen Sie Modal',\n                      style: {\n                        position: 'absolute',\n                        top: '20px',\n                        right: '20px',\n                        cursor: 'pointer'\n                      }\n                    }) as any)}\n                  >\n                    X\n                  </button>\n                </div>\n              </div>\n            )\n          );\n        }}\n      </ModalContainer>\n    </div>\n  );\n};\n\nexport const Hook = () => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const restoreFocus = boolean('restoreFocus', true);\n  const modalRef = useRef(null);\n  const {\n    getBackdropProps,\n    getModalProps,\n    getTitleProps,\n    getContentProps,\n    getCloseProps\n  } = useModal({\n    onClose: () => setModalVisibility(false),\n    modalRef,\n    restoreFocus,\n    environment: window.document\n  });\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      {isModalVisible && (\n        <div\n          {...getBackdropProps({\n            style: {\n              background: 'rgba(0,0,0,0.2)',\n              position: 'fixed',\n              top: '0',\n              right: '0',\n              bottom: '0',\n              left: '0',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            }\n          })}\n        >\n          <div\n            {...getModalProps({\n              ref: modalRef,\n              style: {\n                padding: '20px',\n                background: '#fff',\n                minWidth: '500px',\n                minHeight: '400px',\n                position: 'relative'\n              }\n            })}\n          >\n            <h1 {...getTitleProps()}>Example header</h1>\n            <section {...getContentProps()}>\n              <p>Modal contents</p>\n              <input placeholder=\"focusable content\" />\n              <button>Submit</button>\n            </section>\n            <button\n              {...(getCloseProps({\n                'aria-label': 'Schließen Sie Modal',\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\n              }) as any)}\n            >\n              X\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nContainer.story = {\n  name: 'ModalContainer'\n};\n\nHook.story = {\n  name: 'useModal',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useModal\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Modal Container',\n  decorators: [withKnobs],\n  component: ModalContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useModal.`\n  }\n};\n",__ADDS_MAP__:__ADDS_MAP__={"modal-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:79},startBody:{col:25,line:14},endBody:{col:1,line:79}},"modal-container--hook":{startLoc:{col:20,line:81},endLoc:{col:1,line:148},startBody:{col:20,line:81},endBody:{col:1,line:148}}},__MAIN_FILE_LOCATION__:"/modal.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/home/circleci/project/packages/modal",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/modal.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/modal.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var _useState2=Object(react.useState)(!1),isModalVisible=_useState2[0],setModalVisibility=_useState2[1],restoreFocus=Object(dist.boolean)("restoreFocus",!0),modalRef=Object(react.useRef)(null),_useModal=useModal({onClose:function(){return setModalVisibility(!1)},modalRef:modalRef,restoreFocus:restoreFocus,environment:window.document}),getBackdropProps=_useModal.getBackdropProps,getModalProps=_useModal.getModalProps,getTitleProps=_useModal.getTitleProps,getContentProps=_useModal.getContentProps,getCloseProps=_useModal.getCloseProps;return(react_default.a.createElement("div",{style:{height:"60vh",display:"flex",alignItems:"center"}},react_default.a.createElement("button",{onClick:function(){return setModalVisibility(!isModalVisible)}},"Open Modal"),isModalVisible&&react_default.a.createElement("div",getBackdropProps({style:{background:"rgba(0,0,0,0.2)",position:"fixed",top:"0",right:"0",bottom:"0",left:"0",display:"flex",justifyContent:"center",alignItems:"center"}}),react_default.a.createElement("div",getModalProps({ref:modalRef,style:{padding:"20px",background:"#fff",minWidth:"500px",minHeight:"400px",position:"relative"}}),react_default.a.createElement("h1",getTitleProps(),"Example header"),react_default.a.createElement("section",getContentProps(),react_default.a.createElement("p",null,"Modal contents"),react_default.a.createElement("input",{placeholder:"focusable content"}),react_default.a.createElement("button",null,"Submit")),react_default.a.createElement("button",getCloseProps({"aria-label":"Schließen Sie Modal",style:{position:"absolute",top:"20px",right:"20px",cursor:"pointer"}}),"X")))))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/modal.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/modal.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/modal.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"ModalContainer"},Hook.story={name:"useModal",parameters:{docs:{storyDescription:"The `useModal` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component."}}};__webpack_exports__.default={title:"Modal Container",decorators:[dist.withKnobs],component:ModalContainer,parameters:(_parameters={storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/modal\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/home/circleci/project/packages/modal\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useState, useRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\\\n\\\\nimport { ModalContainer, useModal } from './src';\\\\n\\\\nexport const Container = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const modalRef = useRef(null);\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\\\n          return (\\\\n            isModalVisible && (\\\\n              <div\\\\n                {...getBackdropProps({\\\\n                  style: {\\\\n                    background: 'rgba(0,0,0,0.2)',\\\\n                    position: 'fixed',\\\\n                    top: '0',\\\\n                    right: '0',\\\\n                    bottom: '0',\\\\n                    left: '0',\\\\n                    display: 'flex',\\\\n                    justifyContent: 'center',\\\\n                    alignItems: 'center'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                <div\\\\n                  {...getModalProps({\\\\n                    ref: modalRef,\\\\n                    style: {\\\\n                      padding: '20px',\\\\n                      background: '#fff',\\\\n                      minWidth: '500px',\\\\n                      minHeight: '400px',\\\\n                      position: 'relative'\\\\n                    }\\\\n                  })}\\\\n                >\\\\n                  <h1 {...getTitleProps()}>Example header</h1>\\\\n                  <section {...getContentProps()}>\\\\n                    <p>Modal contents</p>\\\\n                    <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n                    <button>Submit</button>\\\\n                  </section>\\\\n                  <button\\\\n                    {...(getCloseProps({\\\\n                      'aria-label': 'Schließen Sie Modal',\\\\n                      style: {\\\\n                        position: 'absolute',\\\\n                        top: '20px',\\\\n                        right: '20px',\\\\n                        cursor: 'pointer'\\\\n                      }\\\\n                    }) as any)}\\\\n                  >\\\\n                    X\\\\n                  </button>\\\\n                </div>\\\\n              </div>\\\\n            )\\\\n          );\\\\n        }}\\\\n      </ModalContainer>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const restoreFocus = boolean('restoreFocus', true);\\\\n  const modalRef = useRef(null);\\\\n  const {\\\\n    getBackdropProps,\\\\n    getModalProps,\\\\n    getTitleProps,\\\\n    getContentProps,\\\\n    getCloseProps\\\\n  } = useModal({\\\\n    onClose: () => setModalVisibility(false),\\\\n    modalRef,\\\\n    restoreFocus,\\\\n    environment: window.document\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      {isModalVisible && (\\\\n        <div\\\\n          {...getBackdropProps({\\\\n            style: {\\\\n              background: 'rgba(0,0,0,0.2)',\\\\n              position: 'fixed',\\\\n              top: '0',\\\\n              right: '0',\\\\n              bottom: '0',\\\\n              left: '0',\\\\n              display: 'flex',\\\\n              justifyContent: 'center',\\\\n              alignItems: 'center'\\\\n            }\\\\n          })}\\\\n        >\\\\n          <div\\\\n            {...getModalProps({\\\\n              ref: modalRef,\\\\n              style: {\\\\n                padding: '20px',\\\\n                background: '#fff',\\\\n                minWidth: '500px',\\\\n                minHeight: '400px',\\\\n                position: 'relative'\\\\n              }\\\\n            })}\\\\n          >\\\\n            <h1 {...getTitleProps()}>Example header</h1>\\\\n            <section {...getContentProps()}>\\\\n              <p>Modal contents</p>\\\\n              <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n              <button>Submit</button>\\\\n            </section>\\\\n            <button\\\\n              {...(getCloseProps({\\\\n                'aria-label': 'Schließen Sie Modal',\\\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\\\n              }) as any)}\\\\n            >\\\\n              X\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n      )}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'ModalContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useModal',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useModal\\\\\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Modal Container',\\\\n  decorators: [withKnobs],\\\\n  component: ModalContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useModal.`\\\\n  }\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"modal-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":79},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":79}},\\\"modal-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/modal.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useState, useRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\\\n\\\\nimport { ModalContainer, useModal } from './src';\\\\n\\\\nexport const Container = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const modalRef = useRef(null);\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\\\n          return (\\\\n            isModalVisible && (\\\\n              <div\\\\n                {...getBackdropProps({\\\\n                  style: {\\\\n                    background: 'rgba(0,0,0,0.2)',\\\\n                    position: 'fixed',\\\\n                    top: '0',\\\\n                    right: '0',\\\\n                    bottom: '0',\\\\n                    left: '0',\\\\n                    display: 'flex',\\\\n                    justifyContent: 'center',\\\\n                    alignItems: 'center'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                <div\\\\n                  {...getModalProps({\\\\n                    ref: modalRef,\\\\n                    style: {\\\\n                      padding: '20px',\\\\n                      background: '#fff',\\\\n                      minWidth: '500px',\\\\n                      minHeight: '400px',\\\\n                      position: 'relative'\\\\n                    }\\\\n                  })}\\\\n                >\\\\n                  <h1 {...getTitleProps()}>Example header</h1>\\\\n                  <section {...getContentProps()}>\\\\n                    <p>Modal contents</p>\\\\n                    <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n                    <button>Submit</button>\\\\n                  </section>\\\\n                  <button\\\\n                    {...(getCloseProps({\\\\n                      'aria-label': 'Schließen Sie Modal',\\\\n                      style: {\\\\n                        position: 'absolute',\\\\n                        top: '20px',\\\\n                        right: '20px',\\\\n                        cursor: 'pointer'\\\\n                      }\\\\n                    }) as any)}\\\\n                  >\\\\n                    X\\\\n                  </button>\\\\n                </div>\\\\n              </div>\\\\n            )\\\\n          );\\\\n        }}\\\\n      </ModalContainer>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const restoreFocus = boolean('restoreFocus', true);\\\\n  const modalRef = useRef(null);\\\\n  const {\\\\n    getBackdropProps,\\\\n    getModalProps,\\\\n    getTitleProps,\\\\n    getContentProps,\\\\n    getCloseProps\\\\n  } = useModal({\\\\n    onClose: () => setModalVisibility(false),\\\\n    modalRef,\\\\n    restoreFocus,\\\\n    environment: window.document\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      {isModalVisible && (\\\\n        <div\\\\n          {...getBackdropProps({\\\\n            style: {\\\\n              background: 'rgba(0,0,0,0.2)',\\\\n              position: 'fixed',\\\\n              top: '0',\\\\n              right: '0',\\\\n              bottom: '0',\\\\n              left: '0',\\\\n              display: 'flex',\\\\n              justifyContent: 'center',\\\\n              alignItems: 'center'\\\\n            }\\\\n          })}\\\\n        >\\\\n          <div\\\\n            {...getModalProps({\\\\n              ref: modalRef,\\\\n              style: {\\\\n                padding: '20px',\\\\n                background: '#fff',\\\\n                minWidth: '500px',\\\\n                minHeight: '400px',\\\\n                position: 'relative'\\\\n              }\\\\n            })}\\\\n          >\\\\n            <h1 {...getTitleProps()}>Example header</h1>\\\\n            <section {...getContentProps()}>\\\\n              <p>Modal contents</p>\\\\n              <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n              <button>Submit</button>\\\\n            </section>\\\\n            <button\\\\n              {...(getCloseProps({\\\\n                'aria-label': 'Schließen Sie Modal',\\\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\\\n              }) as any)}\\\\n            >\\\\n              X\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n      )}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'ModalContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useModal',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useModal\\\\\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Modal Container',\\\\n  decorators: [withKnobs],\\\\n  component: ModalContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useModal.`\\\\n  }\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"modal-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":79},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":79}},\\\"modal-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}}},\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  },};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":36},\"endLoc\":{\"col\":139,\"line\":101},\"startBody\":{\"col\":25,\"line\":36},\"endBody\":{\"col\":139,\"line\":101}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":103},\"endLoc\":{\"col\":139,\"line\":170},\"startBody\":{\"col\":20,\"line\":103},\"endBody\":{\"col\":139,\"line\":170}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/modal.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/modal\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":79},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":79}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":81},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":20,\"line\":81},\"endBody\":{\"col\":1,\"line\":148}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/modal.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useState, useRef } from 'react';\n\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\n\nimport { ModalContainer, useModal } from './src';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const modalRef = useRef(null);\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\n          return (\n            isModalVisible && (\n              <div\n                {...getBackdropProps({\n                  style: {\n                    background: 'rgba(0,0,0,0.2)',\n                    position: 'fixed',\n                    top: '0',\n                    right: '0',\n                    bottom: '0',\n                    left: '0',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  }\n                })}\n              >\n                <div\n                  {...getModalProps({\n                    ref: modalRef,\n                    style: {\n                      padding: '20px',\n                      background: '#fff',\n                      minWidth: '500px',\n                      minHeight: '400px',\n                      position: 'relative'\n                    }\n                  })}\n                >\n                  <h1 {...getTitleProps()}>Example header</h1>\n                  <section {...getContentProps()}>\n                    <p>Modal contents</p>\n                    <input placeholder=\"focusable content\" />\n                    <button>Submit</button>\n                  </section>\n                  <button\n                    {...(getCloseProps({\n                      'aria-label': 'Schließen Sie Modal',\n                      style: {\n                        position: 'absolute',\n                        top: '20px',\n                        right: '20px',\n                        cursor: 'pointer'\n                      }\n                    }) as any)}\n                  >\n                    X\n                  </button>\n                </div>\n              </div>\n            )\n          );\n        }}\n      </ModalContainer>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const restoreFocus = boolean('restoreFocus', true);\n  const modalRef = useRef(null);\n  const {\n    getBackdropProps,\n    getModalProps,\n    getTitleProps,\n    getContentProps,\n    getCloseProps\n  } = useModal({\n    onClose: () => setModalVisibility(false),\n    modalRef,\n    restoreFocus,\n    environment: window.document\n  });\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      {isModalVisible && (\n        <div\n          {...getBackdropProps({\n            style: {\n              background: 'rgba(0,0,0,0.2)',\n              position: 'fixed',\n              top: '0',\n              right: '0',\n              bottom: '0',\n              left: '0',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            }\n          })}\n        >\n          <div\n            {...getModalProps({\n              ref: modalRef,\n              style: {\n                padding: '20px',\n                background: '#fff',\n                minWidth: '500px',\n                minHeight: '400px',\n                position: 'relative'\n              }\n            })}\n          >\n            <h1 {...getTitleProps()}>Example header</h1>\n            <section {...getContentProps()}>\n              <p>Modal contents</p>\n              <input placeholder=\"focusable content\" />\n              <button>Submit</button>\n            </section>\n            <button\n              {...(getCloseProps({\n                'aria-label': 'Schließen Sie Modal',\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\n              }) as any)}\n            >\n              X\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'ModalContainer'\n};\n\nHook.story = {\n  name: 'useModal',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useModal\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Modal Container',\n  decorators: [withKnobs],\n  component: ModalContainer,\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/home/circleci/project/packages/modal\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useState, useRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\\\n\\\\nimport { ModalContainer, useModal } from './src';\\\\n\\\\nexport const Container = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const modalRef = useRef(null);\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\\\n          return (\\\\n            isModalVisible && (\\\\n              <div\\\\n                {...getBackdropProps({\\\\n                  style: {\\\\n                    background: 'rgba(0,0,0,0.2)',\\\\n                    position: 'fixed',\\\\n                    top: '0',\\\\n                    right: '0',\\\\n                    bottom: '0',\\\\n                    left: '0',\\\\n                    display: 'flex',\\\\n                    justifyContent: 'center',\\\\n                    alignItems: 'center'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                <div\\\\n                  {...getModalProps({\\\\n                    ref: modalRef,\\\\n                    style: {\\\\n                      padding: '20px',\\\\n                      background: '#fff',\\\\n                      minWidth: '500px',\\\\n                      minHeight: '400px',\\\\n                      position: 'relative'\\\\n                    }\\\\n                  })}\\\\n                >\\\\n                  <h1 {...getTitleProps()}>Example header</h1>\\\\n                  <section {...getContentProps()}>\\\\n                    <p>Modal contents</p>\\\\n                    <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n                    <button>Submit</button>\\\\n                  </section>\\\\n                  <button\\\\n                    {...(getCloseProps({\\\\n                      'aria-label': 'Schließen Sie Modal',\\\\n                      style: {\\\\n                        position: 'absolute',\\\\n                        top: '20px',\\\\n                        right: '20px',\\\\n                        cursor: 'pointer'\\\\n                      }\\\\n                    }) as any)}\\\\n                  >\\\\n                    X\\\\n                  </button>\\\\n                </div>\\\\n              </div>\\\\n            )\\\\n          );\\\\n        }}\\\\n      </ModalContainer>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const restoreFocus = boolean('restoreFocus', true);\\\\n  const modalRef = useRef(null);\\\\n  const {\\\\n    getBackdropProps,\\\\n    getModalProps,\\\\n    getTitleProps,\\\\n    getContentProps,\\\\n    getCloseProps\\\\n  } = useModal({\\\\n    onClose: () => setModalVisibility(false),\\\\n    modalRef,\\\\n    restoreFocus,\\\\n    environment: window.document\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      {isModalVisible && (\\\\n        <div\\\\n          {...getBackdropProps({\\\\n            style: {\\\\n              background: 'rgba(0,0,0,0.2)',\\\\n              position: 'fixed',\\\\n              top: '0',\\\\n              right: '0',\\\\n              bottom: '0',\\\\n              left: '0',\\\\n              display: 'flex',\\\\n              justifyContent: 'center',\\\\n              alignItems: 'center'\\\\n            }\\\\n          })}\\\\n        >\\\\n          <div\\\\n            {...getModalProps({\\\\n              ref: modalRef,\\\\n              style: {\\\\n                padding: '20px',\\\\n                background: '#fff',\\\\n                minWidth: '500px',\\\\n                minHeight: '400px',\\\\n                position: 'relative'\\\\n              }\\\\n            })}\\\\n          >\\\\n            <h1 {...getTitleProps()}>Example header</h1>\\\\n            <section {...getContentProps()}>\\\\n              <p>Modal contents</p>\\\\n              <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n              <button>Submit</button>\\\\n            </section>\\\\n            <button\\\\n              {...(getCloseProps({\\\\n                'aria-label': 'Schließen Sie Modal',\\\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\\\n              }) as any)}\\\\n            >\\\\n              X\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n      )}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'ModalContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useModal',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useModal\\\\\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Modal Container',\\\\n  decorators: [withKnobs],\\\\n  component: ModalContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useModal.`\\\\n  }\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"modal-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":79},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":79}},\\\"modal-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/modal.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useState, useRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\\\n\\\\nimport { ModalContainer, useModal } from './src';\\\\n\\\\nexport const Container = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const modalRef = useRef(null);\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\\\n          return (\\\\n            isModalVisible && (\\\\n              <div\\\\n                {...getBackdropProps({\\\\n                  style: {\\\\n                    background: 'rgba(0,0,0,0.2)',\\\\n                    position: 'fixed',\\\\n                    top: '0',\\\\n                    right: '0',\\\\n                    bottom: '0',\\\\n                    left: '0',\\\\n                    display: 'flex',\\\\n                    justifyContent: 'center',\\\\n                    alignItems: 'center'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                <div\\\\n                  {...getModalProps({\\\\n                    ref: modalRef,\\\\n                    style: {\\\\n                      padding: '20px',\\\\n                      background: '#fff',\\\\n                      minWidth: '500px',\\\\n                      minHeight: '400px',\\\\n                      position: 'relative'\\\\n                    }\\\\n                  })}\\\\n                >\\\\n                  <h1 {...getTitleProps()}>Example header</h1>\\\\n                  <section {...getContentProps()}>\\\\n                    <p>Modal contents</p>\\\\n                    <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n                    <button>Submit</button>\\\\n                  </section>\\\\n                  <button\\\\n                    {...(getCloseProps({\\\\n                      'aria-label': 'Schließen Sie Modal',\\\\n                      style: {\\\\n                        position: 'absolute',\\\\n                        top: '20px',\\\\n                        right: '20px',\\\\n                        cursor: 'pointer'\\\\n                      }\\\\n                    }) as any)}\\\\n                  >\\\\n                    X\\\\n                  </button>\\\\n                </div>\\\\n              </div>\\\\n            )\\\\n          );\\\\n        }}\\\\n      </ModalContainer>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const [isModalVisible, setModalVisibility] = useState(false);\\\\n  const restoreFocus = boolean('restoreFocus', true);\\\\n  const modalRef = useRef(null);\\\\n  const {\\\\n    getBackdropProps,\\\\n    getModalProps,\\\\n    getTitleProps,\\\\n    getContentProps,\\\\n    getCloseProps\\\\n  } = useModal({\\\\n    onClose: () => setModalVisibility(false),\\\\n    modalRef,\\\\n    restoreFocus,\\\\n    environment: window.document\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\\\n      {isModalVisible && (\\\\n        <div\\\\n          {...getBackdropProps({\\\\n            style: {\\\\n              background: 'rgba(0,0,0,0.2)',\\\\n              position: 'fixed',\\\\n              top: '0',\\\\n              right: '0',\\\\n              bottom: '0',\\\\n              left: '0',\\\\n              display: 'flex',\\\\n              justifyContent: 'center',\\\\n              alignItems: 'center'\\\\n            }\\\\n          })}\\\\n        >\\\\n          <div\\\\n            {...getModalProps({\\\\n              ref: modalRef,\\\\n              style: {\\\\n                padding: '20px',\\\\n                background: '#fff',\\\\n                minWidth: '500px',\\\\n                minHeight: '400px',\\\\n                position: 'relative'\\\\n              }\\\\n            })}\\\\n          >\\\\n            <h1 {...getTitleProps()}>Example header</h1>\\\\n            <section {...getContentProps()}>\\\\n              <p>Modal contents</p>\\\\n              <input placeholder=\\\\\\\"focusable content\\\\\\\" />\\\\n              <button>Submit</button>\\\\n            </section>\\\\n            <button\\\\n              {...(getCloseProps({\\\\n                'aria-label': 'Schließen Sie Modal',\\\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\\\n              }) as any)}\\\\n            >\\\\n              X\\\\n            </button>\\\\n          </div>\\\\n        </div>\\\\n      )}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'ModalContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useModal',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useModal\\\\\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Modal Container',\\\\n  decorators: [withKnobs],\\\\n  component: ModalContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useModal.`\\\\n  }\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"modal-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":79},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":14},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":79}},\\\"modal-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":81},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}}},\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  },};\\n\",\"locationsMap\":{\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":36},\"endLoc\":{\"col\":139,\"line\":101},\"startBody\":{\"col\":25,\"line\":36},\"endBody\":{\"col\":139,\"line\":101}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":103},\"endLoc\":{\"col\":139,\"line\":170},\"startBody\":{\"col\":20,\"line\":103},\"endBody\":{\"col\":139,\"line\":170}}}},\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  }\\n};\\n\",\"locationsMap\":{\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":79},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":79}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":81},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":20,\"line\":81},\"endBody\":{\"col\":1,\"line\":148}}}},\n    componentSubtitle: `A container component which wraps the useModal.`\n  },};\n",locationsMap:{"modal-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:123},startBody:{col:25,line:58},endBody:{col:277,line:123}},"modal-container--hook":{startLoc:{col:20,line:125},endLoc:{col:277,line:192},startBody:{col:20,line:125},endBody:{col:277,line:192}}}}},_parameters.storySource={source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/modal\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":79},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":79}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":81},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":20,\"line\":81},\"endBody\":{\"col\":1,\"line\":148}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/modal.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useState, useRef } from 'react';\n\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\n\nimport { ModalContainer, useModal } from './src';\n\nexport const Container = addSourceDecorator(() => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const modalRef = useRef(null);\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\n          return (\n            isModalVisible && (\n              <div\n                {...getBackdropProps({\n                  style: {\n                    background: 'rgba(0,0,0,0.2)',\n                    position: 'fixed',\n                    top: '0',\n                    right: '0',\n                    bottom: '0',\n                    left: '0',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  }\n                })}\n              >\n                <div\n                  {...getModalProps({\n                    ref: modalRef,\n                    style: {\n                      padding: '20px',\n                      background: '#fff',\n                      minWidth: '500px',\n                      minHeight: '400px',\n                      position: 'relative'\n                    }\n                  })}\n                >\n                  <h1 {...getTitleProps()}>Example header</h1>\n                  <section {...getContentProps()}>\n                    <p>Modal contents</p>\n                    <input placeholder=\"focusable content\" />\n                    <button>Submit</button>\n                  </section>\n                  <button\n                    {...(getCloseProps({\n                      'aria-label': 'Schließen Sie Modal',\n                      style: {\n                        position: 'absolute',\n                        top: '20px',\n                        right: '20px',\n                        cursor: 'pointer'\n                      }\n                    }) as any)}\n                  >\n                    X\n                  </button>\n                </div>\n              </div>\n            )\n          );\n        }}\n      </ModalContainer>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const restoreFocus = boolean('restoreFocus', true);\n  const modalRef = useRef(null);\n  const {\n    getBackdropProps,\n    getModalProps,\n    getTitleProps,\n    getContentProps,\n    getCloseProps\n  } = useModal({\n    onClose: () => setModalVisibility(false),\n    modalRef,\n    restoreFocus,\n    environment: window.document\n  });\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      {isModalVisible && (\n        <div\n          {...getBackdropProps({\n            style: {\n              background: 'rgba(0,0,0,0.2)',\n              position: 'fixed',\n              top: '0',\n              right: '0',\n              bottom: '0',\n              left: '0',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            }\n          })}\n        >\n          <div\n            {...getModalProps({\n              ref: modalRef,\n              style: {\n                padding: '20px',\n                background: '#fff',\n                minWidth: '500px',\n                minHeight: '400px',\n                position: 'relative'\n              }\n            })}\n          >\n            <h1 {...getTitleProps()}>Example header</h1>\n            <section {...getContentProps()}>\n              <p>Modal contents</p>\n              <input placeholder=\"focusable content\" />\n              <button>Submit</button>\n            </section>\n            <button\n              {...(getCloseProps({\n                'aria-label': 'Schließen Sie Modal',\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\n              }) as any)}\n            >\n              X\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'ModalContainer'\n};\n\nHook.story = {\n  name: 'useModal',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useModal\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Modal Container',\n  decorators: [withKnobs],\n  component: ModalContainer,\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useState, useRef } from 'react';\\n\\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\\n\\nimport { ModalContainer, useModal } from './src';\\n\\nexport const Container = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const modalRef = useRef(null);\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\\n          return (\\n            isModalVisible && (\\n              <div\\n                {...getBackdropProps({\\n                  style: {\\n                    background: 'rgba(0,0,0,0.2)',\\n                    position: 'fixed',\\n                    top: '0',\\n                    right: '0',\\n                    bottom: '0',\\n                    left: '0',\\n                    display: 'flex',\\n                    justifyContent: 'center',\\n                    alignItems: 'center'\\n                  }\\n                })}\\n              >\\n                <div\\n                  {...getModalProps({\\n                    ref: modalRef,\\n                    style: {\\n                      padding: '20px',\\n                      background: '#fff',\\n                      minWidth: '500px',\\n                      minHeight: '400px',\\n                      position: 'relative'\\n                    }\\n                  })}\\n                >\\n                  <h1 {...getTitleProps()}>Example header</h1>\\n                  <section {...getContentProps()}>\\n                    <p>Modal contents</p>\\n                    <input placeholder=\\\"focusable content\\\" />\\n                    <button>Submit</button>\\n                  </section>\\n                  <button\\n                    {...(getCloseProps({\\n                      'aria-label': 'Schließen Sie Modal',\\n                      style: {\\n                        position: 'absolute',\\n                        top: '20px',\\n                        right: '20px',\\n                        cursor: 'pointer'\\n                      }\\n                    }) as any)}\\n                  >\\n                    X\\n                  </button>\\n                </div>\\n              </div>\\n            )\\n          );\\n        }}\\n      </ModalContainer>\\n    </div>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const [isModalVisible, setModalVisibility] = useState(false);\\n  const restoreFocus = boolean('restoreFocus', true);\\n  const modalRef = useRef(null);\\n  const {\\n    getBackdropProps,\\n    getModalProps,\\n    getTitleProps,\\n    getContentProps,\\n    getCloseProps\\n  } = useModal({\\n    onClose: () => setModalVisibility(false),\\n    modalRef,\\n    restoreFocus,\\n    environment: window.document\\n  });\\n\\n  return (\\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\\n      {isModalVisible && (\\n        <div\\n          {...getBackdropProps({\\n            style: {\\n              background: 'rgba(0,0,0,0.2)',\\n              position: 'fixed',\\n              top: '0',\\n              right: '0',\\n              bottom: '0',\\n              left: '0',\\n              display: 'flex',\\n              justifyContent: 'center',\\n              alignItems: 'center'\\n            }\\n          })}\\n        >\\n          <div\\n            {...getModalProps({\\n              ref: modalRef,\\n              style: {\\n                padding: '20px',\\n                background: '#fff',\\n                minWidth: '500px',\\n                minHeight: '400px',\\n                position: 'relative'\\n              }\\n            })}\\n          >\\n            <h1 {...getTitleProps()}>Example header</h1>\\n            <section {...getContentProps()}>\\n              <p>Modal contents</p>\\n              <input placeholder=\\\"focusable content\\\" />\\n              <button>Submit</button>\\n            </section>\\n            <button\\n              {...(getCloseProps({\\n                'aria-label': 'Schließen Sie Modal',\\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\\n              }) as any)}\\n            >\\n              X\\n            </button>\\n          </div>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ModalContainer'\\n};\\n\\nHook.story = {\\n  name: 'useModal',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useModal\\\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Modal Container',\\n  decorators: [withKnobs],\\n  component: ModalContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useModal.`\\n  }\\n};\\n\",\"locationsMap\":{\"modal-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":79},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":79}},\"modal-container--hook\":{\"startLoc\":{\"col\":20,\"line\":81},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":20,\"line\":81},\"endBody\":{\"col\":1,\"line\":148}}}},\n    componentSubtitle: `A container component which wraps the useModal.`\n  },};\n",locationsMap:{"modal-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:101},startBody:{col:25,line:36},endBody:{col:139,line:101}},"modal-container--hook":{startLoc:{col:20,line:103},endLoc:{col:139,line:170},startBody:{col:20,line:103},endBody:{col:139,line:170}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useState, useRef } from 'react';\n\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\n\nimport { ModalContainer, useModal } from './src';\n\nexport const Container = () => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const modalRef = useRef(null);\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      <ModalContainer modalRef={modalRef} onClose={() => setModalVisibility(false)}>\n        {({ getBackdropProps, getModalProps, getTitleProps, getContentProps, getCloseProps }) => {\n          return (\n            isModalVisible && (\n              <div\n                {...getBackdropProps({\n                  style: {\n                    background: 'rgba(0,0,0,0.2)',\n                    position: 'fixed',\n                    top: '0',\n                    right: '0',\n                    bottom: '0',\n                    left: '0',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  }\n                })}\n              >\n                <div\n                  {...getModalProps({\n                    ref: modalRef,\n                    style: {\n                      padding: '20px',\n                      background: '#fff',\n                      minWidth: '500px',\n                      minHeight: '400px',\n                      position: 'relative'\n                    }\n                  })}\n                >\n                  <h1 {...getTitleProps()}>Example header</h1>\n                  <section {...getContentProps()}>\n                    <p>Modal contents</p>\n                    <input placeholder=\"focusable content\" />\n                    <button>Submit</button>\n                  </section>\n                  <button\n                    {...(getCloseProps({\n                      'aria-label': 'Schließen Sie Modal',\n                      style: {\n                        position: 'absolute',\n                        top: '20px',\n                        right: '20px',\n                        cursor: 'pointer'\n                      }\n                    }) as any)}\n                  >\n                    X\n                  </button>\n                </div>\n              </div>\n            )\n          );\n        }}\n      </ModalContainer>\n    </div>\n  );\n};\n\nexport const Hook = () => {\n  const [isModalVisible, setModalVisibility] = useState(false);\n  const restoreFocus = boolean('restoreFocus', true);\n  const modalRef = useRef(null);\n  const {\n    getBackdropProps,\n    getModalProps,\n    getTitleProps,\n    getContentProps,\n    getCloseProps\n  } = useModal({\n    onClose: () => setModalVisibility(false),\n    modalRef,\n    restoreFocus,\n    environment: window.document\n  });\n\n  return (\n    <div style={{ height: '60vh', display: 'flex', alignItems: 'center' }}>\n      <button onClick={() => setModalVisibility(!isModalVisible)}>Open Modal</button>\n      {isModalVisible && (\n        <div\n          {...getBackdropProps({\n            style: {\n              background: 'rgba(0,0,0,0.2)',\n              position: 'fixed',\n              top: '0',\n              right: '0',\n              bottom: '0',\n              left: '0',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            }\n          })}\n        >\n          <div\n            {...getModalProps({\n              ref: modalRef,\n              style: {\n                padding: '20px',\n                background: '#fff',\n                minWidth: '500px',\n                minHeight: '400px',\n                position: 'relative'\n              }\n            })}\n          >\n            <h1 {...getTitleProps()}>Example header</h1>\n            <section {...getContentProps()}>\n              <p>Modal contents</p>\n              <input placeholder=\"focusable content\" />\n              <button>Submit</button>\n            </section>\n            <button\n              {...(getCloseProps({\n                'aria-label': 'Schließen Sie Modal',\n                style: { position: 'absolute', top: '20px', right: '20px', cursor: 'pointer' }\n              }) as any)}\n            >\n              X\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nContainer.story = {\n  name: 'ModalContainer'\n};\n\nHook.story = {\n  name: 'useModal',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useModal\\` hook implements the [modal pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) and can be used to build a modal component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Modal Container',\n  decorators: [withKnobs],\n  component: ModalContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useModal.`\n  }\n};\n",locationsMap:{"modal-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:79},startBody:{col:25,line:14},endBody:{col:1,line:79}},"modal-container--hook":{startLoc:{col:20,line:81},endLoc:{col:1,line:148},startBody:{col:20,line:81},endBody:{col:1,line:148}}}},_parameters.componentSubtitle="A container component which wraps the useModal.",_parameters)}},2812:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var esm_extends=__webpack_require__(409),react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),objectWithoutPropertiesLoose=__webpack_require__(410),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),hooks=(__webpack_require__(815),__webpack_require__(573),__webpack_require__(2846)),index_esm=__webpack_require__(3),useTooltip=function(_temp){var openTooltipTimeoutId,closeTooltipTimeoutId,_ref=void 0===_temp?{}:_temp,_ref$delayMillisecond=_ref.delayMilliseconds,delayMilliseconds=void 0===_ref$delayMillisecond?500:_ref$delayMillisecond,id=_ref.id,isVisible=_ref.isVisible,_useState=Object(react.useState)(isVisible),visibility=_useState[0],setVisibility=_useState[1],seed=Object(hooks.a)(),_id=Object(react.useState)(id||seed("tooltip_storybook"))[0],isMounted=Object(react.useRef)(!1),openTooltip=function(delayMs){void 0===delayMs&&(delayMs=delayMilliseconds),clearTimeout(closeTooltipTimeoutId);var timerId=setTimeout((function(){isMounted.current&&setVisibility(!0)}),delayMs);openTooltipTimeoutId=+timerId},closeTooltip=function(delayMs){void 0===delayMs&&(delayMs=delayMilliseconds),clearTimeout(openTooltipTimeoutId);var timerId=setTimeout((function(){isMounted.current&&setVisibility(!1)}),delayMs);closeTooltipTimeoutId=+timerId};return Object(react.useEffect)((function(){return isMounted.current=!0,function(){isMounted.current=!1}}),[]),Object(react.useEffect)((function(){return function(){clearTimeout(openTooltipTimeoutId),clearTimeout(closeTooltipTimeoutId)}}),[closeTooltipTimeoutId,openTooltipTimeoutId]),{isVisible:visibility,getTooltipProps:function(_temp3){var _ref3=void 0===_temp3?{}:_temp3,_ref3$role=_ref3.role,role=void 0===_ref3$role?"tooltip":_ref3$role,onMouseEnter=_ref3.onMouseEnter,onMouseLeave=_ref3.onMouseLeave,other=Object(objectWithoutPropertiesLoose.a)(_ref3,["role","onMouseEnter","onMouseLeave"]);return Object(esm_extends.a)({role:role,onMouseEnter:Object(index_esm.b)(onMouseEnter,(function(){return openTooltip()})),onMouseLeave:Object(index_esm.b)(onMouseLeave,(function(){return closeTooltip()})),"aria-hidden":!visibility,id:_id},other)},getTriggerProps:function(_temp2){var _ref2=void 0===_temp2?{}:_temp2,_ref2$tabIndex=_ref2.tabIndex,tabIndex=void 0===_ref2$tabIndex?0:_ref2$tabIndex,onMouseEnter=_ref2.onMouseEnter,onMouseLeave=_ref2.onMouseLeave,onFocus=_ref2.onFocus,onBlur=_ref2.onBlur,onKeyDown=_ref2.onKeyDown,other=Object(objectWithoutPropertiesLoose.a)(_ref2,["tabIndex","onMouseEnter","onMouseLeave","onFocus","onBlur","onKeyDown"]);return Object(esm_extends.a)({tabIndex:tabIndex,onMouseEnter:Object(index_esm.b)(onMouseEnter,(function(){return openTooltip()})),onMouseLeave:Object(index_esm.b)(onMouseLeave,(function(){return closeTooltip()})),onFocus:Object(index_esm.b)(onFocus,(function(){return openTooltip()})),onBlur:Object(index_esm.b)(onBlur,(function(){return closeTooltip(0)})),onKeyDown:Object(index_esm.b)(onKeyDown,(function(event){event.keyCode===index_esm.a.ESCAPE&&visibility&&closeTooltip(0)})),"aria-describedby":_id,"data-garden-container-id":"containers.tooltip","data-garden-container-version":"storybook"},other)},openTooltip:openTooltip,closeTooltip:closeTooltip}},TooltipContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=Object(objectWithoutPropertiesLoose.a)(_ref,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(useTooltip(options))))};TooltipContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,delayMilliseconds:prop_types_default.a.number,isVisible:prop_types_default.a.bool},TooltipContainer.__docgenInfo={description:"",methods:[],displayName:"TooltipContainer",props:{children:{type:{name:"func"},required:!1,description:"A children render prop function which receives tooltip state and prop getters"},render:{type:{name:"func"},required:!1,description:"A render prop function which receives tooltip state and prop getters"},delayMilliseconds:{type:{name:"number"},required:!1,description:"Milliseconds of delay before open/close of tooltip is initiated"},isVisible:{type:{name:"bool"},required:!1,description:"Control visibility state of the tooltip"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/tooltip/src/TooltipContainer.tsx"]={name:"TooltipContainer",docgenInfo:TooltipContainer.__docgenInfo,path:"packages/tooltip/src/TooltipContainer.tsx"});var helpers_esm_extends=__webpack_require__(590),popper=__webpack_require__(1423);__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook})),__webpack_require__.d(__webpack_exports__,"WithPopper",(function(){return WithPopper})),__webpack_require__.d(__webpack_exports__,"FocusableTooltip",(function(){return FocusableTooltip}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/tooltip",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/tooltip";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/tooltip\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { TooltipContainer, useTooltip } from \'./src\';\\\\nimport { usePopper } from \'../../utils/usePopper\';\\\\n\\\\nexport const Container = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  return (\\\\n    <TooltipContainer\\\\n      isVisible={boolean(\'isVisible\', false)}\\\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\\\n    >\\\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\\\n        const styles: React.CSSProperties = {\\\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\\\n          background: \'#1f73b7\',\\\\n          padding: \'10px\',\\\\n          margin: \'6px 0\',\\\\n          color: \'#fff\'\\\\n        };\\\\n\\\\n        return (\\\\n          <>\\\\n            <div\\\\n              {...getTooltipProps({\\\\n                ref: tooltipRef,\\\\n                style: styles\\\\n              })}\\\\n            >\\\\n              Tooltip\\\\n            </div>\\\\n            <button {...getTriggerProps()}>Trigger</button>\\\\n          </>\\\\n        );\\\\n      }}\\\\n    </TooltipContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles\\\\n        })}\\\\n      >\\\\n        Tooltip\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const WithPopper = () => {\\\\n  const tooltipRef = useRef(null);\\\\n  const triggerRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\\\n\\\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\\\n    ...style,\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const FocusableTooltip = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#000\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles,\\\\n          onFocus: () => openTooltip(),\\\\n          onBlur: () => closeTooltip(0)\\\\n        })}\\\\n      >\\\\n        Focusable tooltip, tab to this <button>button</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'TooltipContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useTooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTooltip\\\\\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithPopper.story = {\\\\n  name: \'positioning via Popper.js\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrate the \\\\\\\\`useTooltip\\\\\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nFocusableTooltip.story = {\\\\n  name: \'with focusable tooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Tooltip Container\',\\\\n  decorators: [withKnobs],\\\\n  component: TooltipContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"tooltip-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":47}},\\"tooltip-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":49},\\"endLoc\\":{\\"col\\":1,\\"line\\":78},\\"startBody\\":{\\"col\\":20,\\"line\\":49},\\"endBody\\":{\\"col\\":1,\\"line\\":78}},\\"tooltip-container--with-popper\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":105},\\"startBody\\":{\\"col\\":26,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":105}},\\"tooltip-container--focusable-tooltip\\":{\\"startLoc\\":{\\"col\\":32,\\"line\\":107},\\"endLoc\\":{\\"col\\":1,\\"line\\":138},\\"startBody\\":{\\"col\\":32,\\"line\\":107},\\"endBody\\":{\\"col\\":1,\\"line\\":138}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/tooltip.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { TooltipContainer, useTooltip } from \'./src\';\\nimport { usePopper } from \'../../utils/usePopper\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean(\'isVisible\', false)}\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\n          background: \'#1f73b7\',\\n          padding: \'10px\',\\n          margin: \'6px 0\',\\n          color: \'#fff\'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const WithPopper = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FocusableTooltip = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#000\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'TooltipContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useTooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: \'positioning via Popper.js\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: \'with focusable tooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Tooltip Container\',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { TooltipContainer, useTooltip } from \'./src\';\\\\nimport { usePopper } from \'../../utils/usePopper\';\\\\n\\\\nexport const Container = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  return (\\\\n    <TooltipContainer\\\\n      isVisible={boolean(\'isVisible\', false)}\\\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\\\n    >\\\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\\\n        const styles: React.CSSProperties = {\\\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\\\n          background: \'#1f73b7\',\\\\n          padding: \'10px\',\\\\n          margin: \'6px 0\',\\\\n          color: \'#fff\'\\\\n        };\\\\n\\\\n        return (\\\\n          <>\\\\n            <div\\\\n              {...getTooltipProps({\\\\n                ref: tooltipRef,\\\\n                style: styles\\\\n              })}\\\\n            >\\\\n              Tooltip\\\\n            </div>\\\\n            <button {...getTriggerProps()}>Trigger</button>\\\\n          </>\\\\n        );\\\\n      }}\\\\n    </TooltipContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles\\\\n        })}\\\\n      >\\\\n        Tooltip\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const WithPopper = () => {\\\\n  const tooltipRef = useRef(null);\\\\n  const triggerRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\\\n\\\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\\\n    ...style,\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const FocusableTooltip = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#000\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles,\\\\n          onFocus: () => openTooltip(),\\\\n          onBlur: () => closeTooltip(0)\\\\n        })}\\\\n      >\\\\n        Focusable tooltip, tab to this <button>button</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'TooltipContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useTooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTooltip\\\\\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithPopper.story = {\\\\n  name: \'positioning via Popper.js\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrate the \\\\\\\\`useTooltip\\\\\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nFocusableTooltip.story = {\\\\n  name: \'with focusable tooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Tooltip Container\',\\\\n  decorators: [withKnobs],\\\\n  component: TooltipContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"tooltip-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":47}},\\"tooltip-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":49},\\"endLoc\\":{\\"col\\":1,\\"line\\":78},\\"startBody\\":{\\"col\\":20,\\"line\\":49},\\"endBody\\":{\\"col\\":1,\\"line\\":78}},\\"tooltip-container--with-popper\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":105},\\"startBody\\":{\\"col\\":26,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":105}},\\"tooltip-container--focusable-tooltip\\":{\\"startLoc\\":{\\"col\\":32,\\"line\\":107},\\"endLoc\\":{\\"col\\":1,\\"line\\":138},\\"startBody\\":{\\"col\\":32,\\"line\\":107},\\"endBody\\":{\\"col\\":1,\\"line\\":138}}}},\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"tooltip-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":69},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":69}},"tooltip-container--hook":{"startLoc":{"col":20,"line":71},"endLoc":{"col":139,"line":100},"startBody":{"col":20,"line":71},"endBody":{"col":139,"line":100}},"tooltip-container--with-popper":{"startLoc":{"col":26,"line":102},"endLoc":{"col":139,"line":127},"startBody":{"col":26,"line":102},"endBody":{"col":139,"line":127}},"tooltip-container--focusable-tooltip":{"startLoc":{"col":32,"line":129},"endLoc":{"col":139,"line":160},"startBody":{"col":32,"line":129},"endBody":{"col":139,"line":160}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/tooltip.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/tooltip";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { TooltipContainer, useTooltip } from \'./src\';\\nimport { usePopper } from \'../../utils/usePopper\';\\n\\nexport const Container = () => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean(\'isVisible\', false)}\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\n          background: \'#1f73b7\',\\n          padding: \'10px\',\\n          margin: \'6px 0\',\\n          color: \'#fff\'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport const WithPopper = () => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n};\\n\\nexport const FocusableTooltip = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#000\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'TooltipContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useTooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: \'positioning via Popper.js\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: \'with focusable tooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Tooltip Container\',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"tooltip-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":47},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":47}},"tooltip-container--hook":{"startLoc":{"col":20,"line":49},"endLoc":{"col":1,"line":78},"startBody":{"col":20,"line":49},"endBody":{"col":1,"line":78}},"tooltip-container--with-popper":{"startLoc":{"col":26,"line":80},"endLoc":{"col":1,"line":105},"startBody":{"col":26,"line":80},"endBody":{"col":1,"line":105}},"tooltip-container--focusable-tooltip":{"startLoc":{"col":32,"line":107},"endLoc":{"col":1,"line":138},"startBody":{"col":32,"line":107},"endBody":{"col":1,"line":138}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/tooltip.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from \'react\';\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\n\nimport { TooltipContainer, useTooltip } from \'./src\';\nimport { usePopper } from \'../../utils/usePopper\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  return (\n    <TooltipContainer\n      isVisible={boolean(\'isVisible\', false)}\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\n    >\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\n        const styles: React.CSSProperties = {\n          visibility: isVisible ? \'visible\' : \'hidden\',\n          background: \'#1f73b7\',\n          padding: \'10px\',\n          margin: \'6px 0\',\n          color: \'#fff\'\n        };\n\n        return (\n          <>\n            <div\n              {...getTooltipProps({\n                ref: tooltipRef,\n                style: styles\n              })}\n            >\n              Tooltip\n            </div>\n            <button {...getTriggerProps()}>Trigger</button>\n          </>\n        );\n      }}\n    </TooltipContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean(\'isVisible\', false),\n    delayMilliseconds: number(\'Tooltip delay\', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? \'visible\' : \'hidden\',\n    background: \'#1f73b7\',\n    padding: \'10px\',\n    margin: \'6px 0\',\n    color: \'#fff\'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles\n        })}\n      >\n        Tooltip\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const WithPopper = addSourceDecorator(addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n  const triggerRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean(\'isVisible\', false),\n    delayMilliseconds: number(\'Tooltip delay\', 500)\n  });\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\n\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\n    ...style,\n    visibility: isVisible ? \'visible\' : \'hidden\',\n    background: \'#1f73b7\',\n    padding: \'10px\',\n    margin: \'6px 0\',\n    color: \'#fff\'\n  };\n\n  return (\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const FocusableTooltip = addSourceDecorator(addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\n    isVisible: boolean(\'isVisible\', false),\n    delayMilliseconds: number(\'Tooltip delay\', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? \'visible\' : \'hidden\',\n    background: \'#000\',\n    padding: \'10px\',\n    margin: \'6px 0\',\n    color: \'#fff\'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles,\n          onFocus: () => openTooltip(),\n          onBlur: () => closeTooltip(0)\n        })}\n      >\n        Focusable tooltip, tab to this <button>button</button>\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'TooltipContainer\'\n};\n\nHook.story = {\n  name: \'useTooltip\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTooltip\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\n    }\n  }\n};\n\nWithPopper.story = {\n  name: \'positioning via Popper.js\',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrate the \\`useTooltip\\` hook in combination with Popper.js for positioning. And it\'s broken`\n    }\n  }\n};\n\nFocusableTooltip.story = {\n  name: \'with focusable tooltip\',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\n    }\n  }\n};\n\nexport default {\n  title: \'Tooltip Container\',\n  decorators: [withKnobs],\n  component: TooltipContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/tooltip\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { TooltipContainer, useTooltip } from \'./src\';\\\\nimport { usePopper } from \'../../utils/usePopper\';\\\\n\\\\nexport const Container = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  return (\\\\n    <TooltipContainer\\\\n      isVisible={boolean(\'isVisible\', false)}\\\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\\\n    >\\\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\\\n        const styles: React.CSSProperties = {\\\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\\\n          background: \'#1f73b7\',\\\\n          padding: \'10px\',\\\\n          margin: \'6px 0\',\\\\n          color: \'#fff\'\\\\n        };\\\\n\\\\n        return (\\\\n          <>\\\\n            <div\\\\n              {...getTooltipProps({\\\\n                ref: tooltipRef,\\\\n                style: styles\\\\n              })}\\\\n            >\\\\n              Tooltip\\\\n            </div>\\\\n            <button {...getTriggerProps()}>Trigger</button>\\\\n          </>\\\\n        );\\\\n      }}\\\\n    </TooltipContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles\\\\n        })}\\\\n      >\\\\n        Tooltip\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const WithPopper = () => {\\\\n  const tooltipRef = useRef(null);\\\\n  const triggerRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\\\n\\\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\\\n    ...style,\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const FocusableTooltip = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#000\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles,\\\\n          onFocus: () => openTooltip(),\\\\n          onBlur: () => closeTooltip(0)\\\\n        })}\\\\n      >\\\\n        Focusable tooltip, tab to this <button>button</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'TooltipContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useTooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTooltip\\\\\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithPopper.story = {\\\\n  name: \'positioning via Popper.js\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrate the \\\\\\\\`useTooltip\\\\\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nFocusableTooltip.story = {\\\\n  name: \'with focusable tooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Tooltip Container\',\\\\n  decorators: [withKnobs],\\\\n  component: TooltipContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"tooltip-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":47}},\\"tooltip-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":49},\\"endLoc\\":{\\"col\\":1,\\"line\\":78},\\"startBody\\":{\\"col\\":20,\\"line\\":49},\\"endBody\\":{\\"col\\":1,\\"line\\":78}},\\"tooltip-container--with-popper\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":105},\\"startBody\\":{\\"col\\":26,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":105}},\\"tooltip-container--focusable-tooltip\\":{\\"startLoc\\":{\\"col\\":32,\\"line\\":107},\\"endLoc\\":{\\"col\\":1,\\"line\\":138},\\"startBody\\":{\\"col\\":32,\\"line\\":107},\\"endBody\\":{\\"col\\":1,\\"line\\":138}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/tooltip.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { TooltipContainer, useTooltip } from \'./src\';\\nimport { usePopper } from \'../../utils/usePopper\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean(\'isVisible\', false)}\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\n          background: \'#1f73b7\',\\n          padding: \'10px\',\\n          margin: \'6px 0\',\\n          color: \'#fff\'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const WithPopper = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FocusableTooltip = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#000\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'TooltipContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useTooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: \'positioning via Popper.js\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: \'with focusable tooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Tooltip Container\',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { TooltipContainer, useTooltip } from \'./src\';\\\\nimport { usePopper } from \'../../utils/usePopper\';\\\\n\\\\nexport const Container = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  return (\\\\n    <TooltipContainer\\\\n      isVisible={boolean(\'isVisible\', false)}\\\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\\\n    >\\\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\\\n        const styles: React.CSSProperties = {\\\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\\\n          background: \'#1f73b7\',\\\\n          padding: \'10px\',\\\\n          margin: \'6px 0\',\\\\n          color: \'#fff\'\\\\n        };\\\\n\\\\n        return (\\\\n          <>\\\\n            <div\\\\n              {...getTooltipProps({\\\\n                ref: tooltipRef,\\\\n                style: styles\\\\n              })}\\\\n            >\\\\n              Tooltip\\\\n            </div>\\\\n            <button {...getTriggerProps()}>Trigger</button>\\\\n          </>\\\\n        );\\\\n      }}\\\\n    </TooltipContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles\\\\n        })}\\\\n      >\\\\n        Tooltip\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const WithPopper = () => {\\\\n  const tooltipRef = useRef(null);\\\\n  const triggerRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\\\n\\\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\\\n    ...style,\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const FocusableTooltip = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#000\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles,\\\\n          onFocus: () => openTooltip(),\\\\n          onBlur: () => closeTooltip(0)\\\\n        })}\\\\n      >\\\\n        Focusable tooltip, tab to this <button>button</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'TooltipContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useTooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTooltip\\\\\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithPopper.story = {\\\\n  name: \'positioning via Popper.js\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrate the \\\\\\\\`useTooltip\\\\\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nFocusableTooltip.story = {\\\\n  name: \'with focusable tooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Tooltip Container\',\\\\n  decorators: [withKnobs],\\\\n  component: TooltipContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"tooltip-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":47}},\\"tooltip-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":49},\\"endLoc\\":{\\"col\\":1,\\"line\\":78},\\"startBody\\":{\\"col\\":20,\\"line\\":49},\\"endBody\\":{\\"col\\":1,\\"line\\":78}},\\"tooltip-container--with-popper\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":105},\\"startBody\\":{\\"col\\":26,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":105}},\\"tooltip-container--focusable-tooltip\\":{\\"startLoc\\":{\\"col\\":32,\\"line\\":107},\\"endLoc\\":{\\"col\\":1,\\"line\\":138},\\"startBody\\":{\\"col\\":32,\\"line\\":107},\\"endBody\\":{\\"col\\":1,\\"line\\":138}}}},\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  },};\\n","locationsMap":{"tooltip-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":69},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":69}},"tooltip-container--hook":{"startLoc":{"col":20,"line":71},"endLoc":{"col":139,"line":100},"startBody":{"col":20,"line":71},"endBody":{"col":139,"line":100}},"tooltip-container--with-popper":{"startLoc":{"col":26,"line":102},"endLoc":{"col":139,"line":127},"startBody":{"col":26,"line":102},"endBody":{"col":139,"line":127}},"tooltip-container--focusable-tooltip":{"startLoc":{"col":32,"line":129},"endLoc":{"col":139,"line":160},"startBody":{"col":32,"line":129},"endBody":{"col":139,"line":160}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { TooltipContainer, useTooltip } from \'./src\';\\nimport { usePopper } from \'../../utils/usePopper\';\\n\\nexport const Container = () => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean(\'isVisible\', false)}\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\n          background: \'#1f73b7\',\\n          padding: \'10px\',\\n          margin: \'6px 0\',\\n          color: \'#fff\'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport const WithPopper = () => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n};\\n\\nexport const FocusableTooltip = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#000\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'TooltipContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useTooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: \'positioning via Popper.js\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: \'with focusable tooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Tooltip Container\',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  }\\n};\\n","locationsMap":{"tooltip-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":47},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":47}},"tooltip-container--hook":{"startLoc":{"col":20,"line":49},"endLoc":{"col":1,"line":78},"startBody":{"col":20,"line":49},"endBody":{"col":1,"line":78}},"tooltip-container--with-popper":{"startLoc":{"col":26,"line":80},"endLoc":{"col":1,"line":105},"startBody":{"col":26,"line":80},"endBody":{"col":1,"line":105}},"tooltip-container--focusable-tooltip":{"startLoc":{"col":32,"line":107},"endLoc":{"col":1,"line":138},"startBody":{"col":32,"line":107},"endBody":{"col":1,"line":138}}}},\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\n  },};\n',__ADDS_MAP__={"tooltip-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:91},startBody:{col:25,line:58},endBody:{col:277,line:91}},"tooltip-container--hook":{startLoc:{col:20,line:93},endLoc:{col:277,line:122},startBody:{col:20,line:93},endBody:{col:277,line:122}},"tooltip-container--with-popper":{startLoc:{col:26,line:124},endLoc:{col:277,line:149},startBody:{col:26,line:124},endBody:{col:277,line:149}},"tooltip-container--focusable-tooltip":{startLoc:{col:32,line:151},endLoc:{col:277,line:182},startBody:{col:32,line:151},endBody:{col:277,line:182}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},Container=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/tooltip",__STORY__="\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/tooltip\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from 'react';\\nimport { withKnobs, number, boolean } from '@storybook/addon-knobs';\\n\\nimport { TooltipContainer, useTooltip } from './src';\\nimport { usePopper } from '../../utils/usePopper';\\n\\nexport const Container = () => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean('isVisible', false)}\\n      delayMilliseconds={number('Tooltip delay', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? 'visible' : 'hidden',\\n          background: '#1f73b7',\\n          padding: '10px',\\n          margin: '6px 0',\\n          color: '#fff'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#1f73b7',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport const WithPopper = () => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#1f73b7',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <div style={{ display: 'flex', alignItems: 'center', height: '150px' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n};\\n\\nexport const FocusableTooltip = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#000',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'TooltipContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTooltip',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: 'positioning via Popper.js',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it's broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: 'with focusable tooltip',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tooltip Container',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"tooltip-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":47},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":47}},\"tooltip-container--hook\":{\"startLoc\":{\"col\":20,\"line\":49},\"endLoc\":{\"col\":1,\"line\":78},\"startBody\":{\"col\":20,\"line\":49},\"endBody\":{\"col\":1,\"line\":78}},\"tooltip-container--with-popper\":{\"startLoc\":{\"col\":26,\"line\":80},\"endLoc\":{\"col\":1,\"line\":105},\"startBody\":{\"col\":26,\"line\":80},\"endBody\":{\"col\":1,\"line\":105}},\"tooltip-container--focusable-tooltip\":{\"startLoc\":{\"col\":32,\"line\":107},\"endLoc\":{\"col\":1,\"line\":138},\"startBody\":{\"col\":32,\"line\":107},\"endBody\":{\"col\":1,\"line\":138}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/tooltip.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from 'react';\nimport { withKnobs, number, boolean } from '@storybook/addon-knobs';\n\nimport { TooltipContainer, useTooltip } from './src';\nimport { usePopper } from '../../utils/usePopper';\n\nexport const Container = addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  return (\n    <TooltipContainer\n      isVisible={boolean('isVisible', false)}\n      delayMilliseconds={number('Tooltip delay', 500)}\n    >\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\n        const styles: React.CSSProperties = {\n          visibility: isVisible ? 'visible' : 'hidden',\n          background: '#1f73b7',\n          padding: '10px',\n          margin: '6px 0',\n          color: '#fff'\n        };\n\n        return (\n          <>\n            <div\n              {...getTooltipProps({\n                ref: tooltipRef,\n                style: styles\n              })}\n            >\n              Tooltip\n            </div>\n            <button {...getTriggerProps()}>Trigger</button>\n          </>\n        );\n      }}\n    </TooltipContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#1f73b7',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles\n        })}\n      >\n        Tooltip\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const WithPopper = addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n  const triggerRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\n\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\n    ...style,\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#1f73b7',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', height: '150px' }}>\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const FocusableTooltip = addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#000',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles,\n          onFocus: () => openTooltip(),\n          onBlur: () => closeTooltip(0)\n        })}\n      >\n        Focusable tooltip, tab to this <button>button</button>\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'TooltipContainer'\n};\n\nHook.story = {\n  name: 'useTooltip',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTooltip\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\n    }\n  }\n};\n\nWithPopper.story = {\n  name: 'positioning via Popper.js',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrate the \\`useTooltip\\` hook in combination with Popper.js for positioning. And it's broken`\n    }\n  }\n};\n\nFocusableTooltip.story = {\n  name: 'with focusable tooltip',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\n    }\n  }\n};\n\nexport default {\n  title: 'Tooltip Container',\n  decorators: [withKnobs],\n  component: TooltipContainer,\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from 'react';\\nimport { withKnobs, number, boolean } from '@storybook/addon-knobs';\\n\\nimport { TooltipContainer, useTooltip } from './src';\\nimport { usePopper } from '../../utils/usePopper';\\n\\nexport const Container = () => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean('isVisible', false)}\\n      delayMilliseconds={number('Tooltip delay', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? 'visible' : 'hidden',\\n          background: '#1f73b7',\\n          padding: '10px',\\n          margin: '6px 0',\\n          color: '#fff'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#1f73b7',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport const WithPopper = () => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#1f73b7',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <div style={{ display: 'flex', alignItems: 'center', height: '150px' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n};\\n\\nexport const FocusableTooltip = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#000',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'TooltipContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTooltip',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: 'positioning via Popper.js',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it's broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: 'with focusable tooltip',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tooltip Container',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"tooltip-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":47},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":47}},\"tooltip-container--hook\":{\"startLoc\":{\"col\":20,\"line\":49},\"endLoc\":{\"col\":1,\"line\":78},\"startBody\":{\"col\":20,\"line\":49},\"endBody\":{\"col\":1,\"line\":78}},\"tooltip-container--with-popper\":{\"startLoc\":{\"col\":26,\"line\":80},\"endLoc\":{\"col\":1,\"line\":105},\"startBody\":{\"col\":26,\"line\":80},\"endBody\":{\"col\":1,\"line\":105}},\"tooltip-container--focusable-tooltip\":{\"startLoc\":{\"col\":32,\"line\":107},\"endLoc\":{\"col\":1,\"line\":138},\"startBody\":{\"col\":32,\"line\":107},\"endBody\":{\"col\":1,\"line\":138}}}},\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\n  },};\n",__ADDS_MAP__={"tooltip-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:69},startBody:{col:25,line:36},endBody:{col:139,line:69}},"tooltip-container--hook":{startLoc:{col:20,line:71},endLoc:{col:139,line:100},startBody:{col:20,line:71},endBody:{col:139,line:100}},"tooltip-container--with-popper":{startLoc:{col:26,line:102},endLoc:{col:139,line:127},startBody:{col:26,line:102},endBody:{col:139,line:127}},"tooltip-container--focusable-tooltip":{startLoc:{col:32,line:129},endLoc:{col:139,line:160},startBody:{col:32,line:129},endBody:{col:139,line:160}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(2).withSource,(addSourceDecorator=__webpack_require__(2).addSource)(addSourceDecorator(addSourceDecorator((function(){var tooltipRef=Object(react.useRef)(null);return(react_default.a.createElement(TooltipContainer,{isVisible:Object(dist.boolean)("isVisible",!1),delayMilliseconds:Object(dist.number)("Tooltip delay",500)},(function(_ref){var isVisible=_ref.isVisible,getTooltipProps=_ref.getTooltipProps,getTriggerProps=_ref.getTriggerProps,styles={visibility:isVisible?"visible":"hidden",background:"#1f73b7",padding:"10px",margin:"6px 0",color:"#fff"};return(react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("div",getTooltipProps({ref:tooltipRef,style:styles}),"Tooltip"),react_default.a.createElement("button",getTriggerProps(),"Trigger")))})))}),{__STORY__:__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from 'react';\nimport { withKnobs, number, boolean } from '@storybook/addon-knobs';\n\nimport { TooltipContainer, useTooltip } from './src';\nimport { usePopper } from '../../utils/usePopper';\n\nexport const Container = () => {\n  const tooltipRef = useRef(null);\n\n  return (\n    <TooltipContainer\n      isVisible={boolean('isVisible', false)}\n      delayMilliseconds={number('Tooltip delay', 500)}\n    >\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\n        const styles: React.CSSProperties = {\n          visibility: isVisible ? 'visible' : 'hidden',\n          background: '#1f73b7',\n          padding: '10px',\n          margin: '6px 0',\n          color: '#fff'\n        };\n\n        return (\n          <>\n            <div\n              {...getTooltipProps({\n                ref: tooltipRef,\n                style: styles\n              })}\n            >\n              Tooltip\n            </div>\n            <button {...getTriggerProps()}>Trigger</button>\n          </>\n        );\n      }}\n    </TooltipContainer>\n  );\n};\n\nexport const Hook = () => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#1f73b7',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles\n        })}\n      >\n        Tooltip\n      </div>\n    </>\n  );\n};\n\nexport const WithPopper = () => {\n  const tooltipRef = useRef(null);\n  const triggerRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\n\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\n    ...style,\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#1f73b7',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', height: '150px' }}>\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\n    </div>\n  );\n};\n\nexport const FocusableTooltip = () => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#000',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles,\n          onFocus: () => openTooltip(),\n          onBlur: () => closeTooltip(0)\n        })}\n      >\n        Focusable tooltip, tab to this <button>button</button>\n      </div>\n    </>\n  );\n};\n\nContainer.story = {\n  name: 'TooltipContainer'\n};\n\nHook.story = {\n  name: 'useTooltip',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTooltip\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\n    }\n  }\n};\n\nWithPopper.story = {\n  name: 'positioning via Popper.js',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrate the \\`useTooltip\\` hook in combination with Popper.js for positioning. And it's broken`\n    }\n  }\n};\n\nFocusableTooltip.story = {\n  name: 'with focusable tooltip',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\n    }\n  }\n};\n\nexport default {\n  title: 'Tooltip Container',\n  decorators: [withKnobs],\n  component: TooltipContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\n  }\n};\n",__ADDS_MAP__:__ADDS_MAP__={"tooltip-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:47},startBody:{col:25,line:14},endBody:{col:1,line:47}},"tooltip-container--hook":{startLoc:{col:20,line:49},endLoc:{col:1,line:78},startBody:{col:20,line:49},endBody:{col:1,line:78}},"tooltip-container--with-popper":{startLoc:{col:26,line:80},endLoc:{col:1,line:105},startBody:{col:26,line:80},endBody:{col:1,line:105}},"tooltip-container--focusable-tooltip":{startLoc:{col:32,line:107},endLoc:{col:1,line:138},startBody:{col:32,line:107},endBody:{col:1,line:138}}},__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/home/circleci/project/packages/tooltip",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var tooltipRef=Object(react.useRef)(null),_useTooltip=useTooltip({isVisible:Object(dist.boolean)("isVisible",!1),delayMilliseconds:Object(dist.number)("Tooltip delay",500)}),isVisible=_useTooltip.isVisible,getTooltipProps=_useTooltip.getTooltipProps,getTriggerProps=_useTooltip.getTriggerProps,styles={visibility:isVisible?"visible":"hidden",background:"#1f73b7",padding:"10px",margin:"6px 0",color:"#fff"};return(react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("button",getTriggerProps(),"Trigger"),react_default.a.createElement("div",getTooltipProps({ref:tooltipRef,style:styles}),"Tooltip")))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),WithPopper=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var tooltipRef=Object(react.useRef)(null),triggerRef=Object(react.useRef)(null),_useTooltip2=useTooltip({isVisible:Object(dist.boolean)("isVisible",!1),delayMilliseconds:Object(dist.number)("Tooltip delay",500)}),isVisible=_useTooltip2.isVisible,getTooltipProps=_useTooltip2.getTooltipProps,getTriggerProps=_useTooltip2.getTriggerProps,style=function usePopper(options){var props=Object(helpers_esm_extends.a)({},{placement:"top",eventsEnabled:!0,positionFixed:!1},options),referenceRef=props.referenceRef,popperRef=props.popperRef,modifiers=props.modifiers,popperPlacement=props.placement,eventsEnabled=props.eventsEnabled,positionFixed=props.positionFixed,_useState=Object(react.useState)((function(){return{data:void 0,placement:void 0}})),state=_useState[0],setState=_useState[1],popperInstanceRef=Object(react.useRef)();return Object(react.useEffect)((function(){return referenceRef.current&&popperRef.current&&(popperInstanceRef.current=new popper.a(referenceRef.current,popperRef.current,{placement:popperPlacement,eventsEnabled:eventsEnabled,positionFixed:positionFixed,modifiers:Object(helpers_esm_extends.a)({},modifiers,{applyStyle:{enabled:!1},updateStateModifier:{enabled:!0,order:900,fn:function(data){var placement=data.placement;return setState({data:data,placement:placement}),data}}})})),function(){popperInstanceRef.current&&(popperInstanceRef.current.destroy(),popperInstanceRef.current=null)}}),[popperRef,referenceRef,modifiers,popperPlacement,positionFixed,eventsEnabled]),{style:popperRef.current&&state.data?Object(helpers_esm_extends.a)({},state.data.styles):{position:"absolute",top:0,left:0,opacity:0,pointerEvents:"none"},placement:state.placement,outOfBoundaries:state.data&&state.data.hide,scheduleUpdate:popperInstanceRef.current&&popperInstanceRef.current.scheduleUpdate}}({referenceRef:triggerRef,popperRef:tooltipRef}).style,styles=Object(esm_extends.a)({},style,{visibility:isVisible?"visible":"hidden",background:"#1f73b7",padding:"10px",margin:"6px 0",color:"#fff"});return(react_default.a.createElement("div",{style:{display:"flex",alignItems:"center",height:"150px"}},react_default.a.createElement("div",getTooltipProps({ref:tooltipRef,style:styles}),"Tooltip"),react_default.a.createElement("button",getTriggerProps({ref:triggerRef}),"Trigger")))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),FocusableTooltip=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var tooltipRef=Object(react.useRef)(null),_useTooltip3=useTooltip({isVisible:Object(dist.boolean)("isVisible",!1),delayMilliseconds:Object(dist.number)("Tooltip delay",500)}),isVisible=_useTooltip3.isVisible,getTooltipProps=_useTooltip3.getTooltipProps,getTriggerProps=_useTooltip3.getTriggerProps,openTooltip=_useTooltip3.openTooltip,closeTooltip=_useTooltip3.closeTooltip,styles={visibility:isVisible?"visible":"hidden",background:"#000",padding:"10px",margin:"6px 0",color:"#fff"};return(react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("button",getTriggerProps(),"Trigger"),react_default.a.createElement("div",getTooltipProps({ref:tooltipRef,style:styles,onFocus:function(){return openTooltip()},onBlur:function(){return closeTooltip(0)}}),"Focusable tooltip, tab to this ",react_default.a.createElement("button",null,"button"))))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tooltip.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"TooltipContainer"},Hook.story={name:"useTooltip",parameters:{docs:{storyDescription:"The `useTooltip` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component."}}},WithPopper.story={name:"positioning via Popper.js",parameters:{docs:{storyDescription:"This story demonstrate the `useTooltip` hook in combination with Popper.js for positioning. And it's broken"}}},FocusableTooltip.story={name:"with focusable tooltip",parameters:{docs:{storyDescription:"This story demonstrates focusable content within the tooltip."}}};__webpack_exports__.default={title:"Tooltip Container",decorators:[dist.withKnobs],component:TooltipContainer,parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/tooltip";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/tooltip\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { TooltipContainer, useTooltip } from \'./src\';\\\\nimport { usePopper } from \'../../utils/usePopper\';\\\\n\\\\nexport const Container = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  return (\\\\n    <TooltipContainer\\\\n      isVisible={boolean(\'isVisible\', false)}\\\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\\\n    >\\\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\\\n        const styles: React.CSSProperties = {\\\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\\\n          background: \'#1f73b7\',\\\\n          padding: \'10px\',\\\\n          margin: \'6px 0\',\\\\n          color: \'#fff\'\\\\n        };\\\\n\\\\n        return (\\\\n          <>\\\\n            <div\\\\n              {...getTooltipProps({\\\\n                ref: tooltipRef,\\\\n                style: styles\\\\n              })}\\\\n            >\\\\n              Tooltip\\\\n            </div>\\\\n            <button {...getTriggerProps()}>Trigger</button>\\\\n          </>\\\\n        );\\\\n      }}\\\\n    </TooltipContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles\\\\n        })}\\\\n      >\\\\n        Tooltip\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const WithPopper = () => {\\\\n  const tooltipRef = useRef(null);\\\\n  const triggerRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\\\n\\\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\\\n    ...style,\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const FocusableTooltip = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#000\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles,\\\\n          onFocus: () => openTooltip(),\\\\n          onBlur: () => closeTooltip(0)\\\\n        })}\\\\n      >\\\\n        Focusable tooltip, tab to this <button>button</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'TooltipContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useTooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTooltip\\\\\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithPopper.story = {\\\\n  name: \'positioning via Popper.js\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrate the \\\\\\\\`useTooltip\\\\\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nFocusableTooltip.story = {\\\\n  name: \'with focusable tooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Tooltip Container\',\\\\n  decorators: [withKnobs],\\\\n  component: TooltipContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"tooltip-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":47}},\\"tooltip-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":49},\\"endLoc\\":{\\"col\\":1,\\"line\\":78},\\"startBody\\":{\\"col\\":20,\\"line\\":49},\\"endBody\\":{\\"col\\":1,\\"line\\":78}},\\"tooltip-container--with-popper\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":105},\\"startBody\\":{\\"col\\":26,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":105}},\\"tooltip-container--focusable-tooltip\\":{\\"startLoc\\":{\\"col\\":32,\\"line\\":107},\\"endLoc\\":{\\"col\\":1,\\"line\\":138},\\"startBody\\":{\\"col\\":32,\\"line\\":107},\\"endBody\\":{\\"col\\":1,\\"line\\":138}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/tooltip.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { TooltipContainer, useTooltip } from \'./src\';\\nimport { usePopper } from \'../../utils/usePopper\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean(\'isVisible\', false)}\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\n          background: \'#1f73b7\',\\n          padding: \'10px\',\\n          margin: \'6px 0\',\\n          color: \'#fff\'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const WithPopper = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FocusableTooltip = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#000\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'TooltipContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useTooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: \'positioning via Popper.js\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: \'with focusable tooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Tooltip Container\',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { TooltipContainer, useTooltip } from \'./src\';\\\\nimport { usePopper } from \'../../utils/usePopper\';\\\\n\\\\nexport const Container = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  return (\\\\n    <TooltipContainer\\\\n      isVisible={boolean(\'isVisible\', false)}\\\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\\\n    >\\\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\\\n        const styles: React.CSSProperties = {\\\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\\\n          background: \'#1f73b7\',\\\\n          padding: \'10px\',\\\\n          margin: \'6px 0\',\\\\n          color: \'#fff\'\\\\n        };\\\\n\\\\n        return (\\\\n          <>\\\\n            <div\\\\n              {...getTooltipProps({\\\\n                ref: tooltipRef,\\\\n                style: styles\\\\n              })}\\\\n            >\\\\n              Tooltip\\\\n            </div>\\\\n            <button {...getTriggerProps()}>Trigger</button>\\\\n          </>\\\\n        );\\\\n      }}\\\\n    </TooltipContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles\\\\n        })}\\\\n      >\\\\n        Tooltip\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const WithPopper = () => {\\\\n  const tooltipRef = useRef(null);\\\\n  const triggerRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\\\n\\\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\\\n    ...style,\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const FocusableTooltip = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#000\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles,\\\\n          onFocus: () => openTooltip(),\\\\n          onBlur: () => closeTooltip(0)\\\\n        })}\\\\n      >\\\\n        Focusable tooltip, tab to this <button>button</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'TooltipContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useTooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTooltip\\\\\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithPopper.story = {\\\\n  name: \'positioning via Popper.js\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrate the \\\\\\\\`useTooltip\\\\\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nFocusableTooltip.story = {\\\\n  name: \'with focusable tooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Tooltip Container\',\\\\n  decorators: [withKnobs],\\\\n  component: TooltipContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"tooltip-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":47}},\\"tooltip-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":49},\\"endLoc\\":{\\"col\\":1,\\"line\\":78},\\"startBody\\":{\\"col\\":20,\\"line\\":49},\\"endBody\\":{\\"col\\":1,\\"line\\":78}},\\"tooltip-container--with-popper\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":105},\\"startBody\\":{\\"col\\":26,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":105}},\\"tooltip-container--focusable-tooltip\\":{\\"startLoc\\":{\\"col\\":32,\\"line\\":107},\\"endLoc\\":{\\"col\\":1,\\"line\\":138},\\"startBody\\":{\\"col\\":32,\\"line\\":107},\\"endBody\\":{\\"col\\":1,\\"line\\":138}}}},\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"tooltip-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":69},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":69}},"tooltip-container--hook":{"startLoc":{"col":20,"line":71},"endLoc":{"col":139,"line":100},"startBody":{"col":20,"line":71},"endBody":{"col":139,"line":100}},"tooltip-container--with-popper":{"startLoc":{"col":26,"line":102},"endLoc":{"col":139,"line":127},"startBody":{"col":26,"line":102},"endBody":{"col":139,"line":127}},"tooltip-container--focusable-tooltip":{"startLoc":{"col":32,"line":129},"endLoc":{"col":139,"line":160},"startBody":{"col":32,"line":129},"endBody":{"col":139,"line":160}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/tooltip.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/tooltip";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { TooltipContainer, useTooltip } from \'./src\';\\nimport { usePopper } from \'../../utils/usePopper\';\\n\\nexport const Container = () => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean(\'isVisible\', false)}\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\n          background: \'#1f73b7\',\\n          padding: \'10px\',\\n          margin: \'6px 0\',\\n          color: \'#fff\'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport const WithPopper = () => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n};\\n\\nexport const FocusableTooltip = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#000\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'TooltipContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useTooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: \'positioning via Popper.js\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: \'with focusable tooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Tooltip Container\',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"tooltip-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":47},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":47}},"tooltip-container--hook":{"startLoc":{"col":20,"line":49},"endLoc":{"col":1,"line":78},"startBody":{"col":20,"line":49},"endBody":{"col":1,"line":78}},"tooltip-container--with-popper":{"startLoc":{"col":26,"line":80},"endLoc":{"col":1,"line":105},"startBody":{"col":26,"line":80},"endBody":{"col":1,"line":105}},"tooltip-container--focusable-tooltip":{"startLoc":{"col":32,"line":107},"endLoc":{"col":1,"line":138},"startBody":{"col":32,"line":107},"endBody":{"col":1,"line":138}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/tooltip.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from \'react\';\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\n\nimport { TooltipContainer, useTooltip } from \'./src\';\nimport { usePopper } from \'../../utils/usePopper\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  return (\n    <TooltipContainer\n      isVisible={boolean(\'isVisible\', false)}\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\n    >\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\n        const styles: React.CSSProperties = {\n          visibility: isVisible ? \'visible\' : \'hidden\',\n          background: \'#1f73b7\',\n          padding: \'10px\',\n          margin: \'6px 0\',\n          color: \'#fff\'\n        };\n\n        return (\n          <>\n            <div\n              {...getTooltipProps({\n                ref: tooltipRef,\n                style: styles\n              })}\n            >\n              Tooltip\n            </div>\n            <button {...getTriggerProps()}>Trigger</button>\n          </>\n        );\n      }}\n    </TooltipContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean(\'isVisible\', false),\n    delayMilliseconds: number(\'Tooltip delay\', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? \'visible\' : \'hidden\',\n    background: \'#1f73b7\',\n    padding: \'10px\',\n    margin: \'6px 0\',\n    color: \'#fff\'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles\n        })}\n      >\n        Tooltip\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const WithPopper = addSourceDecorator(addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n  const triggerRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean(\'isVisible\', false),\n    delayMilliseconds: number(\'Tooltip delay\', 500)\n  });\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\n\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\n    ...style,\n    visibility: isVisible ? \'visible\' : \'hidden\',\n    background: \'#1f73b7\',\n    padding: \'10px\',\n    margin: \'6px 0\',\n    color: \'#fff\'\n  };\n\n  return (\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const FocusableTooltip = addSourceDecorator(addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\n    isVisible: boolean(\'isVisible\', false),\n    delayMilliseconds: number(\'Tooltip delay\', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? \'visible\' : \'hidden\',\n    background: \'#000\',\n    padding: \'10px\',\n    margin: \'6px 0\',\n    color: \'#fff\'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles,\n          onFocus: () => openTooltip(),\n          onBlur: () => closeTooltip(0)\n        })}\n      >\n        Focusable tooltip, tab to this <button>button</button>\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'TooltipContainer\'\n};\n\nHook.story = {\n  name: \'useTooltip\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTooltip\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\n    }\n  }\n};\n\nWithPopper.story = {\n  name: \'positioning via Popper.js\',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrate the \\`useTooltip\\` hook in combination with Popper.js for positioning. And it\'s broken`\n    }\n  }\n};\n\nFocusableTooltip.story = {\n  name: \'with focusable tooltip\',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\n    }\n  }\n};\n\nexport default {\n  title: \'Tooltip Container\',\n  decorators: [withKnobs],\n  component: TooltipContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/tooltip\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { TooltipContainer, useTooltip } from \'./src\';\\\\nimport { usePopper } from \'../../utils/usePopper\';\\\\n\\\\nexport const Container = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  return (\\\\n    <TooltipContainer\\\\n      isVisible={boolean(\'isVisible\', false)}\\\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\\\n    >\\\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\\\n        const styles: React.CSSProperties = {\\\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\\\n          background: \'#1f73b7\',\\\\n          padding: \'10px\',\\\\n          margin: \'6px 0\',\\\\n          color: \'#fff\'\\\\n        };\\\\n\\\\n        return (\\\\n          <>\\\\n            <div\\\\n              {...getTooltipProps({\\\\n                ref: tooltipRef,\\\\n                style: styles\\\\n              })}\\\\n            >\\\\n              Tooltip\\\\n            </div>\\\\n            <button {...getTriggerProps()}>Trigger</button>\\\\n          </>\\\\n        );\\\\n      }}\\\\n    </TooltipContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles\\\\n        })}\\\\n      >\\\\n        Tooltip\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const WithPopper = () => {\\\\n  const tooltipRef = useRef(null);\\\\n  const triggerRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\\\n\\\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\\\n    ...style,\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const FocusableTooltip = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#000\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles,\\\\n          onFocus: () => openTooltip(),\\\\n          onBlur: () => closeTooltip(0)\\\\n        })}\\\\n      >\\\\n        Focusable tooltip, tab to this <button>button</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'TooltipContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useTooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTooltip\\\\\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithPopper.story = {\\\\n  name: \'positioning via Popper.js\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrate the \\\\\\\\`useTooltip\\\\\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nFocusableTooltip.story = {\\\\n  name: \'with focusable tooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Tooltip Container\',\\\\n  decorators: [withKnobs],\\\\n  component: TooltipContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"tooltip-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":47}},\\"tooltip-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":49},\\"endLoc\\":{\\"col\\":1,\\"line\\":78},\\"startBody\\":{\\"col\\":20,\\"line\\":49},\\"endBody\\":{\\"col\\":1,\\"line\\":78}},\\"tooltip-container--with-popper\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":105},\\"startBody\\":{\\"col\\":26,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":105}},\\"tooltip-container--focusable-tooltip\\":{\\"startLoc\\":{\\"col\\":32,\\"line\\":107},\\"endLoc\\":{\\"col\\":1,\\"line\\":138},\\"startBody\\":{\\"col\\":32,\\"line\\":107},\\"endBody\\":{\\"col\\":1,\\"line\\":138}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/tooltip.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { TooltipContainer, useTooltip } from \'./src\';\\nimport { usePopper } from \'../../utils/usePopper\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean(\'isVisible\', false)}\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\n          background: \'#1f73b7\',\\n          padding: \'10px\',\\n          margin: \'6px 0\',\\n          color: \'#fff\'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const WithPopper = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const FocusableTooltip = addSourceDecorator(() => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#000\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'TooltipContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useTooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: \'positioning via Popper.js\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: \'with focusable tooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Tooltip Container\',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { TooltipContainer, useTooltip } from \'./src\';\\\\nimport { usePopper } from \'../../utils/usePopper\';\\\\n\\\\nexport const Container = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  return (\\\\n    <TooltipContainer\\\\n      isVisible={boolean(\'isVisible\', false)}\\\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\\\n    >\\\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\\\n        const styles: React.CSSProperties = {\\\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\\\n          background: \'#1f73b7\',\\\\n          padding: \'10px\',\\\\n          margin: \'6px 0\',\\\\n          color: \'#fff\'\\\\n        };\\\\n\\\\n        return (\\\\n          <>\\\\n            <div\\\\n              {...getTooltipProps({\\\\n                ref: tooltipRef,\\\\n                style: styles\\\\n              })}\\\\n            >\\\\n              Tooltip\\\\n            </div>\\\\n            <button {...getTriggerProps()}>Trigger</button>\\\\n          </>\\\\n        );\\\\n      }}\\\\n    </TooltipContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles\\\\n        })}\\\\n      >\\\\n        Tooltip\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const WithPopper = () => {\\\\n  const tooltipRef = useRef(null);\\\\n  const triggerRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\\\n\\\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\\\n    ...style,\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#1f73b7\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nexport const FocusableTooltip = () => {\\\\n  const tooltipRef = useRef(null);\\\\n\\\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\\\n    isVisible: boolean(\'isVisible\', false),\\\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\\\n  });\\\\n\\\\n  const styles: React.CSSProperties = {\\\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\\\n    background: \'#000\',\\\\n    padding: \'10px\',\\\\n    margin: \'6px 0\',\\\\n    color: \'#fff\'\\\\n  };\\\\n\\\\n  return (\\\\n    <>\\\\n      <button {...getTriggerProps()}>Trigger</button>\\\\n      <div\\\\n        {...getTooltipProps({\\\\n          ref: tooltipRef,\\\\n          style: styles,\\\\n          onFocus: () => openTooltip(),\\\\n          onBlur: () => closeTooltip(0)\\\\n        })}\\\\n      >\\\\n        Focusable tooltip, tab to this <button>button</button>\\\\n      </div>\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'TooltipContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useTooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTooltip\\\\\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithPopper.story = {\\\\n  name: \'positioning via Popper.js\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrate the \\\\\\\\`useTooltip\\\\\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nFocusableTooltip.story = {\\\\n  name: \'with focusable tooltip\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Tooltip Container\',\\\\n  decorators: [withKnobs],\\\\n  component: TooltipContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"tooltip-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":47}},\\"tooltip-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":49},\\"endLoc\\":{\\"col\\":1,\\"line\\":78},\\"startBody\\":{\\"col\\":20,\\"line\\":49},\\"endBody\\":{\\"col\\":1,\\"line\\":78}},\\"tooltip-container--with-popper\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":105},\\"startBody\\":{\\"col\\":26,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":105}},\\"tooltip-container--focusable-tooltip\\":{\\"startLoc\\":{\\"col\\":32,\\"line\\":107},\\"endLoc\\":{\\"col\\":1,\\"line\\":138},\\"startBody\\":{\\"col\\":32,\\"line\\":107},\\"endBody\\":{\\"col\\":1,\\"line\\":138}}}},\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  },};\\n","locationsMap":{"tooltip-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":69},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":69}},"tooltip-container--hook":{"startLoc":{"col":20,"line":71},"endLoc":{"col":139,"line":100},"startBody":{"col":20,"line":71},"endBody":{"col":139,"line":100}},"tooltip-container--with-popper":{"startLoc":{"col":26,"line":102},"endLoc":{"col":139,"line":127},"startBody":{"col":26,"line":102},"endBody":{"col":139,"line":127}},"tooltip-container--focusable-tooltip":{"startLoc":{"col":32,"line":129},"endLoc":{"col":139,"line":160},"startBody":{"col":32,"line":129},"endBody":{"col":139,"line":160}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport { withKnobs, number, boolean } from \'@storybook/addon-knobs\';\\n\\nimport { TooltipContainer, useTooltip } from \'./src\';\\nimport { usePopper } from \'../../utils/usePopper\';\\n\\nexport const Container = () => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean(\'isVisible\', false)}\\n      delayMilliseconds={number(\'Tooltip delay\', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? \'visible\' : \'hidden\',\\n          background: \'#1f73b7\',\\n          padding: \'10px\',\\n          margin: \'6px 0\',\\n          color: \'#fff\'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport const WithPopper = () => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#1f73b7\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <div style={{ display: \'flex\', alignItems: \'center\', height: \'150px\' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n};\\n\\nexport const FocusableTooltip = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean(\'isVisible\', false),\\n    delayMilliseconds: number(\'Tooltip delay\', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? \'visible\' : \'hidden\',\\n    background: \'#000\',\\n    padding: \'10px\',\\n    margin: \'6px 0\',\\n    color: \'#fff\'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'TooltipContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useTooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: \'positioning via Popper.js\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it\'s broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: \'with focusable tooltip\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Tooltip Container\',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  }\\n};\\n","locationsMap":{"tooltip-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":47},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":47}},"tooltip-container--hook":{"startLoc":{"col":20,"line":49},"endLoc":{"col":1,"line":78},"startBody":{"col":20,"line":49},"endBody":{"col":1,"line":78}},"tooltip-container--with-popper":{"startLoc":{"col":26,"line":80},"endLoc":{"col":1,"line":105},"startBody":{"col":26,"line":80},"endBody":{"col":1,"line":105}},"tooltip-container--focusable-tooltip":{"startLoc":{"col":32,"line":107},"endLoc":{"col":1,"line":138},"startBody":{"col":32,"line":107},"endBody":{"col":1,"line":138}}}},\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\n  },};\n',locationsMap:{"tooltip-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:91},startBody:{col:25,line:58},endBody:{col:277,line:91}},"tooltip-container--hook":{startLoc:{col:20,line:93},endLoc:{col:277,line:122},startBody:{col:20,line:93},endBody:{col:277,line:122}},"tooltip-container--with-popper":{startLoc:{col:26,line:124},endLoc:{col:277,line:149},startBody:{col:26,line:124},endBody:{col:277,line:149}},"tooltip-container--focusable-tooltip":{startLoc:{col:32,line:151},endLoc:{col:277,line:182},startBody:{col:32,line:151},endBody:{col:277,line:182}}}}},_parameters.storySource={source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/tooltip\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from 'react';\\nimport { withKnobs, number, boolean } from '@storybook/addon-knobs';\\n\\nimport { TooltipContainer, useTooltip } from './src';\\nimport { usePopper } from '../../utils/usePopper';\\n\\nexport const Container = () => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean('isVisible', false)}\\n      delayMilliseconds={number('Tooltip delay', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? 'visible' : 'hidden',\\n          background: '#1f73b7',\\n          padding: '10px',\\n          margin: '6px 0',\\n          color: '#fff'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#1f73b7',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport const WithPopper = () => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#1f73b7',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <div style={{ display: 'flex', alignItems: 'center', height: '150px' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n};\\n\\nexport const FocusableTooltip = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#000',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'TooltipContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTooltip',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: 'positioning via Popper.js',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it's broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: 'with focusable tooltip',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tooltip Container',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"tooltip-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":47},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":47}},\"tooltip-container--hook\":{\"startLoc\":{\"col\":20,\"line\":49},\"endLoc\":{\"col\":1,\"line\":78},\"startBody\":{\"col\":20,\"line\":49},\"endBody\":{\"col\":1,\"line\":78}},\"tooltip-container--with-popper\":{\"startLoc\":{\"col\":26,\"line\":80},\"endLoc\":{\"col\":1,\"line\":105},\"startBody\":{\"col\":26,\"line\":80},\"endBody\":{\"col\":1,\"line\":105}},\"tooltip-container--focusable-tooltip\":{\"startLoc\":{\"col\":32,\"line\":107},\"endLoc\":{\"col\":1,\"line\":138},\"startBody\":{\"col\":32,\"line\":107},\"endBody\":{\"col\":1,\"line\":138}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/tooltip.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from 'react';\nimport { withKnobs, number, boolean } from '@storybook/addon-knobs';\n\nimport { TooltipContainer, useTooltip } from './src';\nimport { usePopper } from '../../utils/usePopper';\n\nexport const Container = addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  return (\n    <TooltipContainer\n      isVisible={boolean('isVisible', false)}\n      delayMilliseconds={number('Tooltip delay', 500)}\n    >\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\n        const styles: React.CSSProperties = {\n          visibility: isVisible ? 'visible' : 'hidden',\n          background: '#1f73b7',\n          padding: '10px',\n          margin: '6px 0',\n          color: '#fff'\n        };\n\n        return (\n          <>\n            <div\n              {...getTooltipProps({\n                ref: tooltipRef,\n                style: styles\n              })}\n            >\n              Tooltip\n            </div>\n            <button {...getTriggerProps()}>Trigger</button>\n          </>\n        );\n      }}\n    </TooltipContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#1f73b7',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles\n        })}\n      >\n        Tooltip\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const WithPopper = addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n  const triggerRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\n\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\n    ...style,\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#1f73b7',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', height: '150px' }}>\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const FocusableTooltip = addSourceDecorator(() => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#000',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles,\n          onFocus: () => openTooltip(),\n          onBlur: () => closeTooltip(0)\n        })}\n      >\n        Focusable tooltip, tab to this <button>button</button>\n      </div>\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'TooltipContainer'\n};\n\nHook.story = {\n  name: 'useTooltip',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTooltip\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\n    }\n  }\n};\n\nWithPopper.story = {\n  name: 'positioning via Popper.js',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrate the \\`useTooltip\\` hook in combination with Popper.js for positioning. And it's broken`\n    }\n  }\n};\n\nFocusableTooltip.story = {\n  name: 'with focusable tooltip',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\n    }\n  }\n};\n\nexport default {\n  title: 'Tooltip Container',\n  decorators: [withKnobs],\n  component: TooltipContainer,\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from 'react';\\nimport { withKnobs, number, boolean } from '@storybook/addon-knobs';\\n\\nimport { TooltipContainer, useTooltip } from './src';\\nimport { usePopper } from '../../utils/usePopper';\\n\\nexport const Container = () => {\\n  const tooltipRef = useRef(null);\\n\\n  return (\\n    <TooltipContainer\\n      isVisible={boolean('isVisible', false)}\\n      delayMilliseconds={number('Tooltip delay', 500)}\\n    >\\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\\n        const styles: React.CSSProperties = {\\n          visibility: isVisible ? 'visible' : 'hidden',\\n          background: '#1f73b7',\\n          padding: '10px',\\n          margin: '6px 0',\\n          color: '#fff'\\n        };\\n\\n        return (\\n          <>\\n            <div\\n              {...getTooltipProps({\\n                ref: tooltipRef,\\n                style: styles\\n              })}\\n            >\\n              Tooltip\\n            </div>\\n            <button {...getTriggerProps()}>Trigger</button>\\n          </>\\n        );\\n      }}\\n    </TooltipContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#1f73b7',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles\\n        })}\\n      >\\n        Tooltip\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport const WithPopper = () => {\\n  const tooltipRef = useRef(null);\\n  const triggerRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\\n\\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\\n    ...style,\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#1f73b7',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <div style={{ display: 'flex', alignItems: 'center', height: '150px' }}>\\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\\n    </div>\\n  );\\n};\\n\\nexport const FocusableTooltip = () => {\\n  const tooltipRef = useRef(null);\\n\\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\\n    isVisible: boolean('isVisible', false),\\n    delayMilliseconds: number('Tooltip delay', 500)\\n  });\\n\\n  const styles: React.CSSProperties = {\\n    visibility: isVisible ? 'visible' : 'hidden',\\n    background: '#000',\\n    padding: '10px',\\n    margin: '6px 0',\\n    color: '#fff'\\n  };\\n\\n  return (\\n    <>\\n      <button {...getTriggerProps()}>Trigger</button>\\n      <div\\n        {...getTooltipProps({\\n          ref: tooltipRef,\\n          style: styles,\\n          onFocus: () => openTooltip(),\\n          onBlur: () => closeTooltip(0)\\n        })}\\n      >\\n        Focusable tooltip, tab to this <button>button</button>\\n      </div>\\n    </>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'TooltipContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTooltip',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTooltip\\\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\\n    }\\n  }\\n};\\n\\nWithPopper.story = {\\n  name: 'positioning via Popper.js',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrate the \\\\`useTooltip\\\\` hook in combination with Popper.js for positioning. And it's broken`\\n    }\\n  }\\n};\\n\\nFocusableTooltip.story = {\\n  name: 'with focusable tooltip',\\n  parameters: {\\n    docs: {\\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tooltip Container',\\n  decorators: [withKnobs],\\n  component: TooltipContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"tooltip-container--container\":{\"startLoc\":{\"col\":25,\"line\":14},\"endLoc\":{\"col\":1,\"line\":47},\"startBody\":{\"col\":25,\"line\":14},\"endBody\":{\"col\":1,\"line\":47}},\"tooltip-container--hook\":{\"startLoc\":{\"col\":20,\"line\":49},\"endLoc\":{\"col\":1,\"line\":78},\"startBody\":{\"col\":20,\"line\":49},\"endBody\":{\"col\":1,\"line\":78}},\"tooltip-container--with-popper\":{\"startLoc\":{\"col\":26,\"line\":80},\"endLoc\":{\"col\":1,\"line\":105},\"startBody\":{\"col\":26,\"line\":80},\"endBody\":{\"col\":1,\"line\":105}},\"tooltip-container--focusable-tooltip\":{\"startLoc\":{\"col\":32,\"line\":107},\"endLoc\":{\"col\":1,\"line\":138},\"startBody\":{\"col\":32,\"line\":107},\"endBody\":{\"col\":1,\"line\":138}}}},\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\n  },};\n",locationsMap:{"tooltip-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:69},startBody:{col:25,line:36},endBody:{col:139,line:69}},"tooltip-container--hook":{startLoc:{col:20,line:71},endLoc:{col:139,line:100},startBody:{col:20,line:71},endBody:{col:139,line:100}},"tooltip-container--with-popper":{startLoc:{col:26,line:102},endLoc:{col:139,line:127},startBody:{col:26,line:102},endBody:{col:139,line:127}},"tooltip-container--focusable-tooltip":{startLoc:{col:32,line:129},endLoc:{col:139,line:160},startBody:{col:32,line:129},endBody:{col:139,line:160}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from 'react';\nimport { withKnobs, number, boolean } from '@storybook/addon-knobs';\n\nimport { TooltipContainer, useTooltip } from './src';\nimport { usePopper } from '../../utils/usePopper';\n\nexport const Container = () => {\n  const tooltipRef = useRef(null);\n\n  return (\n    <TooltipContainer\n      isVisible={boolean('isVisible', false)}\n      delayMilliseconds={number('Tooltip delay', 500)}\n    >\n      {({ isVisible, getTooltipProps, getTriggerProps }) => {\n        const styles: React.CSSProperties = {\n          visibility: isVisible ? 'visible' : 'hidden',\n          background: '#1f73b7',\n          padding: '10px',\n          margin: '6px 0',\n          color: '#fff'\n        };\n\n        return (\n          <>\n            <div\n              {...getTooltipProps({\n                ref: tooltipRef,\n                style: styles\n              })}\n            >\n              Tooltip\n            </div>\n            <button {...getTriggerProps()}>Trigger</button>\n          </>\n        );\n      }}\n    </TooltipContainer>\n  );\n};\n\nexport const Hook = () => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#1f73b7',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles\n        })}\n      >\n        Tooltip\n      </div>\n    </>\n  );\n};\n\nexport const WithPopper = () => {\n  const tooltipRef = useRef(null);\n  const triggerRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n  const { style } = usePopper({ referenceRef: triggerRef, popperRef: tooltipRef });\n\n  const styles: CSSStyleDeclaration | React.CSSProperties = {\n    ...style,\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#1f73b7',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', height: '150px' }}>\n      <div {...getTooltipProps({ ref: tooltipRef, style: styles })}>Tooltip</div>\n      <button {...(getTriggerProps({ ref: triggerRef }) as any)}>Trigger</button>\n    </div>\n  );\n};\n\nexport const FocusableTooltip = () => {\n  const tooltipRef = useRef(null);\n\n  const { isVisible, getTooltipProps, getTriggerProps, openTooltip, closeTooltip } = useTooltip({\n    isVisible: boolean('isVisible', false),\n    delayMilliseconds: number('Tooltip delay', 500)\n  });\n\n  const styles: React.CSSProperties = {\n    visibility: isVisible ? 'visible' : 'hidden',\n    background: '#000',\n    padding: '10px',\n    margin: '6px 0',\n    color: '#fff'\n  };\n\n  return (\n    <>\n      <button {...getTriggerProps()}>Trigger</button>\n      <div\n        {...getTooltipProps({\n          ref: tooltipRef,\n          style: styles,\n          onFocus: () => openTooltip(),\n          onBlur: () => closeTooltip(0)\n        })}\n      >\n        Focusable tooltip, tab to this <button>button</button>\n      </div>\n    </>\n  );\n};\n\nContainer.story = {\n  name: 'TooltipContainer'\n};\n\nHook.story = {\n  name: 'useTooltip',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTooltip\\` hook implements the [tooltip pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) and can be used to build a tooltip component.`\n    }\n  }\n};\n\nWithPopper.story = {\n  name: 'positioning via Popper.js',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrate the \\`useTooltip\\` hook in combination with Popper.js for positioning. And it's broken`\n    }\n  }\n};\n\nFocusableTooltip.story = {\n  name: 'with focusable tooltip',\n  parameters: {\n    docs: {\n      storyDescription: `This story demonstrates focusable content within the tooltip.`\n    }\n  }\n};\n\nexport default {\n  title: 'Tooltip Container',\n  decorators: [withKnobs],\n  component: TooltipContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useTooltip hook.`\n  }\n};\n",locationsMap:{"tooltip-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:47},startBody:{col:25,line:14},endBody:{col:1,line:47}},"tooltip-container--hook":{startLoc:{col:20,line:49},endLoc:{col:1,line:78},startBody:{col:20,line:49},endBody:{col:1,line:78}},"tooltip-container--with-popper":{startLoc:{col:26,line:80},endLoc:{col:1,line:105},startBody:{col:26,line:80},endBody:{col:1,line:105}},"tooltip-container--focusable-tooltip":{startLoc:{col:32,line:107},endLoc:{col:1,line:138},startBody:{col:32,line:107},endBody:{col:1,line:138}}}},_parameters.componentSubtitle="A container component which wraps the useTooltip hook.",_parameters)}},2813:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(1384),__webpack_require__(45),__webpack_require__(234);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),objectWithoutPropertiesLoose=__webpack_require__(292),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),esm_extends=(__webpack_require__(813),__webpack_require__(2787),__webpack_require__(2788),__webpack_require__(587)),hooks=__webpack_require__(2843),index_esm=__webpack_require__(3);function useAccordion(_temp){var _ref=void 0===_temp?{}:_temp,idPrefix=_ref.idPrefix,expandedSections=_ref.expandedSections,onChange=_ref.onChange,_ref$expandable=_ref.expandable,expandable=void 0===_ref$expandable||_ref$expandable,_ref$collapsible=_ref.collapsible,collapsible=void 0===_ref$collapsible||_ref$collapsible,isControlled=null!=expandedSections,seed=Object(hooks.a)(),prefix=Object(react.useState)(idPrefix||seed("accordion_storybook"))[0],TRIGGER_ID=prefix+"--trigger",PANEL_ID=prefix+"--panel",_useState2=Object(react.useState)([0]),expandedState=_useState2[0],setExpandedState=_useState2[1],controlledExpandedState=Object(index_esm.c)(expandedSections,expandedState),_useState3=Object(react.useState)(collapsible?[]:expandedState),disabledState=_useState3[0],setDisabledState=_useState3[1],sectionIndices=[],toggle=function(index){var expanded=[],disabled=[];sectionIndices.forEach((function(sectionIndex){var isExpanded=!1;sectionIndex===index?isExpanded=!collapsible||-1===expandedState.indexOf(sectionIndex):expandable&&(isExpanded=-1!==expandedState.indexOf(sectionIndex)),isExpanded&&(expanded.push(sectionIndex),collapsible||disabled.push(sectionIndex))})),onChange&&onChange(index),!1===isControlled&&setExpandedState(expanded),setDisabledState(disabled)};return{getHeaderProps:function(_temp2){var _ref2=void 0===_temp2?{}:_temp2,_ref2$role=_ref2.role,role=void 0===_ref2$role?"heading":_ref2$role,ariaLevel=_ref2.ariaLevel,props=Object(objectWithoutPropertiesLoose.a)(_ref2,["role","ariaLevel"]);if(void 0===ariaLevel)throw new Error("Accessibility Error: You must apply the `ariaLevel` prop to the element that contains your heading.");return Object(esm_extends.a)({role:role,"aria-level":ariaLevel,"data-garden-container-id":"containers.accordion","data-garden-container-version":"storybook"},props)},getTriggerProps:function(_temp3){var _ref3=void 0===_temp3?{}:_temp3,index=_ref3.index,_ref3$role=_ref3.role,role=void 0===_ref3$role?"button":_ref3$role,_ref3$tabIndex=_ref3.tabIndex,tabIndex=void 0===_ref3$tabIndex?0:_ref3$tabIndex,props=Object(objectWithoutPropertiesLoose.a)(_ref3,["index","role","tabIndex"]);if(void 0===index)throw new Error("Accessibility Error: You must provide an `index` option to `getTriggerProps()`");return sectionIndices.push(index),Object(esm_extends.a)({id:TRIGGER_ID+":"+index,role:role,tabIndex:tabIndex,"aria-controls":PANEL_ID+":"+index,"aria-disabled":-1!==disabledState.indexOf(index),"aria-expanded":isControlled?controlledExpandedState.includes(index):expandedState.includes(index),onClick:Object(index_esm.b)(props.onClick,(function(){return toggle(index)})),onKeyDown:Object(index_esm.b)(props.onKeyDown,(function(event){event.keyCode!==index_esm.a.SPACE&&event.keyCode!==index_esm.a.ENTER||(toggle(index),event.preventDefault())}))},props)},getPanelProps:function(_temp4){var _ref4=void 0===_temp4?{}:_temp4,index=_ref4.index,_ref4$role=_ref4.role,role=void 0===_ref4$role?"region":_ref4$role,props=Object(objectWithoutPropertiesLoose.a)(_ref4,["index","role"]);if(void 0===index)throw new Error("Accessibility Error: You must provide an `index` option to `getSectionProps()`");return Object(esm_extends.a)({id:PANEL_ID+":"+index,role:role,"aria-hidden":isControlled?!controlledExpandedState.includes(index):!expandedState.includes(index),"aria-labelledby":TRIGGER_ID+":"+index},props)},expandedSections:controlledExpandedState,disabledSections:disabledState}}var AccordionContainer=function(props){var children=props.children,_props$render=props.render,render=void 0===_props$render?children:_props$render,options=Object(objectWithoutPropertiesLoose.a)(props,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(useAccordion(options))))};AccordionContainer.defaultProps={expandable:!0,collapsible:!0},AccordionContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,expandedSections:prop_types_default.a.array,expandable:prop_types_default.a.bool,collapsible:prop_types_default.a.bool,idPrefix:prop_types_default.a.string},AccordionContainer.__docgenInfo={description:"",methods:[],displayName:"AccordionContainer",props:{expandable:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Determines if multiple panels can be expanded at the same time in an uncontrolled accordion"},collapsible:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Determines if panels can be collapsed in an uncontrolled accordion"},children:{type:{name:"func"},required:!1,description:"A children render prop function which receives accordion state and prop getters"},render:{type:{name:"func"},required:!1,description:"A render prop function which receives accordion state and prop getters"},expandedSections:{type:{name:"array"},required:!1,description:"Determines which sections are expanded in a controlled accordion"},idPrefix:{type:{name:"string"},required:!1,description:"Prefixes IDs for the accordion trigger and panels"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/accordion/src/AccordionContainer.tsx"]={name:"AccordionContainer",docgenInfo:AccordionContainer.__docgenInfo,path:"packages/accordion/src/AccordionContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/accordion",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/accordion";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/accordion\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, CSSProperties } from \'react\';\\\\n\\\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\\\n\\\\nconst visuallyHidden: CSSProperties = {\\\\n  position: \'absolute\',\\\\n  border: \'0\',\\\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\\\n  padding: \'0\',\\\\n  width: \'1px\',\\\\n  height: \'1px\',\\\\n  overflow: \'hidden\',\\\\n  whiteSpace: \'nowrap\'\\\\n};\\\\n\\\\nexport const Container = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\\\n      {({\\\\n        getHeaderProps,\\\\n        getTriggerProps,\\\\n        getPanelProps,\\\\n        expandedSections,\\\\n        disabledSections\\\\n      }: IUseAccordionReturnValue) => (\\\\n        <div style={{ width: 300 }}>\\\\n          {sections.map((section, index) => {\\\\n            const disabled = disabledSections.indexOf(index) !== -1;\\\\n            const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n            return (\\\\n              <div key={index}>\\\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\\\n                  <div\\\\n                    {...getTriggerProps({\\\\n                      index,\\\\n                      disabled,\\\\n                      style: {\\\\n                        WebkitAppearance: \'button\',\\\\n                        border: \'1px solid\',\\\\n                        opacity: disabled ? 0.4 : 1,\\\\n                        padding: 1,\\\\n                        cursor: \'pointer\'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {`Trigger ${index + 1}`}\\\\n                  </div>\\\\n                </div>\\\\n                <p\\\\n                  {...getPanelProps({\\\\n                    index,\\\\n                    style: hidden ? visuallyHidden : null\\\\n                  })}\\\\n                >\\\\n                  {`[Panel ${index + 1}] `}\\\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n                </p>\\\\n              </div>\\\\n            );\\\\n          })}\\\\n        </div>\\\\n      )}\\\\n    </AccordionContainer>\\\\n  );\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\\\n    const {\\\\n      getHeaderProps,\\\\n      getTriggerProps,\\\\n      getPanelProps,\\\\n      expandedSections,\\\\n      disabledSections\\\\n    } = useAccordion({ expandable, collapsible });\\\\n\\\\n    return (\\\\n      <div style={{ width: 300 }}>\\\\n        {sections.map((section, index) => {\\\\n          const disabled = disabledSections.indexOf(index) !== -1;\\\\n          const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n          return (\\\\n            <div key={index}>\\\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\\\n                <button\\\\n                  {...getTriggerProps({\\\\n                    index,\\\\n                    role: null,\\\\n                    tabIndex: null,\\\\n                    disabled,\\\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\\\n                  })}\\\\n                >\\\\n                  {`Trigger ${index + 1}`}\\\\n                </button>\\\\n              </h2>\\\\n              <section\\\\n                {...getPanelProps({\\\\n                  index,\\\\n                  role: null,\\\\n                  style: hidden ? visuallyHidden : null\\\\n                })}\\\\n              >\\\\n                {`[Panel ${index + 1}] `}\\\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n              </section>\\\\n            </div>\\\\n          );\\\\n        })}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'AccordionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: `useAccordion`,\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useAccordion\\\\\\\\` hook manages toggle state and required accessibility\\\\n      attributes for a group of sections.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  component: AccordionContainer,\\\\n  title: \'Accordion Container\',\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"accordion-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":24},\\"endLoc\\":{\\"col\\":1,\\"line\\":87},\\"startBody\\":{\\"col\\":25,\\"line\\":24},\\"endBody\\":{\\"col\\":1,\\"line\\":87}},\\"accordion-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":89},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":89},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/accordion.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from \'react\';\\n\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: \'absolute\',\\n  border: \'0\',\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\n  padding: \'0\',\\n  width: \'1px\',\\n  height: \'1px\',\\n  overflow: \'hidden\',\\n  whiteSpace: \'nowrap\'\\n};\\n\\nexport const Container = addSourceDecorator(() => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: \'button\',\\n                        border: \'1px solid\',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: \'pointer\'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'AccordionContainer\'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: \'Accordion Container\',\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, CSSProperties } from \'react\';\\\\n\\\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\\\n\\\\nconst visuallyHidden: CSSProperties = {\\\\n  position: \'absolute\',\\\\n  border: \'0\',\\\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\\\n  padding: \'0\',\\\\n  width: \'1px\',\\\\n  height: \'1px\',\\\\n  overflow: \'hidden\',\\\\n  whiteSpace: \'nowrap\'\\\\n};\\\\n\\\\nexport const Container = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\\\n      {({\\\\n        getHeaderProps,\\\\n        getTriggerProps,\\\\n        getPanelProps,\\\\n        expandedSections,\\\\n        disabledSections\\\\n      }: IUseAccordionReturnValue) => (\\\\n        <div style={{ width: 300 }}>\\\\n          {sections.map((section, index) => {\\\\n            const disabled = disabledSections.indexOf(index) !== -1;\\\\n            const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n            return (\\\\n              <div key={index}>\\\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\\\n                  <div\\\\n                    {...getTriggerProps({\\\\n                      index,\\\\n                      disabled,\\\\n                      style: {\\\\n                        WebkitAppearance: \'button\',\\\\n                        border: \'1px solid\',\\\\n                        opacity: disabled ? 0.4 : 1,\\\\n                        padding: 1,\\\\n                        cursor: \'pointer\'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {`Trigger ${index + 1}`}\\\\n                  </div>\\\\n                </div>\\\\n                <p\\\\n                  {...getPanelProps({\\\\n                    index,\\\\n                    style: hidden ? visuallyHidden : null\\\\n                  })}\\\\n                >\\\\n                  {`[Panel ${index + 1}] `}\\\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n                </p>\\\\n              </div>\\\\n            );\\\\n          })}\\\\n        </div>\\\\n      )}\\\\n    </AccordionContainer>\\\\n  );\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\\\n    const {\\\\n      getHeaderProps,\\\\n      getTriggerProps,\\\\n      getPanelProps,\\\\n      expandedSections,\\\\n      disabledSections\\\\n    } = useAccordion({ expandable, collapsible });\\\\n\\\\n    return (\\\\n      <div style={{ width: 300 }}>\\\\n        {sections.map((section, index) => {\\\\n          const disabled = disabledSections.indexOf(index) !== -1;\\\\n          const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n          return (\\\\n            <div key={index}>\\\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\\\n                <button\\\\n                  {...getTriggerProps({\\\\n                    index,\\\\n                    role: null,\\\\n                    tabIndex: null,\\\\n                    disabled,\\\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\\\n                  })}\\\\n                >\\\\n                  {`Trigger ${index + 1}`}\\\\n                </button>\\\\n              </h2>\\\\n              <section\\\\n                {...getPanelProps({\\\\n                  index,\\\\n                  role: null,\\\\n                  style: hidden ? visuallyHidden : null\\\\n                })}\\\\n              >\\\\n                {`[Panel ${index + 1}] `}\\\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n              </section>\\\\n            </div>\\\\n          );\\\\n        })}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'AccordionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: `useAccordion`,\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useAccordion\\\\\\\\` hook manages toggle state and required accessibility\\\\n      attributes for a group of sections.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  component: AccordionContainer,\\\\n  title: \'Accordion Container\',\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"accordion-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":24},\\"endLoc\\":{\\"col\\":1,\\"line\\":87},\\"startBody\\":{\\"col\\":25,\\"line\\":24},\\"endBody\\":{\\"col\\":1,\\"line\\":87}},\\"accordion-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":89},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":89},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}}},\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"accordion-container--container":{"startLoc":{"col":25,"line":46},"endLoc":{"col":139,"line":109},"startBody":{"col":25,"line":46},"endBody":{"col":139,"line":109}},"accordion-container--hook":{"startLoc":{"col":20,"line":111},"endLoc":{"col":139,"line":171},"startBody":{"col":20,"line":111},"endBody":{"col":139,"line":171}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/accordion.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/accordion";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from \'react\';\\n\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: \'absolute\',\\n  border: \'0\',\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\n  padding: \'0\',\\n  width: \'1px\',\\n  height: \'1px\',\\n  overflow: \'hidden\',\\n  whiteSpace: \'nowrap\'\\n};\\n\\nexport const Container = () => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: \'button\',\\n                        border: \'1px solid\',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: \'pointer\'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'AccordionContainer\'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: \'Accordion Container\',\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"accordion-container--container":{"startLoc":{"col":25,"line":24},"endLoc":{"col":1,"line":87},"startBody":{"col":25,"line":24},"endBody":{"col":1,"line":87}},"accordion-container--hook":{"startLoc":{"col":20,"line":89},"endLoc":{"col":1,"line":149},"startBody":{"col":20,"line":89},"endBody":{"col":1,"line":149}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/accordion.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, CSSProperties } from \'react\';\n\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\n\nconst visuallyHidden: CSSProperties = {\n  position: \'absolute\',\n  border: \'0\',\n  clip: \'rect(1px, 1px, 1px, 1px)\',\n  padding: \'0\',\n  width: \'1px\',\n  height: \'1px\',\n  overflow: \'hidden\',\n  whiteSpace: \'nowrap\'\n};\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\n      {({\n        getHeaderProps,\n        getTriggerProps,\n        getPanelProps,\n        expandedSections,\n        disabledSections\n      }: IUseAccordionReturnValue) => (\n        <div style={{ width: 300 }}>\n          {sections.map((section, index) => {\n            const disabled = disabledSections.indexOf(index) !== -1;\n            const hidden = expandedSections.indexOf(index) === -1;\n\n            return (\n              <div key={index}>\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\n                  <div\n                    {...getTriggerProps({\n                      index,\n                      disabled,\n                      style: {\n                        WebkitAppearance: \'button\',\n                        border: \'1px solid\',\n                        opacity: disabled ? 0.4 : 1,\n                        padding: 1,\n                        cursor: \'pointer\'\n                      }\n                    })}\n                  >\n                    {`Trigger ${index + 1}`}\n                  </div>\n                </div>\n                <p\n                  {...getPanelProps({\n                    index,\n                    style: hidden ? visuallyHidden : null\n                  })}\n                >\n                  {`[Panel ${index + 1}] `}\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </AccordionContainer>\n  );\n\n  return (\n    <Accordion\n      expandable={boolean(\'Expandable\', true)}\n      collapsible={boolean(\'Collapsible\', true)}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\n    const {\n      getHeaderProps,\n      getTriggerProps,\n      getPanelProps,\n      expandedSections,\n      disabledSections\n    } = useAccordion({ expandable, collapsible });\n\n    return (\n      <div style={{ width: 300 }}>\n        {sections.map((section, index) => {\n          const disabled = disabledSections.indexOf(index) !== -1;\n          const hidden = expandedSections.indexOf(index) === -1;\n\n          return (\n            <div key={index}>\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\n                <button\n                  {...getTriggerProps({\n                    index,\n                    role: null,\n                    tabIndex: null,\n                    disabled,\n                    style: { width: \'100%\', textAlign: \'inherit\' }\n                  })}\n                >\n                  {`Trigger ${index + 1}`}\n                </button>\n              </h2>\n              <section\n                {...getPanelProps({\n                  index,\n                  role: null,\n                  style: hidden ? visuallyHidden : null\n                })}\n              >\n                {`[Panel ${index + 1}] `}\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\n                amaranth tatsoi tomatillo melon azuki bean garlic.\n              </section>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <Accordion\n      expandable={boolean(\'Expandable\', true)}\n      collapsible={boolean(\'Collapsible\', true)}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'AccordionContainer\'\n};\n\nHook.story = {\n  name: `useAccordion`,\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useAccordion\\` hook manages toggle state and required accessibility\n      attributes for a group of sections.`\n    }\n  }\n};\n\nexport default {\n  component: AccordionContainer,\n  title: \'Accordion Container\',\n  decorators: [withKnobs],\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/accordion\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, CSSProperties } from \'react\';\\\\n\\\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\\\n\\\\nconst visuallyHidden: CSSProperties = {\\\\n  position: \'absolute\',\\\\n  border: \'0\',\\\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\\\n  padding: \'0\',\\\\n  width: \'1px\',\\\\n  height: \'1px\',\\\\n  overflow: \'hidden\',\\\\n  whiteSpace: \'nowrap\'\\\\n};\\\\n\\\\nexport const Container = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\\\n      {({\\\\n        getHeaderProps,\\\\n        getTriggerProps,\\\\n        getPanelProps,\\\\n        expandedSections,\\\\n        disabledSections\\\\n      }: IUseAccordionReturnValue) => (\\\\n        <div style={{ width: 300 }}>\\\\n          {sections.map((section, index) => {\\\\n            const disabled = disabledSections.indexOf(index) !== -1;\\\\n            const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n            return (\\\\n              <div key={index}>\\\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\\\n                  <div\\\\n                    {...getTriggerProps({\\\\n                      index,\\\\n                      disabled,\\\\n                      style: {\\\\n                        WebkitAppearance: \'button\',\\\\n                        border: \'1px solid\',\\\\n                        opacity: disabled ? 0.4 : 1,\\\\n                        padding: 1,\\\\n                        cursor: \'pointer\'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {`Trigger ${index + 1}`}\\\\n                  </div>\\\\n                </div>\\\\n                <p\\\\n                  {...getPanelProps({\\\\n                    index,\\\\n                    style: hidden ? visuallyHidden : null\\\\n                  })}\\\\n                >\\\\n                  {`[Panel ${index + 1}] `}\\\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n                </p>\\\\n              </div>\\\\n            );\\\\n          })}\\\\n        </div>\\\\n      )}\\\\n    </AccordionContainer>\\\\n  );\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\\\n    const {\\\\n      getHeaderProps,\\\\n      getTriggerProps,\\\\n      getPanelProps,\\\\n      expandedSections,\\\\n      disabledSections\\\\n    } = useAccordion({ expandable, collapsible });\\\\n\\\\n    return (\\\\n      <div style={{ width: 300 }}>\\\\n        {sections.map((section, index) => {\\\\n          const disabled = disabledSections.indexOf(index) !== -1;\\\\n          const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n          return (\\\\n            <div key={index}>\\\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\\\n                <button\\\\n                  {...getTriggerProps({\\\\n                    index,\\\\n                    role: null,\\\\n                    tabIndex: null,\\\\n                    disabled,\\\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\\\n                  })}\\\\n                >\\\\n                  {`Trigger ${index + 1}`}\\\\n                </button>\\\\n              </h2>\\\\n              <section\\\\n                {...getPanelProps({\\\\n                  index,\\\\n                  role: null,\\\\n                  style: hidden ? visuallyHidden : null\\\\n                })}\\\\n              >\\\\n                {`[Panel ${index + 1}] `}\\\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n              </section>\\\\n            </div>\\\\n          );\\\\n        })}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'AccordionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: `useAccordion`,\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useAccordion\\\\\\\\` hook manages toggle state and required accessibility\\\\n      attributes for a group of sections.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  component: AccordionContainer,\\\\n  title: \'Accordion Container\',\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"accordion-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":24},\\"endLoc\\":{\\"col\\":1,\\"line\\":87},\\"startBody\\":{\\"col\\":25,\\"line\\":24},\\"endBody\\":{\\"col\\":1,\\"line\\":87}},\\"accordion-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":89},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":89},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/accordion.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from \'react\';\\n\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: \'absolute\',\\n  border: \'0\',\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\n  padding: \'0\',\\n  width: \'1px\',\\n  height: \'1px\',\\n  overflow: \'hidden\',\\n  whiteSpace: \'nowrap\'\\n};\\n\\nexport const Container = addSourceDecorator(() => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: \'button\',\\n                        border: \'1px solid\',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: \'pointer\'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'AccordionContainer\'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: \'Accordion Container\',\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, CSSProperties } from \'react\';\\\\n\\\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\\\n\\\\nconst visuallyHidden: CSSProperties = {\\\\n  position: \'absolute\',\\\\n  border: \'0\',\\\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\\\n  padding: \'0\',\\\\n  width: \'1px\',\\\\n  height: \'1px\',\\\\n  overflow: \'hidden\',\\\\n  whiteSpace: \'nowrap\'\\\\n};\\\\n\\\\nexport const Container = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\\\n      {({\\\\n        getHeaderProps,\\\\n        getTriggerProps,\\\\n        getPanelProps,\\\\n        expandedSections,\\\\n        disabledSections\\\\n      }: IUseAccordionReturnValue) => (\\\\n        <div style={{ width: 300 }}>\\\\n          {sections.map((section, index) => {\\\\n            const disabled = disabledSections.indexOf(index) !== -1;\\\\n            const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n            return (\\\\n              <div key={index}>\\\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\\\n                  <div\\\\n                    {...getTriggerProps({\\\\n                      index,\\\\n                      disabled,\\\\n                      style: {\\\\n                        WebkitAppearance: \'button\',\\\\n                        border: \'1px solid\',\\\\n                        opacity: disabled ? 0.4 : 1,\\\\n                        padding: 1,\\\\n                        cursor: \'pointer\'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {`Trigger ${index + 1}`}\\\\n                  </div>\\\\n                </div>\\\\n                <p\\\\n                  {...getPanelProps({\\\\n                    index,\\\\n                    style: hidden ? visuallyHidden : null\\\\n                  })}\\\\n                >\\\\n                  {`[Panel ${index + 1}] `}\\\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n                </p>\\\\n              </div>\\\\n            );\\\\n          })}\\\\n        </div>\\\\n      )}\\\\n    </AccordionContainer>\\\\n  );\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\\\n    const {\\\\n      getHeaderProps,\\\\n      getTriggerProps,\\\\n      getPanelProps,\\\\n      expandedSections,\\\\n      disabledSections\\\\n    } = useAccordion({ expandable, collapsible });\\\\n\\\\n    return (\\\\n      <div style={{ width: 300 }}>\\\\n        {sections.map((section, index) => {\\\\n          const disabled = disabledSections.indexOf(index) !== -1;\\\\n          const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n          return (\\\\n            <div key={index}>\\\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\\\n                <button\\\\n                  {...getTriggerProps({\\\\n                    index,\\\\n                    role: null,\\\\n                    tabIndex: null,\\\\n                    disabled,\\\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\\\n                  })}\\\\n                >\\\\n                  {`Trigger ${index + 1}`}\\\\n                </button>\\\\n              </h2>\\\\n              <section\\\\n                {...getPanelProps({\\\\n                  index,\\\\n                  role: null,\\\\n                  style: hidden ? visuallyHidden : null\\\\n                })}\\\\n              >\\\\n                {`[Panel ${index + 1}] `}\\\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n              </section>\\\\n            </div>\\\\n          );\\\\n        })}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'AccordionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: `useAccordion`,\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useAccordion\\\\\\\\` hook manages toggle state and required accessibility\\\\n      attributes for a group of sections.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  component: AccordionContainer,\\\\n  title: \'Accordion Container\',\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"accordion-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":24},\\"endLoc\\":{\\"col\\":1,\\"line\\":87},\\"startBody\\":{\\"col\\":25,\\"line\\":24},\\"endBody\\":{\\"col\\":1,\\"line\\":87}},\\"accordion-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":89},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":89},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}}},\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  },};\\n","locationsMap":{"accordion-container--container":{"startLoc":{"col":25,"line":46},"endLoc":{"col":139,"line":109},"startBody":{"col":25,"line":46},"endBody":{"col":139,"line":109}},"accordion-container--hook":{"startLoc":{"col":20,"line":111},"endLoc":{"col":139,"line":171},"startBody":{"col":20,"line":111},"endBody":{"col":139,"line":171}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from \'react\';\\n\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: \'absolute\',\\n  border: \'0\',\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\n  padding: \'0\',\\n  width: \'1px\',\\n  height: \'1px\',\\n  overflow: \'hidden\',\\n  whiteSpace: \'nowrap\'\\n};\\n\\nexport const Container = () => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: \'button\',\\n                        border: \'1px solid\',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: \'pointer\'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'AccordionContainer\'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: \'Accordion Container\',\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  }\\n};\\n","locationsMap":{"accordion-container--container":{"startLoc":{"col":25,"line":24},"endLoc":{"col":1,"line":87},"startBody":{"col":25,"line":24},"endBody":{"col":1,"line":87}},"accordion-container--hook":{"startLoc":{"col":20,"line":89},"endLoc":{"col":1,"line":149},"startBody":{"col":20,"line":89},"endBody":{"col":1,"line":149}}}},\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\n  },};\n',__ADDS_MAP__={"accordion-container--container":{startLoc:{col:25,line:68},endLoc:{col:277,line:131},startBody:{col:25,line:68},endBody:{col:277,line:131}},"accordion-container--hook":{startLoc:{col:20,line:133},endLoc:{col:277,line:193},startBody:{col:20,line:133},endBody:{col:277,line:193}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},visuallyHidden=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/accordion",__STORY__="\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/accordion\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from 'react';\\n\\nimport { boolean, number, withKnobs } from '@storybook/addon-knobs';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from './src';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: 'absolute',\\n  border: '0',\\n  clip: 'rect(1px, 1px, 1px, 1px)',\\n  padding: '0',\\n  width: '1px',\\n  height: '1px',\\n  overflow: 'hidden',\\n  whiteSpace: 'nowrap'\\n};\\n\\nexport const Container = () => {\\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: 'button',\\n                        border: '1px solid',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: 'pointer'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean('Expandable', true)}\\n      collapsible={boolean('Collapsible', true)}\\n    />\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: '100%', textAlign: 'inherit' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean('Expandable', true)}\\n      collapsible={boolean('Collapsible', true)}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'AccordionContainer'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: 'Accordion Container',\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"accordion-container--container\":{\"startLoc\":{\"col\":25,\"line\":24},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":25,\"line\":24},\"endBody\":{\"col\":1,\"line\":87}},\"accordion-container--hook\":{\"startLoc\":{\"col\":20,\"line\":89},\"endLoc\":{\"col\":1,\"line\":149},\"startBody\":{\"col\":20,\"line\":89},\"endBody\":{\"col\":1,\"line\":149}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/accordion.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, CSSProperties } from 'react';\n\nimport { boolean, number, withKnobs } from '@storybook/addon-knobs';\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from './src';\n\nconst visuallyHidden: CSSProperties = {\n  position: 'absolute',\n  border: '0',\n  clip: 'rect(1px, 1px, 1px, 1px)',\n  padding: '0',\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap'\n};\n\nexport const Container = addSourceDecorator(() => {\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\n      {({\n        getHeaderProps,\n        getTriggerProps,\n        getPanelProps,\n        expandedSections,\n        disabledSections\n      }: IUseAccordionReturnValue) => (\n        <div style={{ width: 300 }}>\n          {sections.map((section, index) => {\n            const disabled = disabledSections.indexOf(index) !== -1;\n            const hidden = expandedSections.indexOf(index) === -1;\n\n            return (\n              <div key={index}>\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\n                  <div\n                    {...getTriggerProps({\n                      index,\n                      disabled,\n                      style: {\n                        WebkitAppearance: 'button',\n                        border: '1px solid',\n                        opacity: disabled ? 0.4 : 1,\n                        padding: 1,\n                        cursor: 'pointer'\n                      }\n                    })}\n                  >\n                    {`Trigger ${index + 1}`}\n                  </div>\n                </div>\n                <p\n                  {...getPanelProps({\n                    index,\n                    style: hidden ? visuallyHidden : null\n                  })}\n                >\n                  {`[Panel ${index + 1}] `}\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </AccordionContainer>\n  );\n\n  return (\n    <Accordion\n      expandable={boolean('Expandable', true)}\n      collapsible={boolean('Collapsible', true)}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\n    const {\n      getHeaderProps,\n      getTriggerProps,\n      getPanelProps,\n      expandedSections,\n      disabledSections\n    } = useAccordion({ expandable, collapsible });\n\n    return (\n      <div style={{ width: 300 }}>\n        {sections.map((section, index) => {\n          const disabled = disabledSections.indexOf(index) !== -1;\n          const hidden = expandedSections.indexOf(index) === -1;\n\n          return (\n            <div key={index}>\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\n                <button\n                  {...getTriggerProps({\n                    index,\n                    role: null,\n                    tabIndex: null,\n                    disabled,\n                    style: { width: '100%', textAlign: 'inherit' }\n                  })}\n                >\n                  {`Trigger ${index + 1}`}\n                </button>\n              </h2>\n              <section\n                {...getPanelProps({\n                  index,\n                  role: null,\n                  style: hidden ? visuallyHidden : null\n                })}\n              >\n                {`[Panel ${index + 1}] `}\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\n                amaranth tatsoi tomatillo melon azuki bean garlic.\n              </section>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <Accordion\n      expandable={boolean('Expandable', true)}\n      collapsible={boolean('Collapsible', true)}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'AccordionContainer'\n};\n\nHook.story = {\n  name: `useAccordion`,\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useAccordion\\` hook manages toggle state and required accessibility\n      attributes for a group of sections.`\n    }\n  }\n};\n\nexport default {\n  component: AccordionContainer,\n  title: 'Accordion Container',\n  decorators: [withKnobs],\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from 'react';\\n\\nimport { boolean, number, withKnobs } from '@storybook/addon-knobs';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from './src';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: 'absolute',\\n  border: '0',\\n  clip: 'rect(1px, 1px, 1px, 1px)',\\n  padding: '0',\\n  width: '1px',\\n  height: '1px',\\n  overflow: 'hidden',\\n  whiteSpace: 'nowrap'\\n};\\n\\nexport const Container = () => {\\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: 'button',\\n                        border: '1px solid',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: 'pointer'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean('Expandable', true)}\\n      collapsible={boolean('Collapsible', true)}\\n    />\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: '100%', textAlign: 'inherit' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean('Expandable', true)}\\n      collapsible={boolean('Collapsible', true)}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'AccordionContainer'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: 'Accordion Container',\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"accordion-container--container\":{\"startLoc\":{\"col\":25,\"line\":24},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":25,\"line\":24},\"endBody\":{\"col\":1,\"line\":87}},\"accordion-container--hook\":{\"startLoc\":{\"col\":20,\"line\":89},\"endLoc\":{\"col\":1,\"line\":149},\"startBody\":{\"col\":20,\"line\":89},\"endBody\":{\"col\":1,\"line\":149}}}},\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\n  },};\n",__ADDS_MAP__={"accordion-container--container":{startLoc:{col:25,line:46},endLoc:{col:139,line:109},startBody:{col:25,line:46},endBody:{col:139,line:109}},"accordion-container--hook":{startLoc:{col:20,line:111},endLoc:{col:139,line:171},startBody:{col:20,line:111},endBody:{col:139,line:171}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,{position:"absolute",border:"0",clip:"rect(1px, 1px, 1px, 1px)",padding:"0",width:"1px",height:"1px",overflow:"hidden",whiteSpace:"nowrap"}),Container=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var size=Object(dist.number)("Sections",5,{range:!0,min:1,max:9}),sections=Array(size).fill(void 0).map((function(){return Object(react.createRef)()}));return(react_default.a.createElement((function(_temp){var _ref=void 0===_temp?{}:_temp,_ref$expandable=_ref.expandable,expandable=void 0===_ref$expandable||_ref$expandable,_ref$collapsible=_ref.collapsible,collapsible=void 0===_ref$collapsible||_ref$collapsible;return(react_default.a.createElement(AccordionContainer,{expandable:expandable,collapsible:collapsible},(function(_ref2){var getHeaderProps=_ref2.getHeaderProps,getTriggerProps=_ref2.getTriggerProps,getPanelProps=_ref2.getPanelProps,expandedSections=_ref2.expandedSections,disabledSections=_ref2.disabledSections;return(react_default.a.createElement("div",{style:{width:300}},sections.map((function(section,index){var disabled=-1!==disabledSections.indexOf(index),hidden=-1===expandedSections.indexOf(index);return(react_default.a.createElement("div",{key:index},react_default.a.createElement("div",getHeaderProps({ariaLevel:2}),react_default.a.createElement("div",getTriggerProps({index:index,disabled:disabled,style:{WebkitAppearance:"button",border:"1px solid",opacity:disabled?.4:1,padding:1,cursor:"pointer"}}),"Trigger "+(index+1))),react_default.a.createElement("p",getPanelProps({index:index,style:hidden?visuallyHidden:null}),"[Panel "+(index+1)+"] ","Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.")))}))))})))}),{expandable:Object(dist.boolean)("Expandable",!0),collapsible:Object(dist.boolean)("Collapsible",!0)}))}),{__STORY__:__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, CSSProperties } from 'react';\n\nimport { boolean, number, withKnobs } from '@storybook/addon-knobs';\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from './src';\n\nconst visuallyHidden: CSSProperties = {\n  position: 'absolute',\n  border: '0',\n  clip: 'rect(1px, 1px, 1px, 1px)',\n  padding: '0',\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap'\n};\n\nexport const Container = () => {\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\n      {({\n        getHeaderProps,\n        getTriggerProps,\n        getPanelProps,\n        expandedSections,\n        disabledSections\n      }: IUseAccordionReturnValue) => (\n        <div style={{ width: 300 }}>\n          {sections.map((section, index) => {\n            const disabled = disabledSections.indexOf(index) !== -1;\n            const hidden = expandedSections.indexOf(index) === -1;\n\n            return (\n              <div key={index}>\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\n                  <div\n                    {...getTriggerProps({\n                      index,\n                      disabled,\n                      style: {\n                        WebkitAppearance: 'button',\n                        border: '1px solid',\n                        opacity: disabled ? 0.4 : 1,\n                        padding: 1,\n                        cursor: 'pointer'\n                      }\n                    })}\n                  >\n                    {`Trigger ${index + 1}`}\n                  </div>\n                </div>\n                <p\n                  {...getPanelProps({\n                    index,\n                    style: hidden ? visuallyHidden : null\n                  })}\n                >\n                  {`[Panel ${index + 1}] `}\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </AccordionContainer>\n  );\n\n  return (\n    <Accordion\n      expandable={boolean('Expandable', true)}\n      collapsible={boolean('Collapsible', true)}\n    />\n  );\n};\n\nexport const Hook = () => {\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\n    const {\n      getHeaderProps,\n      getTriggerProps,\n      getPanelProps,\n      expandedSections,\n      disabledSections\n    } = useAccordion({ expandable, collapsible });\n\n    return (\n      <div style={{ width: 300 }}>\n        {sections.map((section, index) => {\n          const disabled = disabledSections.indexOf(index) !== -1;\n          const hidden = expandedSections.indexOf(index) === -1;\n\n          return (\n            <div key={index}>\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\n                <button\n                  {...getTriggerProps({\n                    index,\n                    role: null,\n                    tabIndex: null,\n                    disabled,\n                    style: { width: '100%', textAlign: 'inherit' }\n                  })}\n                >\n                  {`Trigger ${index + 1}`}\n                </button>\n              </h2>\n              <section\n                {...getPanelProps({\n                  index,\n                  role: null,\n                  style: hidden ? visuallyHidden : null\n                })}\n              >\n                {`[Panel ${index + 1}] `}\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\n                amaranth tatsoi tomatillo melon azuki bean garlic.\n              </section>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <Accordion\n      expandable={boolean('Expandable', true)}\n      collapsible={boolean('Collapsible', true)}\n    />\n  );\n};\n\nContainer.story = {\n  name: 'AccordionContainer'\n};\n\nHook.story = {\n  name: `useAccordion`,\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useAccordion\\` hook manages toggle state and required accessibility\n      attributes for a group of sections.`\n    }\n  }\n};\n\nexport default {\n  component: AccordionContainer,\n  title: 'Accordion Container',\n  decorators: [withKnobs],\n  parameters: {\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\n  }\n};\n",__ADDS_MAP__:__ADDS_MAP__={"accordion-container--container":{startLoc:{col:25,line:24},endLoc:{col:1,line:87},startBody:{col:25,line:24},endBody:{col:1,line:87}},"accordion-container--hook":{startLoc:{col:20,line:89},endLoc:{col:1,line:149},startBody:{col:20,line:89},endBody:{col:1,line:149}}},__MAIN_FILE_LOCATION__:"/accordion.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/home/circleci/project/packages/accordion",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/accordion.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/accordion.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var size=Object(dist.number)("Sections",5,{range:!0,min:1,max:9}),sections=Array(size).fill(void 0).map((function(){return Object(react.createRef)()}));return(react_default.a.createElement((function(_temp2){var _ref3=void 0===_temp2?{}:_temp2,_ref3$expandable=_ref3.expandable,expandable=void 0===_ref3$expandable||_ref3$expandable,_ref3$collapsible=_ref3.collapsible,_useAccordion=useAccordion({expandable:expandable,collapsible:void 0===_ref3$collapsible||_ref3$collapsible}),getHeaderProps=_useAccordion.getHeaderProps,getTriggerProps=_useAccordion.getTriggerProps,getPanelProps=_useAccordion.getPanelProps,expandedSections=_useAccordion.expandedSections,disabledSections=_useAccordion.disabledSections;return(react_default.a.createElement("div",{style:{width:300}},sections.map((function(section,index){var disabled=-1!==disabledSections.indexOf(index),hidden=-1===expandedSections.indexOf(index);return(react_default.a.createElement("div",{key:index},react_default.a.createElement("h2",getHeaderProps({role:null,ariaLevel:null}),react_default.a.createElement("button",getTriggerProps({index:index,role:null,tabIndex:null,disabled:disabled,style:{width:"100%",textAlign:"inherit"}}),"Trigger "+(index+1))),react_default.a.createElement("section",getPanelProps({index:index,role:null,style:hidden?visuallyHidden:null}),"[Panel "+(index+1)+"] ","Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.")))}))))}),{expandable:Object(dist.boolean)("Expandable",!0),collapsible:Object(dist.boolean)("Collapsible",!0)}))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/accordion.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/accordion.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/accordion.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"AccordionContainer"},Hook.story={name:"useAccordion",parameters:{docs:{storyDescription:"The `useAccordion` hook manages toggle state and required accessibility\n      attributes for a group of sections."}}};__webpack_exports__.default={component:AccordionContainer,title:"Accordion Container",decorators:[dist.withKnobs],parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/accordion";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/accordion\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, CSSProperties } from \'react\';\\\\n\\\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\\\n\\\\nconst visuallyHidden: CSSProperties = {\\\\n  position: \'absolute\',\\\\n  border: \'0\',\\\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\\\n  padding: \'0\',\\\\n  width: \'1px\',\\\\n  height: \'1px\',\\\\n  overflow: \'hidden\',\\\\n  whiteSpace: \'nowrap\'\\\\n};\\\\n\\\\nexport const Container = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\\\n      {({\\\\n        getHeaderProps,\\\\n        getTriggerProps,\\\\n        getPanelProps,\\\\n        expandedSections,\\\\n        disabledSections\\\\n      }: IUseAccordionReturnValue) => (\\\\n        <div style={{ width: 300 }}>\\\\n          {sections.map((section, index) => {\\\\n            const disabled = disabledSections.indexOf(index) !== -1;\\\\n            const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n            return (\\\\n              <div key={index}>\\\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\\\n                  <div\\\\n                    {...getTriggerProps({\\\\n                      index,\\\\n                      disabled,\\\\n                      style: {\\\\n                        WebkitAppearance: \'button\',\\\\n                        border: \'1px solid\',\\\\n                        opacity: disabled ? 0.4 : 1,\\\\n                        padding: 1,\\\\n                        cursor: \'pointer\'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {`Trigger ${index + 1}`}\\\\n                  </div>\\\\n                </div>\\\\n                <p\\\\n                  {...getPanelProps({\\\\n                    index,\\\\n                    style: hidden ? visuallyHidden : null\\\\n                  })}\\\\n                >\\\\n                  {`[Panel ${index + 1}] `}\\\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n                </p>\\\\n              </div>\\\\n            );\\\\n          })}\\\\n        </div>\\\\n      )}\\\\n    </AccordionContainer>\\\\n  );\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\\\n    const {\\\\n      getHeaderProps,\\\\n      getTriggerProps,\\\\n      getPanelProps,\\\\n      expandedSections,\\\\n      disabledSections\\\\n    } = useAccordion({ expandable, collapsible });\\\\n\\\\n    return (\\\\n      <div style={{ width: 300 }}>\\\\n        {sections.map((section, index) => {\\\\n          const disabled = disabledSections.indexOf(index) !== -1;\\\\n          const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n          return (\\\\n            <div key={index}>\\\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\\\n                <button\\\\n                  {...getTriggerProps({\\\\n                    index,\\\\n                    role: null,\\\\n                    tabIndex: null,\\\\n                    disabled,\\\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\\\n                  })}\\\\n                >\\\\n                  {`Trigger ${index + 1}`}\\\\n                </button>\\\\n              </h2>\\\\n              <section\\\\n                {...getPanelProps({\\\\n                  index,\\\\n                  role: null,\\\\n                  style: hidden ? visuallyHidden : null\\\\n                })}\\\\n              >\\\\n                {`[Panel ${index + 1}] `}\\\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n              </section>\\\\n            </div>\\\\n          );\\\\n        })}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'AccordionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: `useAccordion`,\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useAccordion\\\\\\\\` hook manages toggle state and required accessibility\\\\n      attributes for a group of sections.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  component: AccordionContainer,\\\\n  title: \'Accordion Container\',\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"accordion-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":24},\\"endLoc\\":{\\"col\\":1,\\"line\\":87},\\"startBody\\":{\\"col\\":25,\\"line\\":24},\\"endBody\\":{\\"col\\":1,\\"line\\":87}},\\"accordion-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":89},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":89},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/accordion.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from \'react\';\\n\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: \'absolute\',\\n  border: \'0\',\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\n  padding: \'0\',\\n  width: \'1px\',\\n  height: \'1px\',\\n  overflow: \'hidden\',\\n  whiteSpace: \'nowrap\'\\n};\\n\\nexport const Container = addSourceDecorator(() => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: \'button\',\\n                        border: \'1px solid\',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: \'pointer\'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'AccordionContainer\'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: \'Accordion Container\',\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, CSSProperties } from \'react\';\\\\n\\\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\\\n\\\\nconst visuallyHidden: CSSProperties = {\\\\n  position: \'absolute\',\\\\n  border: \'0\',\\\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\\\n  padding: \'0\',\\\\n  width: \'1px\',\\\\n  height: \'1px\',\\\\n  overflow: \'hidden\',\\\\n  whiteSpace: \'nowrap\'\\\\n};\\\\n\\\\nexport const Container = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\\\n      {({\\\\n        getHeaderProps,\\\\n        getTriggerProps,\\\\n        getPanelProps,\\\\n        expandedSections,\\\\n        disabledSections\\\\n      }: IUseAccordionReturnValue) => (\\\\n        <div style={{ width: 300 }}>\\\\n          {sections.map((section, index) => {\\\\n            const disabled = disabledSections.indexOf(index) !== -1;\\\\n            const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n            return (\\\\n              <div key={index}>\\\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\\\n                  <div\\\\n                    {...getTriggerProps({\\\\n                      index,\\\\n                      disabled,\\\\n                      style: {\\\\n                        WebkitAppearance: \'button\',\\\\n                        border: \'1px solid\',\\\\n                        opacity: disabled ? 0.4 : 1,\\\\n                        padding: 1,\\\\n                        cursor: \'pointer\'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {`Trigger ${index + 1}`}\\\\n                  </div>\\\\n                </div>\\\\n                <p\\\\n                  {...getPanelProps({\\\\n                    index,\\\\n                    style: hidden ? visuallyHidden : null\\\\n                  })}\\\\n                >\\\\n                  {`[Panel ${index + 1}] `}\\\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n                </p>\\\\n              </div>\\\\n            );\\\\n          })}\\\\n        </div>\\\\n      )}\\\\n    </AccordionContainer>\\\\n  );\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\\\n    const {\\\\n      getHeaderProps,\\\\n      getTriggerProps,\\\\n      getPanelProps,\\\\n      expandedSections,\\\\n      disabledSections\\\\n    } = useAccordion({ expandable, collapsible });\\\\n\\\\n    return (\\\\n      <div style={{ width: 300 }}>\\\\n        {sections.map((section, index) => {\\\\n          const disabled = disabledSections.indexOf(index) !== -1;\\\\n          const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n          return (\\\\n            <div key={index}>\\\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\\\n                <button\\\\n                  {...getTriggerProps({\\\\n                    index,\\\\n                    role: null,\\\\n                    tabIndex: null,\\\\n                    disabled,\\\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\\\n                  })}\\\\n                >\\\\n                  {`Trigger ${index + 1}`}\\\\n                </button>\\\\n              </h2>\\\\n              <section\\\\n                {...getPanelProps({\\\\n                  index,\\\\n                  role: null,\\\\n                  style: hidden ? visuallyHidden : null\\\\n                })}\\\\n              >\\\\n                {`[Panel ${index + 1}] `}\\\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n              </section>\\\\n            </div>\\\\n          );\\\\n        })}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'AccordionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: `useAccordion`,\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useAccordion\\\\\\\\` hook manages toggle state and required accessibility\\\\n      attributes for a group of sections.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  component: AccordionContainer,\\\\n  title: \'Accordion Container\',\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"accordion-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":24},\\"endLoc\\":{\\"col\\":1,\\"line\\":87},\\"startBody\\":{\\"col\\":25,\\"line\\":24},\\"endBody\\":{\\"col\\":1,\\"line\\":87}},\\"accordion-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":89},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":89},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}}},\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"accordion-container--container":{"startLoc":{"col":25,"line":46},"endLoc":{"col":139,"line":109},"startBody":{"col":25,"line":46},"endBody":{"col":139,"line":109}},"accordion-container--hook":{"startLoc":{"col":20,"line":111},"endLoc":{"col":139,"line":171},"startBody":{"col":20,"line":111},"endBody":{"col":139,"line":171}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/accordion.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/accordion";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from \'react\';\\n\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: \'absolute\',\\n  border: \'0\',\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\n  padding: \'0\',\\n  width: \'1px\',\\n  height: \'1px\',\\n  overflow: \'hidden\',\\n  whiteSpace: \'nowrap\'\\n};\\n\\nexport const Container = () => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: \'button\',\\n                        border: \'1px solid\',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: \'pointer\'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'AccordionContainer\'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: \'Accordion Container\',\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"accordion-container--container":{"startLoc":{"col":25,"line":24},"endLoc":{"col":1,"line":87},"startBody":{"col":25,"line":24},"endBody":{"col":1,"line":87}},"accordion-container--hook":{"startLoc":{"col":20,"line":89},"endLoc":{"col":1,"line":149},"startBody":{"col":20,"line":89},"endBody":{"col":1,"line":149}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/accordion.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, CSSProperties } from \'react\';\n\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\n\nconst visuallyHidden: CSSProperties = {\n  position: \'absolute\',\n  border: \'0\',\n  clip: \'rect(1px, 1px, 1px, 1px)\',\n  padding: \'0\',\n  width: \'1px\',\n  height: \'1px\',\n  overflow: \'hidden\',\n  whiteSpace: \'nowrap\'\n};\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\n      {({\n        getHeaderProps,\n        getTriggerProps,\n        getPanelProps,\n        expandedSections,\n        disabledSections\n      }: IUseAccordionReturnValue) => (\n        <div style={{ width: 300 }}>\n          {sections.map((section, index) => {\n            const disabled = disabledSections.indexOf(index) !== -1;\n            const hidden = expandedSections.indexOf(index) === -1;\n\n            return (\n              <div key={index}>\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\n                  <div\n                    {...getTriggerProps({\n                      index,\n                      disabled,\n                      style: {\n                        WebkitAppearance: \'button\',\n                        border: \'1px solid\',\n                        opacity: disabled ? 0.4 : 1,\n                        padding: 1,\n                        cursor: \'pointer\'\n                      }\n                    })}\n                  >\n                    {`Trigger ${index + 1}`}\n                  </div>\n                </div>\n                <p\n                  {...getPanelProps({\n                    index,\n                    style: hidden ? visuallyHidden : null\n                  })}\n                >\n                  {`[Panel ${index + 1}] `}\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </AccordionContainer>\n  );\n\n  return (\n    <Accordion\n      expandable={boolean(\'Expandable\', true)}\n      collapsible={boolean(\'Collapsible\', true)}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\n    const {\n      getHeaderProps,\n      getTriggerProps,\n      getPanelProps,\n      expandedSections,\n      disabledSections\n    } = useAccordion({ expandable, collapsible });\n\n    return (\n      <div style={{ width: 300 }}>\n        {sections.map((section, index) => {\n          const disabled = disabledSections.indexOf(index) !== -1;\n          const hidden = expandedSections.indexOf(index) === -1;\n\n          return (\n            <div key={index}>\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\n                <button\n                  {...getTriggerProps({\n                    index,\n                    role: null,\n                    tabIndex: null,\n                    disabled,\n                    style: { width: \'100%\', textAlign: \'inherit\' }\n                  })}\n                >\n                  {`Trigger ${index + 1}`}\n                </button>\n              </h2>\n              <section\n                {...getPanelProps({\n                  index,\n                  role: null,\n                  style: hidden ? visuallyHidden : null\n                })}\n              >\n                {`[Panel ${index + 1}] `}\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\n                amaranth tatsoi tomatillo melon azuki bean garlic.\n              </section>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <Accordion\n      expandable={boolean(\'Expandable\', true)}\n      collapsible={boolean(\'Collapsible\', true)}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'AccordionContainer\'\n};\n\nHook.story = {\n  name: `useAccordion`,\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useAccordion\\` hook manages toggle state and required accessibility\n      attributes for a group of sections.`\n    }\n  }\n};\n\nexport default {\n  component: AccordionContainer,\n  title: \'Accordion Container\',\n  decorators: [withKnobs],\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/accordion\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, CSSProperties } from \'react\';\\\\n\\\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\\\n\\\\nconst visuallyHidden: CSSProperties = {\\\\n  position: \'absolute\',\\\\n  border: \'0\',\\\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\\\n  padding: \'0\',\\\\n  width: \'1px\',\\\\n  height: \'1px\',\\\\n  overflow: \'hidden\',\\\\n  whiteSpace: \'nowrap\'\\\\n};\\\\n\\\\nexport const Container = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\\\n      {({\\\\n        getHeaderProps,\\\\n        getTriggerProps,\\\\n        getPanelProps,\\\\n        expandedSections,\\\\n        disabledSections\\\\n      }: IUseAccordionReturnValue) => (\\\\n        <div style={{ width: 300 }}>\\\\n          {sections.map((section, index) => {\\\\n            const disabled = disabledSections.indexOf(index) !== -1;\\\\n            const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n            return (\\\\n              <div key={index}>\\\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\\\n                  <div\\\\n                    {...getTriggerProps({\\\\n                      index,\\\\n                      disabled,\\\\n                      style: {\\\\n                        WebkitAppearance: \'button\',\\\\n                        border: \'1px solid\',\\\\n                        opacity: disabled ? 0.4 : 1,\\\\n                        padding: 1,\\\\n                        cursor: \'pointer\'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {`Trigger ${index + 1}`}\\\\n                  </div>\\\\n                </div>\\\\n                <p\\\\n                  {...getPanelProps({\\\\n                    index,\\\\n                    style: hidden ? visuallyHidden : null\\\\n                  })}\\\\n                >\\\\n                  {`[Panel ${index + 1}] `}\\\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n                </p>\\\\n              </div>\\\\n            );\\\\n          })}\\\\n        </div>\\\\n      )}\\\\n    </AccordionContainer>\\\\n  );\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\\\n    const {\\\\n      getHeaderProps,\\\\n      getTriggerProps,\\\\n      getPanelProps,\\\\n      expandedSections,\\\\n      disabledSections\\\\n    } = useAccordion({ expandable, collapsible });\\\\n\\\\n    return (\\\\n      <div style={{ width: 300 }}>\\\\n        {sections.map((section, index) => {\\\\n          const disabled = disabledSections.indexOf(index) !== -1;\\\\n          const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n          return (\\\\n            <div key={index}>\\\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\\\n                <button\\\\n                  {...getTriggerProps({\\\\n                    index,\\\\n                    role: null,\\\\n                    tabIndex: null,\\\\n                    disabled,\\\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\\\n                  })}\\\\n                >\\\\n                  {`Trigger ${index + 1}`}\\\\n                </button>\\\\n              </h2>\\\\n              <section\\\\n                {...getPanelProps({\\\\n                  index,\\\\n                  role: null,\\\\n                  style: hidden ? visuallyHidden : null\\\\n                })}\\\\n              >\\\\n                {`[Panel ${index + 1}] `}\\\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n              </section>\\\\n            </div>\\\\n          );\\\\n        })}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'AccordionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: `useAccordion`,\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useAccordion\\\\\\\\` hook manages toggle state and required accessibility\\\\n      attributes for a group of sections.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  component: AccordionContainer,\\\\n  title: \'Accordion Container\',\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"accordion-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":24},\\"endLoc\\":{\\"col\\":1,\\"line\\":87},\\"startBody\\":{\\"col\\":25,\\"line\\":24},\\"endBody\\":{\\"col\\":1,\\"line\\":87}},\\"accordion-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":89},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":89},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/accordion.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from \'react\';\\n\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: \'absolute\',\\n  border: \'0\',\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\n  padding: \'0\',\\n  width: \'1px\',\\n  height: \'1px\',\\n  overflow: \'hidden\',\\n  whiteSpace: \'nowrap\'\\n};\\n\\nexport const Container = addSourceDecorator(() => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: \'button\',\\n                        border: \'1px solid\',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: \'pointer\'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'AccordionContainer\'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: \'Accordion Container\',\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, CSSProperties } from \'react\';\\\\n\\\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\\\n\\\\nconst visuallyHidden: CSSProperties = {\\\\n  position: \'absolute\',\\\\n  border: \'0\',\\\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\\\n  padding: \'0\',\\\\n  width: \'1px\',\\\\n  height: \'1px\',\\\\n  overflow: \'hidden\',\\\\n  whiteSpace: \'nowrap\'\\\\n};\\\\n\\\\nexport const Container = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\\\n      {({\\\\n        getHeaderProps,\\\\n        getTriggerProps,\\\\n        getPanelProps,\\\\n        expandedSections,\\\\n        disabledSections\\\\n      }: IUseAccordionReturnValue) => (\\\\n        <div style={{ width: 300 }}>\\\\n          {sections.map((section, index) => {\\\\n            const disabled = disabledSections.indexOf(index) !== -1;\\\\n            const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n            return (\\\\n              <div key={index}>\\\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\\\n                  <div\\\\n                    {...getTriggerProps({\\\\n                      index,\\\\n                      disabled,\\\\n                      style: {\\\\n                        WebkitAppearance: \'button\',\\\\n                        border: \'1px solid\',\\\\n                        opacity: disabled ? 0.4 : 1,\\\\n                        padding: 1,\\\\n                        cursor: \'pointer\'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {`Trigger ${index + 1}`}\\\\n                  </div>\\\\n                </div>\\\\n                <p\\\\n                  {...getPanelProps({\\\\n                    index,\\\\n                    style: hidden ? visuallyHidden : null\\\\n                  })}\\\\n                >\\\\n                  {`[Panel ${index + 1}] `}\\\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n                </p>\\\\n              </div>\\\\n            );\\\\n          })}\\\\n        </div>\\\\n      )}\\\\n    </AccordionContainer>\\\\n  );\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\\\n  const sections = Array(size)\\\\n    .fill(undefined)\\\\n    .map(() => createRef());\\\\n\\\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\\\n    const {\\\\n      getHeaderProps,\\\\n      getTriggerProps,\\\\n      getPanelProps,\\\\n      expandedSections,\\\\n      disabledSections\\\\n    } = useAccordion({ expandable, collapsible });\\\\n\\\\n    return (\\\\n      <div style={{ width: 300 }}>\\\\n        {sections.map((section, index) => {\\\\n          const disabled = disabledSections.indexOf(index) !== -1;\\\\n          const hidden = expandedSections.indexOf(index) === -1;\\\\n\\\\n          return (\\\\n            <div key={index}>\\\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\\\n                <button\\\\n                  {...getTriggerProps({\\\\n                    index,\\\\n                    role: null,\\\\n                    tabIndex: null,\\\\n                    disabled,\\\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\\\n                  })}\\\\n                >\\\\n                  {`Trigger ${index + 1}`}\\\\n                </button>\\\\n              </h2>\\\\n              <section\\\\n                {...getPanelProps({\\\\n                  index,\\\\n                  role: null,\\\\n                  style: hidden ? visuallyHidden : null\\\\n                })}\\\\n              >\\\\n                {`[Panel ${index + 1}] `}\\\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\\\n              </section>\\\\n            </div>\\\\n          );\\\\n        })}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Accordion\\\\n      expandable={boolean(\'Expandable\', true)}\\\\n      collapsible={boolean(\'Collapsible\', true)}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'AccordionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: `useAccordion`,\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useAccordion\\\\\\\\` hook manages toggle state and required accessibility\\\\n      attributes for a group of sections.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  component: AccordionContainer,\\\\n  title: \'Accordion Container\',\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"accordion-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":24},\\"endLoc\\":{\\"col\\":1,\\"line\\":87},\\"startBody\\":{\\"col\\":25,\\"line\\":24},\\"endBody\\":{\\"col\\":1,\\"line\\":87}},\\"accordion-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":89},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":89},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}}},\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  },};\\n","locationsMap":{"accordion-container--container":{"startLoc":{"col":25,"line":46},"endLoc":{"col":139,"line":109},"startBody":{"col":25,"line":46},"endBody":{"col":139,"line":109}},"accordion-container--hook":{"startLoc":{"col":20,"line":111},"endLoc":{"col":139,"line":171},"startBody":{"col":20,"line":111},"endBody":{"col":139,"line":171}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from \'react\';\\n\\nimport { boolean, number, withKnobs } from \'@storybook/addon-knobs\';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from \'./src\';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: \'absolute\',\\n  border: \'0\',\\n  clip: \'rect(1px, 1px, 1px, 1px)\',\\n  padding: \'0\',\\n  width: \'1px\',\\n  height: \'1px\',\\n  overflow: \'hidden\',\\n  whiteSpace: \'nowrap\'\\n};\\n\\nexport const Container = () => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: \'button\',\\n                        border: \'1px solid\',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: \'pointer\'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const size = number(\'Sections\', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: \'100%\', textAlign: \'inherit\' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean(\'Expandable\', true)}\\n      collapsible={boolean(\'Collapsible\', true)}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'AccordionContainer\'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: \'Accordion Container\',\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  }\\n};\\n","locationsMap":{"accordion-container--container":{"startLoc":{"col":25,"line":24},"endLoc":{"col":1,"line":87},"startBody":{"col":25,"line":24},"endBody":{"col":1,"line":87}},"accordion-container--hook":{"startLoc":{"col":20,"line":89},"endLoc":{"col":1,"line":149},"startBody":{"col":20,"line":89},"endBody":{"col":1,"line":149}}}},\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\n  },};\n',locationsMap:{"accordion-container--container":{startLoc:{col:25,line:68},endLoc:{col:277,line:131},startBody:{col:25,line:68},endBody:{col:277,line:131}},"accordion-container--hook":{startLoc:{col:20,line:133},endLoc:{col:277,line:193},startBody:{col:20,line:133},endBody:{col:277,line:193}}}}},_parameters.storySource={source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/accordion\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from 'react';\\n\\nimport { boolean, number, withKnobs } from '@storybook/addon-knobs';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from './src';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: 'absolute',\\n  border: '0',\\n  clip: 'rect(1px, 1px, 1px, 1px)',\\n  padding: '0',\\n  width: '1px',\\n  height: '1px',\\n  overflow: 'hidden',\\n  whiteSpace: 'nowrap'\\n};\\n\\nexport const Container = () => {\\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: 'button',\\n                        border: '1px solid',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: 'pointer'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean('Expandable', true)}\\n      collapsible={boolean('Collapsible', true)}\\n    />\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: '100%', textAlign: 'inherit' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean('Expandable', true)}\\n      collapsible={boolean('Collapsible', true)}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'AccordionContainer'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: 'Accordion Container',\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"accordion-container--container\":{\"startLoc\":{\"col\":25,\"line\":24},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":25,\"line\":24},\"endBody\":{\"col\":1,\"line\":87}},\"accordion-container--hook\":{\"startLoc\":{\"col\":20,\"line\":89},\"endLoc\":{\"col\":1,\"line\":149},\"startBody\":{\"col\":20,\"line\":89},\"endBody\":{\"col\":1,\"line\":149}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/accordion.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, CSSProperties } from 'react';\n\nimport { boolean, number, withKnobs } from '@storybook/addon-knobs';\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from './src';\n\nconst visuallyHidden: CSSProperties = {\n  position: 'absolute',\n  border: '0',\n  clip: 'rect(1px, 1px, 1px, 1px)',\n  padding: '0',\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap'\n};\n\nexport const Container = addSourceDecorator(() => {\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\n      {({\n        getHeaderProps,\n        getTriggerProps,\n        getPanelProps,\n        expandedSections,\n        disabledSections\n      }: IUseAccordionReturnValue) => (\n        <div style={{ width: 300 }}>\n          {sections.map((section, index) => {\n            const disabled = disabledSections.indexOf(index) !== -1;\n            const hidden = expandedSections.indexOf(index) === -1;\n\n            return (\n              <div key={index}>\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\n                  <div\n                    {...getTriggerProps({\n                      index,\n                      disabled,\n                      style: {\n                        WebkitAppearance: 'button',\n                        border: '1px solid',\n                        opacity: disabled ? 0.4 : 1,\n                        padding: 1,\n                        cursor: 'pointer'\n                      }\n                    })}\n                  >\n                    {`Trigger ${index + 1}`}\n                  </div>\n                </div>\n                <p\n                  {...getPanelProps({\n                    index,\n                    style: hidden ? visuallyHidden : null\n                  })}\n                >\n                  {`[Panel ${index + 1}] `}\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </AccordionContainer>\n  );\n\n  return (\n    <Accordion\n      expandable={boolean('Expandable', true)}\n      collapsible={boolean('Collapsible', true)}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\n    const {\n      getHeaderProps,\n      getTriggerProps,\n      getPanelProps,\n      expandedSections,\n      disabledSections\n    } = useAccordion({ expandable, collapsible });\n\n    return (\n      <div style={{ width: 300 }}>\n        {sections.map((section, index) => {\n          const disabled = disabledSections.indexOf(index) !== -1;\n          const hidden = expandedSections.indexOf(index) === -1;\n\n          return (\n            <div key={index}>\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\n                <button\n                  {...getTriggerProps({\n                    index,\n                    role: null,\n                    tabIndex: null,\n                    disabled,\n                    style: { width: '100%', textAlign: 'inherit' }\n                  })}\n                >\n                  {`Trigger ${index + 1}`}\n                </button>\n              </h2>\n              <section\n                {...getPanelProps({\n                  index,\n                  role: null,\n                  style: hidden ? visuallyHidden : null\n                })}\n              >\n                {`[Panel ${index + 1}] `}\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\n                amaranth tatsoi tomatillo melon azuki bean garlic.\n              </section>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <Accordion\n      expandable={boolean('Expandable', true)}\n      collapsible={boolean('Collapsible', true)}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'AccordionContainer'\n};\n\nHook.story = {\n  name: `useAccordion`,\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useAccordion\\` hook manages toggle state and required accessibility\n      attributes for a group of sections.`\n    }\n  }\n};\n\nexport default {\n  component: AccordionContainer,\n  title: 'Accordion Container',\n  decorators: [withKnobs],\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, CSSProperties } from 'react';\\n\\nimport { boolean, number, withKnobs } from '@storybook/addon-knobs';\\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from './src';\\n\\nconst visuallyHidden: CSSProperties = {\\n  position: 'absolute',\\n  border: '0',\\n  clip: 'rect(1px, 1px, 1px, 1px)',\\n  padding: '0',\\n  width: '1px',\\n  height: '1px',\\n  overflow: 'hidden',\\n  whiteSpace: 'nowrap'\\n};\\n\\nexport const Container = () => {\\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\\n      {({\\n        getHeaderProps,\\n        getTriggerProps,\\n        getPanelProps,\\n        expandedSections,\\n        disabledSections\\n      }: IUseAccordionReturnValue) => (\\n        <div style={{ width: 300 }}>\\n          {sections.map((section, index) => {\\n            const disabled = disabledSections.indexOf(index) !== -1;\\n            const hidden = expandedSections.indexOf(index) === -1;\\n\\n            return (\\n              <div key={index}>\\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\\n                  <div\\n                    {...getTriggerProps({\\n                      index,\\n                      disabled,\\n                      style: {\\n                        WebkitAppearance: 'button',\\n                        border: '1px solid',\\n                        opacity: disabled ? 0.4 : 1,\\n                        padding: 1,\\n                        cursor: 'pointer'\\n                      }\\n                    })}\\n                  >\\n                    {`Trigger ${index + 1}`}\\n                  </div>\\n                </div>\\n                <p\\n                  {...getPanelProps({\\n                    index,\\n                    style: hidden ? visuallyHidden : null\\n                  })}\\n                >\\n                  {`[Panel ${index + 1}] `}\\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\\n                </p>\\n              </div>\\n            );\\n          })}\\n        </div>\\n      )}\\n    </AccordionContainer>\\n  );\\n\\n  return (\\n    <Accordion\\n      expandable={boolean('Expandable', true)}\\n      collapsible={boolean('Collapsible', true)}\\n    />\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\\n  const sections = Array(size)\\n    .fill(undefined)\\n    .map(() => createRef());\\n\\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\\n    const {\\n      getHeaderProps,\\n      getTriggerProps,\\n      getPanelProps,\\n      expandedSections,\\n      disabledSections\\n    } = useAccordion({ expandable, collapsible });\\n\\n    return (\\n      <div style={{ width: 300 }}>\\n        {sections.map((section, index) => {\\n          const disabled = disabledSections.indexOf(index) !== -1;\\n          const hidden = expandedSections.indexOf(index) === -1;\\n\\n          return (\\n            <div key={index}>\\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\\n                <button\\n                  {...getTriggerProps({\\n                    index,\\n                    role: null,\\n                    tabIndex: null,\\n                    disabled,\\n                    style: { width: '100%', textAlign: 'inherit' }\\n                  })}\\n                >\\n                  {`Trigger ${index + 1}`}\\n                </button>\\n              </h2>\\n              <section\\n                {...getPanelProps({\\n                  index,\\n                  role: null,\\n                  style: hidden ? visuallyHidden : null\\n                })}\\n              >\\n                {`[Panel ${index + 1}] `}\\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\\n                amaranth tatsoi tomatillo melon azuki bean garlic.\\n              </section>\\n            </div>\\n          );\\n        })}\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <Accordion\\n      expandable={boolean('Expandable', true)}\\n      collapsible={boolean('Collapsible', true)}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'AccordionContainer'\\n};\\n\\nHook.story = {\\n  name: `useAccordion`,\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useAccordion\\\\` hook manages toggle state and required accessibility\\n      attributes for a group of sections.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  component: AccordionContainer,\\n  title: 'Accordion Container',\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"accordion-container--container\":{\"startLoc\":{\"col\":25,\"line\":24},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":25,\"line\":24},\"endBody\":{\"col\":1,\"line\":87}},\"accordion-container--hook\":{\"startLoc\":{\"col\":20,\"line\":89},\"endLoc\":{\"col\":1,\"line\":149},\"startBody\":{\"col\":20,\"line\":89},\"endBody\":{\"col\":1,\"line\":149}}}},\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\n  },};\n",locationsMap:{"accordion-container--container":{startLoc:{col:25,line:46},endLoc:{col:139,line:109},startBody:{col:25,line:46},endBody:{col:139,line:109}},"accordion-container--hook":{startLoc:{col:20,line:111},endLoc:{col:139,line:171},startBody:{col:20,line:111},endBody:{col:139,line:171}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, CSSProperties } from 'react';\n\nimport { boolean, number, withKnobs } from '@storybook/addon-knobs';\nimport { AccordionContainer, useAccordion, IUseAccordionReturnValue } from './src';\n\nconst visuallyHidden: CSSProperties = {\n  position: 'absolute',\n  border: '0',\n  clip: 'rect(1px, 1px, 1px, 1px)',\n  padding: '0',\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  whiteSpace: 'nowrap'\n};\n\nexport const Container = () => {\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => (\n    <AccordionContainer expandable={expandable} collapsible={collapsible}>\n      {({\n        getHeaderProps,\n        getTriggerProps,\n        getPanelProps,\n        expandedSections,\n        disabledSections\n      }: IUseAccordionReturnValue) => (\n        <div style={{ width: 300 }}>\n          {sections.map((section, index) => {\n            const disabled = disabledSections.indexOf(index) !== -1;\n            const hidden = expandedSections.indexOf(index) === -1;\n\n            return (\n              <div key={index}>\n                <div {...getHeaderProps({ ariaLevel: 2 })}>\n                  <div\n                    {...getTriggerProps({\n                      index,\n                      disabled,\n                      style: {\n                        WebkitAppearance: 'button',\n                        border: '1px solid',\n                        opacity: disabled ? 0.4 : 1,\n                        padding: 1,\n                        cursor: 'pointer'\n                      }\n                    })}\n                  >\n                    {`Trigger ${index + 1}`}\n                  </div>\n                </div>\n                <p\n                  {...getPanelProps({\n                    index,\n                    style: hidden ? visuallyHidden : null\n                  })}\n                >\n                  {`[Panel ${index + 1}] `}\n                  Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion\n                  daikon amaranth tatsoi tomatillo melon azuki bean garlic.\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </AccordionContainer>\n  );\n\n  return (\n    <Accordion\n      expandable={boolean('Expandable', true)}\n      collapsible={boolean('Collapsible', true)}\n    />\n  );\n};\n\nexport const Hook = () => {\n  const size = number('Sections', 5, { range: true, min: 1, max: 9 });\n  const sections = Array(size)\n    .fill(undefined)\n    .map(() => createRef());\n\n  const Accordion = ({ expandable = true, collapsible = true } = {}) => {\n    const {\n      getHeaderProps,\n      getTriggerProps,\n      getPanelProps,\n      expandedSections,\n      disabledSections\n    } = useAccordion({ expandable, collapsible });\n\n    return (\n      <div style={{ width: 300 }}>\n        {sections.map((section, index) => {\n          const disabled = disabledSections.indexOf(index) !== -1;\n          const hidden = expandedSections.indexOf(index) === -1;\n\n          return (\n            <div key={index}>\n              <h2 {...getHeaderProps({ role: null, ariaLevel: null })}>\n                <button\n                  {...getTriggerProps({\n                    index,\n                    role: null,\n                    tabIndex: null,\n                    disabled,\n                    style: { width: '100%', textAlign: 'inherit' }\n                  })}\n                >\n                  {`Trigger ${index + 1}`}\n                </button>\n              </h2>\n              <section\n                {...getPanelProps({\n                  index,\n                  role: null,\n                  style: hidden ? visuallyHidden : null\n                })}\n              >\n                {`[Panel ${index + 1}] `}\n                Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon\n                amaranth tatsoi tomatillo melon azuki bean garlic.\n              </section>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <Accordion\n      expandable={boolean('Expandable', true)}\n      collapsible={boolean('Collapsible', true)}\n    />\n  );\n};\n\nContainer.story = {\n  name: 'AccordionContainer'\n};\n\nHook.story = {\n  name: `useAccordion`,\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useAccordion\\` hook manages toggle state and required accessibility\n      attributes for a group of sections.`\n    }\n  }\n};\n\nexport default {\n  component: AccordionContainer,\n  title: 'Accordion Container',\n  decorators: [withKnobs],\n  parameters: {\n    componentSubtitle: `A container component which wraps the useAccordion hook.`\n  }\n};\n",locationsMap:{"accordion-container--container":{startLoc:{col:25,line:24},endLoc:{col:1,line:87},startBody:{col:25,line:24},endBody:{col:1,line:87}},"accordion-container--hook":{startLoc:{col:20,line:89},endLoc:{col:1,line:149},startBody:{col:20,line:89},endBody:{col:1,line:149}}}},_parameters.componentSubtitle="A container component which wraps the useAccordion hook.",_parameters)}},2814:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),esm_extends=__webpack_require__(823),objectWithoutPropertiesLoose=__webpack_require__(1414);function useBreadcrumb(){return{getContainerProps:function(_temp){var _ref=void 0===_temp?{}:_temp,_ref$role=_ref.role,role=void 0===_ref$role?"navigation":_ref$role,other=Object(objectWithoutPropertiesLoose.a)(_ref,["role"]);return Object(esm_extends.a)({role:role,"aria-label":"Breadcrumb navigation","data-garden-container-id":"containers.breadcrumb","data-garden-container-version":"storybook"},other)},getCurrentPageProps:function(props){return void 0===props&&(props={}),Object(esm_extends.a)({"aria-current":"page"},props)}}}var BreadcrumbContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render;return(react_default.a.createElement(react_default.a.Fragment,null,render(useBreadcrumb())))};BreadcrumbContainer.propTypes={render:prop_types_default.a.func,children:prop_types_default.a.func},BreadcrumbContainer.__docgenInfo={description:"",methods:[],displayName:"BreadcrumbContainer",props:{render:{type:{name:"func"},required:!1,description:"A render prop function"},children:{type:{name:"func"},required:!1,description:"A children render prop function"}}};var src_BreadcrumbContainer=BreadcrumbContainer;"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/breadcrumb/src/BreadcrumbContainer.tsx"]={name:"BreadcrumbContainer",docgenInfo:BreadcrumbContainer.__docgenInfo,path:"packages/breadcrumb/src/BreadcrumbContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/breadcrumb",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/breadcrumb";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/breadcrumb\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <BreadcrumbContainer>\\\\n    {({ getContainerProps, getCurrentPageProps }) => (\\\\n      <div {...getContainerProps()}>\\\\n        <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n        <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\\\n      </div>\\\\n    )}\\\\n  </BreadcrumbContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\\\n\\\\n  return (\\\\n    <div {...getContainerProps()}>\\\\n      <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n      <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useBreadcrumb\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useBreadcrumb\\\\\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'BreadcrumbContainer\'\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Breadcrumb Container\',\\\\n  component: BreadcrumbContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"breadcrumb-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"breadcrumb-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":36},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":36}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/breadcrumb.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <BreadcrumbContainer>\\\\n    {({ getContainerProps, getCurrentPageProps }) => (\\\\n      <div {...getContainerProps()}>\\\\n        <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n        <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\\\n      </div>\\\\n    )}\\\\n  </BreadcrumbContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\\\n\\\\n  return (\\\\n    <div {...getContainerProps()}>\\\\n      <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n      <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useBreadcrumb\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useBreadcrumb\\\\\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'BreadcrumbContainer\'\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Breadcrumb Container\',\\\\n  component: BreadcrumbContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"breadcrumb-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"breadcrumb-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":36},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":36}}}},\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"breadcrumb-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":46},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":46}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":48},"endLoc":{"col":139,"line":58},"startBody":{"col":20,"line":48},"endBody":{"col":139,"line":58}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/breadcrumb.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/breadcrumb";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = () => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n};\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"breadcrumb-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":36},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":36}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/breadcrumb.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <BreadcrumbContainer>\n    {({ getContainerProps, getCurrentPageProps }) => (\n      <div {...getContainerProps()}>\n        <a href="#foo">Home</a>\n        <span aria-hidden="true">&gt;</span>\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\n      </div>\n    )}\n  </BreadcrumbContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\n\n  return (\n    <div {...getContainerProps()}>\n      <a href="#foo">Home</a>\n      <span aria-hidden="true">&gt;</span>\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nHook.story = {\n  name: \'useBreadcrumb\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useBreadcrumb\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\n    }\n  }\n};\n\nContainer.story = {\n  name: \'BreadcrumbContainer\'\n};\n\nexport default {\n  title: \'Breadcrumb Container\',\n  component: BreadcrumbContainer,\n  decorators: [withKnobs],\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/breadcrumb\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <BreadcrumbContainer>\\\\n    {({ getContainerProps, getCurrentPageProps }) => (\\\\n      <div {...getContainerProps()}>\\\\n        <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n        <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\\\n      </div>\\\\n    )}\\\\n  </BreadcrumbContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\\\n\\\\n  return (\\\\n    <div {...getContainerProps()}>\\\\n      <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n      <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useBreadcrumb\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useBreadcrumb\\\\\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'BreadcrumbContainer\'\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Breadcrumb Container\',\\\\n  component: BreadcrumbContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"breadcrumb-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"breadcrumb-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":36},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":36}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/breadcrumb.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <BreadcrumbContainer>\\\\n    {({ getContainerProps, getCurrentPageProps }) => (\\\\n      <div {...getContainerProps()}>\\\\n        <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n        <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\\\n      </div>\\\\n    )}\\\\n  </BreadcrumbContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\\\n\\\\n  return (\\\\n    <div {...getContainerProps()}>\\\\n      <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n      <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useBreadcrumb\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useBreadcrumb\\\\\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'BreadcrumbContainer\'\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Breadcrumb Container\',\\\\n  component: BreadcrumbContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"breadcrumb-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"breadcrumb-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":36},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":36}}}},\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  },};\\n","locationsMap":{"breadcrumb-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":46},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":46}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":48},"endLoc":{"col":139,"line":58},"startBody":{"col":20,"line":48},"endBody":{"col":139,"line":58}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = () => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n};\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  }\\n};\\n","locationsMap":{"breadcrumb-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":36},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":36}}}},\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\n  },};\n',__ADDS_MAP__={"breadcrumb-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:68},startBody:{col:25,line:58},endBody:{col:277,line:68}},"breadcrumb-container--hook":{startLoc:{col:20,line:70},endLoc:{col:277,line:80},startBody:{col:20,line:70},endBody:{col:277,line:80}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},Container=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/breadcrumb",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/breadcrumb";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = () => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n};\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"breadcrumb-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":36},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":36}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/breadcrumb.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\n\nexport const Container = addSourceDecorator(() => (\n  <BreadcrumbContainer>\n    {({ getContainerProps, getCurrentPageProps }) => (\n      <div {...getContainerProps()}>\n        <a href="#foo">Home</a>\n        <span aria-hidden="true">&gt;</span>\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\n      </div>\n    )}\n  </BreadcrumbContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\n\n  return (\n    <div {...getContainerProps()}>\n      <a href="#foo">Home</a>\n      <span aria-hidden="true">&gt;</span>\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nHook.story = {\n  name: \'useBreadcrumb\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useBreadcrumb\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\n    }\n  }\n};\n\nContainer.story = {\n  name: \'BreadcrumbContainer\'\n};\n\nexport default {\n  title: \'Breadcrumb Container\',\n  component: BreadcrumbContainer,\n  decorators: [withKnobs],\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = () => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n};\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  }\\n};\\n","locationsMap":{"breadcrumb-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":36},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":36}}}},\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\n  },};\n',__ADDS_MAP__={"breadcrumb-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:46},startBody:{col:25,line:36},endBody:{col:139,line:46}},"breadcrumb-container--hook":{startLoc:{col:20,line:48},endLoc:{col:139,line:58},startBody:{col:20,line:48},endBody:{col:139,line:58}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(2).withSource,(addSourceDecorator=__webpack_require__(2).addSource)(addSourceDecorator(addSourceDecorator((function(){return react_default.a.createElement(src_BreadcrumbContainer,null,(function(_ref){var getContainerProps=_ref.getContainerProps,getCurrentPageProps=_ref.getCurrentPageProps;return(react_default.a.createElement("div",getContainerProps(),react_default.a.createElement("a",{href:"#foo"},"Home"),react_default.a.createElement("span",{"aria-hidden":"true"},">"),react_default.a.createElement("a",getCurrentPageProps({href:"#foo"}),"Items")))}))}),{__STORY__:__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { BreadcrumbContainer, useBreadcrumb } from './src';\n\nexport const Container = () => (\n  <BreadcrumbContainer>\n    {({ getContainerProps, getCurrentPageProps }) => (\n      <div {...getContainerProps()}>\n        <a href=\"#foo\">Home</a>\n        <span aria-hidden=\"true\">&gt;</span>\n        <a {...getCurrentPageProps({ href: '#foo' })}>Items</a>\n      </div>\n    )}\n  </BreadcrumbContainer>\n);\n\nexport const Hook = () => {\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\n\n  return (\n    <div {...getContainerProps()}>\n      <a href=\"#foo\">Home</a>\n      <span aria-hidden=\"true\">&gt;</span>\n      <a {...getCurrentPageProps({ href: '#' })}>Items</a>\n    </div>\n  );\n};\n\nHook.story = {\n  name: 'useBreadcrumb',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useBreadcrumb\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\n    }\n  }\n};\n\nContainer.story = {\n  name: 'BreadcrumbContainer'\n};\n\nexport default {\n  title: 'Breadcrumb Container',\n  component: BreadcrumbContainer,\n  decorators: [withKnobs],\n  parameters: {\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\n  }\n};\n",__ADDS_MAP__:__ADDS_MAP__={"breadcrumb-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:24},startBody:{col:25,line:14},endBody:{col:1,line:24}},"breadcrumb-container--hook":{startLoc:{col:20,line:26},endLoc:{col:1,line:36},startBody:{col:20,line:26},endBody:{col:1,line:36}}},__MAIN_FILE_LOCATION__:"/breadcrumb.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/home/circleci/project/packages/breadcrumb",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/breadcrumb.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/breadcrumb.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var _useBreadcrumb=useBreadcrumb(),getContainerProps=_useBreadcrumb.getContainerProps,getCurrentPageProps=_useBreadcrumb.getCurrentPageProps;return(react_default.a.createElement("div",getContainerProps(),react_default.a.createElement("a",{href:"#foo"},"Home"),react_default.a.createElement("span",{"aria-hidden":"true"},">"),react_default.a.createElement("a",getCurrentPageProps({href:"#"}),"Items")))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/breadcrumb.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/breadcrumb.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/breadcrumb.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Hook.story={name:"useBreadcrumb",parameters:{docs:{storyDescription:"The `useBreadcrumb` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component."}}},Container.story={name:"BreadcrumbContainer"};__webpack_exports__.default={title:"Breadcrumb Container",component:src_BreadcrumbContainer,decorators:[dist.withKnobs],parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/breadcrumb";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/breadcrumb\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <BreadcrumbContainer>\\\\n    {({ getContainerProps, getCurrentPageProps }) => (\\\\n      <div {...getContainerProps()}>\\\\n        <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n        <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\\\n      </div>\\\\n    )}\\\\n  </BreadcrumbContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\\\n\\\\n  return (\\\\n    <div {...getContainerProps()}>\\\\n      <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n      <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useBreadcrumb\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useBreadcrumb\\\\\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'BreadcrumbContainer\'\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Breadcrumb Container\',\\\\n  component: BreadcrumbContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"breadcrumb-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"breadcrumb-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":36},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":36}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/breadcrumb.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <BreadcrumbContainer>\\\\n    {({ getContainerProps, getCurrentPageProps }) => (\\\\n      <div {...getContainerProps()}>\\\\n        <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n        <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\\\n      </div>\\\\n    )}\\\\n  </BreadcrumbContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\\\n\\\\n  return (\\\\n    <div {...getContainerProps()}>\\\\n      <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n      <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useBreadcrumb\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useBreadcrumb\\\\\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'BreadcrumbContainer\'\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Breadcrumb Container\',\\\\n  component: BreadcrumbContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"breadcrumb-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"breadcrumb-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":36},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":36}}}},\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"breadcrumb-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":46},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":46}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":48},"endLoc":{"col":139,"line":58},"startBody":{"col":20,"line":48},"endBody":{"col":139,"line":58}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/breadcrumb.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/breadcrumb";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = () => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n};\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"breadcrumb-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":36},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":36}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/breadcrumb.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <BreadcrumbContainer>\n    {({ getContainerProps, getCurrentPageProps }) => (\n      <div {...getContainerProps()}>\n        <a href="#foo">Home</a>\n        <span aria-hidden="true">&gt;</span>\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\n      </div>\n    )}\n  </BreadcrumbContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\n\n  return (\n    <div {...getContainerProps()}>\n      <a href="#foo">Home</a>\n      <span aria-hidden="true">&gt;</span>\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nHook.story = {\n  name: \'useBreadcrumb\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useBreadcrumb\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\n    }\n  }\n};\n\nContainer.story = {\n  name: \'BreadcrumbContainer\'\n};\n\nexport default {\n  title: \'Breadcrumb Container\',\n  component: BreadcrumbContainer,\n  decorators: [withKnobs],\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/breadcrumb\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <BreadcrumbContainer>\\\\n    {({ getContainerProps, getCurrentPageProps }) => (\\\\n      <div {...getContainerProps()}>\\\\n        <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n        <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\\\n      </div>\\\\n    )}\\\\n  </BreadcrumbContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\\\n\\\\n  return (\\\\n    <div {...getContainerProps()}>\\\\n      <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n      <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useBreadcrumb\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useBreadcrumb\\\\\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'BreadcrumbContainer\'\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Breadcrumb Container\',\\\\n  component: BreadcrumbContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"breadcrumb-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"breadcrumb-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":36},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":36}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/breadcrumb.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <BreadcrumbContainer>\\\\n    {({ getContainerProps, getCurrentPageProps }) => (\\\\n      <div {...getContainerProps()}>\\\\n        <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n        <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\\\n      </div>\\\\n    )}\\\\n  </BreadcrumbContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\\\n\\\\n  return (\\\\n    <div {...getContainerProps()}>\\\\n      <a href=\\\\\\"#foo\\\\\\">Home</a>\\\\n      <span aria-hidden=\\\\\\"true\\\\\\">&gt;</span>\\\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useBreadcrumb\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useBreadcrumb\\\\\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'BreadcrumbContainer\'\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Breadcrumb Container\',\\\\n  component: BreadcrumbContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"breadcrumb-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"breadcrumb-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":36},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":36}}}},\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  },};\\n","locationsMap":{"breadcrumb-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":46},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":46}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":48},"endLoc":{"col":139,"line":58},"startBody":{"col":20,"line":48},"endBody":{"col":139,"line":58}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = () => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n};\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  }\\n};\\n","locationsMap":{"breadcrumb-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":36},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":36}}}},\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\n  },};\n',locationsMap:{"breadcrumb-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:68},startBody:{col:25,line:58},endBody:{col:277,line:68}},"breadcrumb-container--hook":{startLoc:{col:20,line:70},endLoc:{col:277,line:80},startBody:{col:20,line:70},endBody:{col:277,line:80}}}}},_parameters.storySource={source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/breadcrumb";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = () => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n};\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"breadcrumb-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":36},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":36}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/breadcrumb.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\n\nexport const Container = addSourceDecorator(() => (\n  <BreadcrumbContainer>\n    {({ getContainerProps, getCurrentPageProps }) => (\n      <div {...getContainerProps()}>\n        <a href="#foo">Home</a>\n        <span aria-hidden="true">&gt;</span>\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\n      </div>\n    )}\n  </BreadcrumbContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\n\n  return (\n    <div {...getContainerProps()}>\n      <a href="#foo">Home</a>\n      <span aria-hidden="true">&gt;</span>\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nHook.story = {\n  name: \'useBreadcrumb\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useBreadcrumb\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\n    }\n  }\n};\n\nContainer.story = {\n  name: \'BreadcrumbContainer\'\n};\n\nexport default {\n  title: \'Breadcrumb Container\',\n  component: BreadcrumbContainer,\n  decorators: [withKnobs],\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { BreadcrumbContainer, useBreadcrumb } from \'./src\';\\n\\nexport const Container = () => (\\n  <BreadcrumbContainer>\\n    {({ getContainerProps, getCurrentPageProps }) => (\\n      <div {...getContainerProps()}>\\n        <a href=\\"#foo\\">Home</a>\\n        <span aria-hidden=\\"true\\">&gt;</span>\\n        <a {...getCurrentPageProps({ href: \'#foo\' })}>Items</a>\\n      </div>\\n    )}\\n  </BreadcrumbContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\\n\\n  return (\\n    <div {...getContainerProps()}>\\n      <a href=\\"#foo\\">Home</a>\\n      <span aria-hidden=\\"true\\">&gt;</span>\\n      <a {...getCurrentPageProps({ href: \'#\' })}>Items</a>\\n    </div>\\n  );\\n};\\n\\nHook.story = {\\n  name: \'useBreadcrumb\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useBreadcrumb\\\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\\n    }\\n  }\\n};\\n\\nContainer.story = {\\n  name: \'BreadcrumbContainer\'\\n};\\n\\nexport default {\\n  title: \'Breadcrumb Container\',\\n  component: BreadcrumbContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\\n  }\\n};\\n","locationsMap":{"breadcrumb-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"breadcrumb-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":36},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":36}}}},\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\n  },};\n',locationsMap:{"breadcrumb-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:46},startBody:{col:25,line:36},endBody:{col:139,line:46}},"breadcrumb-container--hook":{startLoc:{col:20,line:48},endLoc:{col:139,line:58},startBody:{col:20,line:48},endBody:{col:139,line:58}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { BreadcrumbContainer, useBreadcrumb } from './src';\n\nexport const Container = () => (\n  <BreadcrumbContainer>\n    {({ getContainerProps, getCurrentPageProps }) => (\n      <div {...getContainerProps()}>\n        <a href=\"#foo\">Home</a>\n        <span aria-hidden=\"true\">&gt;</span>\n        <a {...getCurrentPageProps({ href: '#foo' })}>Items</a>\n      </div>\n    )}\n  </BreadcrumbContainer>\n);\n\nexport const Hook = () => {\n  const { getContainerProps, getCurrentPageProps } = useBreadcrumb();\n\n  return (\n    <div {...getContainerProps()}>\n      <a href=\"#foo\">Home</a>\n      <span aria-hidden=\"true\">&gt;</span>\n      <a {...getCurrentPageProps({ href: '#' })}>Items</a>\n    </div>\n  );\n};\n\nHook.story = {\n  name: 'useBreadcrumb',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useBreadcrumb\\` hook implements the [breadcrumb](https://www.w3.org/TR/wai-aria-practices-1.1/#breadcrumb) design pattern and can be used to build a breadcrumb component.`\n    }\n  }\n};\n\nContainer.story = {\n  name: 'BreadcrumbContainer'\n};\n\nexport default {\n  title: 'Breadcrumb Container',\n  component: BreadcrumbContainer,\n  decorators: [withKnobs],\n  parameters: {\n    componentSubtitle: `A container component which wraps the useBreadcrumb hook.`\n  }\n};\n",locationsMap:{"breadcrumb-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:24},startBody:{col:25,line:14},endBody:{col:1,line:24}},"breadcrumb-container--hook":{startLoc:{col:20,line:26},endLoc:{col:1,line:36},startBody:{col:20,line:26},endBody:{col:1,line:36}}}},_parameters.componentSubtitle="A container component which wraps the useBreadcrumb hook.",_parameters)}},2815:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(234);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),objectWithoutPropertiesLoose=__webpack_require__(407),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),esm_extends=__webpack_require__(824),index_esm=__webpack_require__(290);function useButtonGroup(options){var _useSelection=Object(index_esm.a)(options),selectedItem=_useSelection.selectedItem,focusedItem=_useSelection.focusedItem,getContainerProps=_useSelection.getContainerProps,getItemProps=_useSelection.getItemProps;return{selectedItem:selectedItem,focusedItem:focusedItem,getGroupProps:function(props){return getContainerProps((_ref$role=(_ref=void 0===(_temp=props)?{}:_temp).role,role=void 0===_ref$role?"group":_ref$role,other=Object(objectWithoutPropertiesLoose.a)(_ref,["role"]),Object(esm_extends.a)({role:role,"data-garden-container-id":"containers.buttongroup","data-garden-container-version":"storybook"},other)));var _temp,_ref,_ref$role,role,other},getButtonProps:function(props){return getItemProps((_ref2$role=(_ref2=void 0===(_temp2=props)?{}:_temp2).role,role=void 0===_ref2$role?"button":_ref2$role,_ref2$selectedAriaKey=_ref2.selectedAriaKey,selectedAriaKey=void 0===_ref2$selectedAriaKey?"aria-pressed":_ref2$selectedAriaKey,other=Object(objectWithoutPropertiesLoose.a)(_ref2,["role","selectedAriaKey"]),Object(esm_extends.a)({role:role,selectedAriaKey:selectedAriaKey},other)),"getButtonProps");var _temp2,_ref2,_ref2$role,role,_ref2$selectedAriaKey,selectedAriaKey,other}}}var ButtonGroupContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=Object(objectWithoutPropertiesLoose.a)(_ref,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(useButtonGroup(options))))};ButtonGroupContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,focusedItem:prop_types_default.a.any,selectedItem:prop_types_default.a.any,onSelect:prop_types_default.a.func,onFocus:prop_types_default.a.func},ButtonGroupContainer.__docgenInfo={description:"",methods:[],displayName:"ButtonGroupContainer",props:{children:{type:{name:"func"},required:!1,description:"A render prop function"},render:{type:{name:"func"},required:!1,description:"A children render prop function"},focusedItem:{type:{name:"any"},required:!1,description:"The focused item in a controlled buttongroup"},selectedItem:{type:{name:"any"},required:!1,description:"The selected item in a controlled buttongroup"},onSelect:{type:{name:"func"},required:!1,description:"A callback function that receives the selected item"},onFocus:{type:{name:"func"},required:!1,description:"A callback function that receives the focused item"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/buttongroup/src/ButtonGroupContainer.tsx"]={name:"ButtonGroupContainer",docgenInfo:ButtonGroupContainer.__docgenInfo,path:"packages/buttongroup/src/ButtonGroupContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,"/home/circleci/project/packages/buttongroup"),__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, useState } from 'react';\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { ButtonGroupContainer, useButtonGroup } from './src';\n\nconst buttons = ['Button 1', 'Button 2', 'Button 3'];\nconst buttonRefs = buttons.map(() => createRef());\n\nexport const Container = () => (\n  <ButtonGroupContainer>\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\n      <div {...getGroupProps()}>\n        {buttons.map((button, index) => (\n          <button\n            {...getButtonProps({\n              key: button,\n              item: button,\n              focusRef: buttonRefs[index],\n              style: {\n                boxShadow:\n                  button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\n                outline: 'none',\n                color: button === selectedItem ? '#fff' : '#1f73b7',\n                background: button === selectedItem ? '#144a75' : 'inherit',\n                padding: '10px'\n              }\n            })}\n          >\n            {button}\n          </button>\n        ))}\n      </div>\n    )}\n  </ButtonGroupContainer>\n);\n\nexport const Hook = () => {\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\n    selectedItem: controlledSelectedItem,\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\n  });\n\n  return (\n    <div {...getGroupProps()}>\n      {buttons.map((button, index) => (\n        <button\n          {...getButtonProps({\n            key: button,\n            item: button,\n            focusRef: buttonRefs[index],\n            style: {\n              boxShadow:\n                button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\n              outline: 'none',\n              color: button === selectedItem ? '#fff' : '#1f73b7',\n              background: button === selectedItem ? '#144a75' : 'inherit',\n              padding: '10px'\n            }\n          })}\n        >\n          {button}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nContainer.story = {\n  name: 'ButtongroupContainer'\n};\n\nHook.story = {\n  name: 'useButtongroup',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useButtonGroup\\` hook manages focus, selection and accessibility attributes\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\n    }\n  }\n};\n\nexport default {\n  title: 'Buttongroup Container',\n  component: ButtonGroupContainer,\n  decorators: [withKnobs],\n  parameters: {\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\n  }\n};\n",__ADDS_MAP__={"buttongroup-container--container":{startLoc:{col:25,line:16},endLoc:{col:1,line:42},startBody:{col:25,line:16},endBody:{col:1,line:42}},"buttongroup-container--hook":{startLoc:{col:20,line:44},endLoc:{col:1,line:74},startBody:{col:20,line:44},endBody:{col:1,line:74}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},buttons=["Button 1","Button 2","Button 3"],buttonRefs=buttons.map((function(){return Object(react.createRef)()})),Container=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){return react_default.a.createElement(ButtonGroupContainer,null,(function(_ref){var selectedItem=_ref.selectedItem,focusedItem=_ref.focusedItem,getButtonProps=_ref.getButtonProps,getGroupProps=_ref.getGroupProps;return(react_default.a.createElement("div",getGroupProps(),buttons.map((function(button,index){return react_default.a.createElement("button",getButtonProps({key:button,item:button,focusRef:buttonRefs[index],style:{boxShadow:button===focusedItem?"inset 0 0 0 3px rgba(31,115,183, 0.35)":"inherit",outline:"none",color:button===selectedItem?"#fff":"#1f73b7",background:button===selectedItem?"#144a75":"inherit",padding:"10px"}}),button)}))))}))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/buttongroup.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/buttongroup.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/buttongroup.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var _useState=Object(react.useState)(),controlledSelectedItem=_useState[0],setSelectedItem=_useState[1],_useButtonGroup=useButtonGroup({selectedItem:controlledSelectedItem,onSelect:function(newSelectedItem){return setSelectedItem(newSelectedItem)}}),selectedItem=_useButtonGroup.selectedItem,focusedItem=_useButtonGroup.focusedItem,getButtonProps=_useButtonGroup.getButtonProps,getGroupProps=_useButtonGroup.getGroupProps;return(react_default.a.createElement("div",getGroupProps(),buttons.map((function(button,index){return react_default.a.createElement("button",getButtonProps({key:button,item:button,focusRef:buttonRefs[index],style:{boxShadow:button===focusedItem?"inset 0 0 0 3px rgba(31,115,183, 0.35)":"inherit",outline:"none",color:button===selectedItem?"#fff":"#1f73b7",background:button===selectedItem?"#144a75":"inherit",padding:"10px"}}),button)}))))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/buttongroup.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/buttongroup.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/buttongroup.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"ButtongroupContainer"},Hook.story={name:"useButtongroup",parameters:{docs:{storyDescription:"The `useButtonGroup` hook manages focus, selection and accessibility attributes\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons)."}}};__webpack_exports__.default={title:"Buttongroup Container",component:ButtonGroupContainer,decorators:[dist.withKnobs],parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/buttongroup";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/buttongroup\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, useState } from \'react\';\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ButtonGroupContainer, useButtonGroup } from \'./src\';\\\\n\\\\nconst buttons = [\'Button 1\', \'Button 2\', \'Button 3\'];\\\\nconst buttonRefs = buttons.map(() => createRef());\\\\n\\\\nexport const Container = () => (\\\\n  <ButtonGroupContainer>\\\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\\\n      <div {...getGroupProps()}>\\\\n        {buttons.map((button, index) => (\\\\n          <button\\\\n            {...getButtonProps({\\\\n              key: button,\\\\n              item: button,\\\\n              focusRef: buttonRefs[index],\\\\n              style: {\\\\n                boxShadow:\\\\n                  button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\\\n                outline: \'none\',\\\\n                color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\\\n                background: button === selectedItem ? \'#144a75\' : \'inherit\',\\\\n                padding: \'10px\'\\\\n              }\\\\n            })}\\\\n          >\\\\n            {button}\\\\n          </button>\\\\n        ))}\\\\n      </div>\\\\n    )}\\\\n  </ButtonGroupContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\\\n    selectedItem: controlledSelectedItem,\\\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\\\n  });\\\\n\\\\n  return (\\\\n    <div {...getGroupProps()}>\\\\n      {buttons.map((button, index) => (\\\\n        <button\\\\n          {...getButtonProps({\\\\n            key: button,\\\\n            item: button,\\\\n            focusRef: buttonRefs[index],\\\\n            style: {\\\\n              boxShadow:\\\\n                button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\\\n              outline: \'none\',\\\\n              color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\\\n              background: button === selectedItem ? \'#144a75\' : \'inherit\',\\\\n              padding: \'10px\'\\\\n            }\\\\n          })}\\\\n        >\\\\n          {button}\\\\n        </button>\\\\n      ))}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ButtongroupContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useButtongroup\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useButtonGroup\\\\\\\\` hook manages focus, selection and accessibility attributes\\\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Buttongroup Container\',\\\\n  component: ButtonGroupContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"buttongroup-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":16},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":25,\\"line\\":16},\\"endBody\\":{\\"col\\":1,\\"line\\":42}},\\"buttongroup-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":44},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":20,\\"line\\":44},\\"endBody\\":{\\"col\\":1,\\"line\\":74}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/buttongroup.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, useState } from \'react\';\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { ButtonGroupContainer, useButtonGroup } from \'./src\';\\n\\nconst buttons = [\'Button 1\', \'Button 2\', \'Button 3\'];\\nconst buttonRefs = buttons.map(() => createRef());\\n\\nexport const Container = addSourceDecorator(() => (\\n  <ButtonGroupContainer>\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\n      <div {...getGroupProps()}>\\n        {buttons.map((button, index) => (\\n          <button\\n            {...getButtonProps({\\n              key: button,\\n              item: button,\\n              focusRef: buttonRefs[index],\\n              style: {\\n                boxShadow:\\n                  button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\n                outline: \'none\',\\n                color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\n                background: button === selectedItem ? \'#144a75\' : \'inherit\',\\n                padding: \'10px\'\\n              }\\n            })}\\n          >\\n            {button}\\n          </button>\\n        ))}\\n      </div>\\n    )}\\n  </ButtonGroupContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\n  });\\n\\n  return (\\n    <div {...getGroupProps()}>\\n      {buttons.map((button, index) => (\\n        <button\\n          {...getButtonProps({\\n            key: button,\\n            item: button,\\n            focusRef: buttonRefs[index],\\n            style: {\\n              boxShadow:\\n                button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\n              outline: \'none\',\\n              color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\n              background: button === selectedItem ? \'#144a75\' : \'inherit\',\\n              padding: \'10px\'\\n            }\\n          })}\\n        >\\n          {button}\\n        </button>\\n      ))}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'ButtongroupContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useButtongroup\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useButtonGroup\\\\` hook manages focus, selection and accessibility attributes\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Buttongroup Container\',\\n  component: ButtonGroupContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, useState } from \'react\';\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ButtonGroupContainer, useButtonGroup } from \'./src\';\\\\n\\\\nconst buttons = [\'Button 1\', \'Button 2\', \'Button 3\'];\\\\nconst buttonRefs = buttons.map(() => createRef());\\\\n\\\\nexport const Container = () => (\\\\n  <ButtonGroupContainer>\\\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\\\n      <div {...getGroupProps()}>\\\\n        {buttons.map((button, index) => (\\\\n          <button\\\\n            {...getButtonProps({\\\\n              key: button,\\\\n              item: button,\\\\n              focusRef: buttonRefs[index],\\\\n              style: {\\\\n                boxShadow:\\\\n                  button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\\\n                outline: \'none\',\\\\n                color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\\\n                background: button === selectedItem ? \'#144a75\' : \'inherit\',\\\\n                padding: \'10px\'\\\\n              }\\\\n            })}\\\\n          >\\\\n            {button}\\\\n          </button>\\\\n        ))}\\\\n      </div>\\\\n    )}\\\\n  </ButtonGroupContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\\\n    selectedItem: controlledSelectedItem,\\\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\\\n  });\\\\n\\\\n  return (\\\\n    <div {...getGroupProps()}>\\\\n      {buttons.map((button, index) => (\\\\n        <button\\\\n          {...getButtonProps({\\\\n            key: button,\\\\n            item: button,\\\\n            focusRef: buttonRefs[index],\\\\n            style: {\\\\n              boxShadow:\\\\n                button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\\\n              outline: \'none\',\\\\n              color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\\\n              background: button === selectedItem ? \'#144a75\' : \'inherit\',\\\\n              padding: \'10px\'\\\\n            }\\\\n          })}\\\\n        >\\\\n          {button}\\\\n        </button>\\\\n      ))}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ButtongroupContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useButtongroup\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useButtonGroup\\\\\\\\` hook manages focus, selection and accessibility attributes\\\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Buttongroup Container\',\\\\n  component: ButtonGroupContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"buttongroup-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":16},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":25,\\"line\\":16},\\"endBody\\":{\\"col\\":1,\\"line\\":42}},\\"buttongroup-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":44},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":20,\\"line\\":44},\\"endBody\\":{\\"col\\":1,\\"line\\":74}}}},\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"buttongroup-container--container":{"startLoc":{"col":25,"line":38},"endLoc":{"col":139,"line":64},"startBody":{"col":25,"line":38},"endBody":{"col":139,"line":64}},"buttongroup-container--hook":{"startLoc":{"col":20,"line":66},"endLoc":{"col":139,"line":96},"startBody":{"col":20,"line":66},"endBody":{"col":139,"line":96}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/buttongroup.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/buttongroup";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, useState } from \'react\';\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { ButtonGroupContainer, useButtonGroup } from \'./src\';\\n\\nconst buttons = [\'Button 1\', \'Button 2\', \'Button 3\'];\\nconst buttonRefs = buttons.map(() => createRef());\\n\\nexport const Container = () => (\\n  <ButtonGroupContainer>\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\n      <div {...getGroupProps()}>\\n        {buttons.map((button, index) => (\\n          <button\\n            {...getButtonProps({\\n              key: button,\\n              item: button,\\n              focusRef: buttonRefs[index],\\n              style: {\\n                boxShadow:\\n                  button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\n                outline: \'none\',\\n                color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\n                background: button === selectedItem ? \'#144a75\' : \'inherit\',\\n                padding: \'10px\'\\n              }\\n            })}\\n          >\\n            {button}\\n          </button>\\n        ))}\\n      </div>\\n    )}\\n  </ButtonGroupContainer>\\n);\\n\\nexport const Hook = () => {\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\n  });\\n\\n  return (\\n    <div {...getGroupProps()}>\\n      {buttons.map((button, index) => (\\n        <button\\n          {...getButtonProps({\\n            key: button,\\n            item: button,\\n            focusRef: buttonRefs[index],\\n            style: {\\n              boxShadow:\\n                button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\n              outline: \'none\',\\n              color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\n              background: button === selectedItem ? \'#144a75\' : \'inherit\',\\n              padding: \'10px\'\\n            }\\n          })}\\n        >\\n          {button}\\n        </button>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'ButtongroupContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useButtongroup\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useButtonGroup\\\\` hook manages focus, selection and accessibility attributes\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Buttongroup Container\',\\n  component: ButtonGroupContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"buttongroup-container--container":{"startLoc":{"col":25,"line":16},"endLoc":{"col":1,"line":42},"startBody":{"col":25,"line":16},"endBody":{"col":1,"line":42}},"buttongroup-container--hook":{"startLoc":{"col":20,"line":44},"endLoc":{"col":1,"line":74},"startBody":{"col":20,"line":44},"endBody":{"col":1,"line":74}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/buttongroup.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, useState } from \'react\';\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { ButtonGroupContainer, useButtonGroup } from \'./src\';\n\nconst buttons = [\'Button 1\', \'Button 2\', \'Button 3\'];\nconst buttonRefs = buttons.map(() => createRef());\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <ButtonGroupContainer>\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\n      <div {...getGroupProps()}>\n        {buttons.map((button, index) => (\n          <button\n            {...getButtonProps({\n              key: button,\n              item: button,\n              focusRef: buttonRefs[index],\n              style: {\n                boxShadow:\n                  button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\n                outline: \'none\',\n                color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\n                background: button === selectedItem ? \'#144a75\' : \'inherit\',\n                padding: \'10px\'\n              }\n            })}\n          >\n            {button}\n          </button>\n        ))}\n      </div>\n    )}\n  </ButtonGroupContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\n    selectedItem: controlledSelectedItem,\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\n  });\n\n  return (\n    <div {...getGroupProps()}>\n      {buttons.map((button, index) => (\n        <button\n          {...getButtonProps({\n            key: button,\n            item: button,\n            focusRef: buttonRefs[index],\n            style: {\n              boxShadow:\n                button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\n              outline: \'none\',\n              color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\n              background: button === selectedItem ? \'#144a75\' : \'inherit\',\n              padding: \'10px\'\n            }\n          })}\n        >\n          {button}\n        </button>\n      ))}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'ButtongroupContainer\'\n};\n\nHook.story = {\n  name: \'useButtongroup\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useButtonGroup\\` hook manages focus, selection and accessibility attributes\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\n    }\n  }\n};\n\nexport default {\n  title: \'Buttongroup Container\',\n  component: ButtonGroupContainer,\n  decorators: [withKnobs],\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/buttongroup\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, useState } from \'react\';\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ButtonGroupContainer, useButtonGroup } from \'./src\';\\\\n\\\\nconst buttons = [\'Button 1\', \'Button 2\', \'Button 3\'];\\\\nconst buttonRefs = buttons.map(() => createRef());\\\\n\\\\nexport const Container = () => (\\\\n  <ButtonGroupContainer>\\\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\\\n      <div {...getGroupProps()}>\\\\n        {buttons.map((button, index) => (\\\\n          <button\\\\n            {...getButtonProps({\\\\n              key: button,\\\\n              item: button,\\\\n              focusRef: buttonRefs[index],\\\\n              style: {\\\\n                boxShadow:\\\\n                  button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\\\n                outline: \'none\',\\\\n                color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\\\n                background: button === selectedItem ? \'#144a75\' : \'inherit\',\\\\n                padding: \'10px\'\\\\n              }\\\\n            })}\\\\n          >\\\\n            {button}\\\\n          </button>\\\\n        ))}\\\\n      </div>\\\\n    )}\\\\n  </ButtonGroupContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\\\n    selectedItem: controlledSelectedItem,\\\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\\\n  });\\\\n\\\\n  return (\\\\n    <div {...getGroupProps()}>\\\\n      {buttons.map((button, index) => (\\\\n        <button\\\\n          {...getButtonProps({\\\\n            key: button,\\\\n            item: button,\\\\n            focusRef: buttonRefs[index],\\\\n            style: {\\\\n              boxShadow:\\\\n                button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\\\n              outline: \'none\',\\\\n              color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\\\n              background: button === selectedItem ? \'#144a75\' : \'inherit\',\\\\n              padding: \'10px\'\\\\n            }\\\\n          })}\\\\n        >\\\\n          {button}\\\\n        </button>\\\\n      ))}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ButtongroupContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useButtongroup\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useButtonGroup\\\\\\\\` hook manages focus, selection and accessibility attributes\\\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Buttongroup Container\',\\\\n  component: ButtonGroupContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"buttongroup-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":16},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":25,\\"line\\":16},\\"endBody\\":{\\"col\\":1,\\"line\\":42}},\\"buttongroup-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":44},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":20,\\"line\\":44},\\"endBody\\":{\\"col\\":1,\\"line\\":74}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/buttongroup.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, useState } from \'react\';\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { ButtonGroupContainer, useButtonGroup } from \'./src\';\\n\\nconst buttons = [\'Button 1\', \'Button 2\', \'Button 3\'];\\nconst buttonRefs = buttons.map(() => createRef());\\n\\nexport const Container = addSourceDecorator(() => (\\n  <ButtonGroupContainer>\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\n      <div {...getGroupProps()}>\\n        {buttons.map((button, index) => (\\n          <button\\n            {...getButtonProps({\\n              key: button,\\n              item: button,\\n              focusRef: buttonRefs[index],\\n              style: {\\n                boxShadow:\\n                  button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\n                outline: \'none\',\\n                color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\n                background: button === selectedItem ? \'#144a75\' : \'inherit\',\\n                padding: \'10px\'\\n              }\\n            })}\\n          >\\n            {button}\\n          </button>\\n        ))}\\n      </div>\\n    )}\\n  </ButtonGroupContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\n  });\\n\\n  return (\\n    <div {...getGroupProps()}>\\n      {buttons.map((button, index) => (\\n        <button\\n          {...getButtonProps({\\n            key: button,\\n            item: button,\\n            focusRef: buttonRefs[index],\\n            style: {\\n              boxShadow:\\n                button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\n              outline: \'none\',\\n              color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\n              background: button === selectedItem ? \'#144a75\' : \'inherit\',\\n              padding: \'10px\'\\n            }\\n          })}\\n        >\\n          {button}\\n        </button>\\n      ))}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'ButtongroupContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useButtongroup\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useButtonGroup\\\\` hook manages focus, selection and accessibility attributes\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Buttongroup Container\',\\n  component: ButtonGroupContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef, useState } from \'react\';\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ButtonGroupContainer, useButtonGroup } from \'./src\';\\\\n\\\\nconst buttons = [\'Button 1\', \'Button 2\', \'Button 3\'];\\\\nconst buttonRefs = buttons.map(() => createRef());\\\\n\\\\nexport const Container = () => (\\\\n  <ButtonGroupContainer>\\\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\\\n      <div {...getGroupProps()}>\\\\n        {buttons.map((button, index) => (\\\\n          <button\\\\n            {...getButtonProps({\\\\n              key: button,\\\\n              item: button,\\\\n              focusRef: buttonRefs[index],\\\\n              style: {\\\\n                boxShadow:\\\\n                  button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\\\n                outline: \'none\',\\\\n                color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\\\n                background: button === selectedItem ? \'#144a75\' : \'inherit\',\\\\n                padding: \'10px\'\\\\n              }\\\\n            })}\\\\n          >\\\\n            {button}\\\\n          </button>\\\\n        ))}\\\\n      </div>\\\\n    )}\\\\n  </ButtonGroupContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\\\n    selectedItem: controlledSelectedItem,\\\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\\\n  });\\\\n\\\\n  return (\\\\n    <div {...getGroupProps()}>\\\\n      {buttons.map((button, index) => (\\\\n        <button\\\\n          {...getButtonProps({\\\\n            key: button,\\\\n            item: button,\\\\n            focusRef: buttonRefs[index],\\\\n            style: {\\\\n              boxShadow:\\\\n                button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\\\n              outline: \'none\',\\\\n              color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\\\n              background: button === selectedItem ? \'#144a75\' : \'inherit\',\\\\n              padding: \'10px\'\\\\n            }\\\\n          })}\\\\n        >\\\\n          {button}\\\\n        </button>\\\\n      ))}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ButtongroupContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useButtongroup\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useButtonGroup\\\\\\\\` hook manages focus, selection and accessibility attributes\\\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Buttongroup Container\',\\\\n  component: ButtonGroupContainer,\\\\n  decorators: [withKnobs],\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"buttongroup-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":16},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":25,\\"line\\":16},\\"endBody\\":{\\"col\\":1,\\"line\\":42}},\\"buttongroup-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":44},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":20,\\"line\\":44},\\"endBody\\":{\\"col\\":1,\\"line\\":74}}}},\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\n  },};\\n","locationsMap":{"buttongroup-container--container":{"startLoc":{"col":25,"line":38},"endLoc":{"col":139,"line":64},"startBody":{"col":25,"line":38},"endBody":{"col":139,"line":64}},"buttongroup-container--hook":{"startLoc":{"col":20,"line":66},"endLoc":{"col":139,"line":96},"startBody":{"col":20,"line":66},"endBody":{"col":139,"line":96}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, useState } from \'react\';\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { ButtonGroupContainer, useButtonGroup } from \'./src\';\\n\\nconst buttons = [\'Button 1\', \'Button 2\', \'Button 3\'];\\nconst buttonRefs = buttons.map(() => createRef());\\n\\nexport const Container = () => (\\n  <ButtonGroupContainer>\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\n      <div {...getGroupProps()}>\\n        {buttons.map((button, index) => (\\n          <button\\n            {...getButtonProps({\\n              key: button,\\n              item: button,\\n              focusRef: buttonRefs[index],\\n              style: {\\n                boxShadow:\\n                  button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\n                outline: \'none\',\\n                color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\n                background: button === selectedItem ? \'#144a75\' : \'inherit\',\\n                padding: \'10px\'\\n              }\\n            })}\\n          >\\n            {button}\\n          </button>\\n        ))}\\n      </div>\\n    )}\\n  </ButtonGroupContainer>\\n);\\n\\nexport const Hook = () => {\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\n  });\\n\\n  return (\\n    <div {...getGroupProps()}>\\n      {buttons.map((button, index) => (\\n        <button\\n          {...getButtonProps({\\n            key: button,\\n            item: button,\\n            focusRef: buttonRefs[index],\\n            style: {\\n              boxShadow:\\n                button === focusedItem ? \'inset 0 0 0 3px rgba(31,115,183, 0.35)\' : \'inherit\',\\n              outline: \'none\',\\n              color: button === selectedItem ? \'#fff\' : \'#1f73b7\',\\n              background: button === selectedItem ? \'#144a75\' : \'inherit\',\\n              padding: \'10px\'\\n            }\\n          })}\\n        >\\n          {button}\\n        </button>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'ButtongroupContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useButtongroup\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useButtonGroup\\\\` hook manages focus, selection and accessibility attributes\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Buttongroup Container\',\\n  component: ButtonGroupContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\n  }\\n};\\n","locationsMap":{"buttongroup-container--container":{"startLoc":{"col":25,"line":16},"endLoc":{"col":1,"line":42},"startBody":{"col":25,"line":16},"endBody":{"col":1,"line":42}},"buttongroup-container--hook":{"startLoc":{"col":20,"line":44},"endLoc":{"col":1,"line":74},"startBody":{"col":20,"line":44},"endBody":{"col":1,"line":74}}}},\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\n  },};\n',locationsMap:{"buttongroup-container--container":{startLoc:{col:25,line:60},endLoc:{col:277,line:86},startBody:{col:25,line:60},endBody:{col:277,line:86}},"buttongroup-container--hook":{startLoc:{col:20,line:88},endLoc:{col:277,line:118},startBody:{col:20,line:88},endBody:{col:277,line:118}}}}},_parameters.storySource={source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/buttongroup\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, useState } from 'react';\\nimport { withKnobs } from '@storybook/addon-knobs';\\n\\nimport { ButtonGroupContainer, useButtonGroup } from './src';\\n\\nconst buttons = ['Button 1', 'Button 2', 'Button 3'];\\nconst buttonRefs = buttons.map(() => createRef());\\n\\nexport const Container = () => (\\n  <ButtonGroupContainer>\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\n      <div {...getGroupProps()}>\\n        {buttons.map((button, index) => (\\n          <button\\n            {...getButtonProps({\\n              key: button,\\n              item: button,\\n              focusRef: buttonRefs[index],\\n              style: {\\n                boxShadow:\\n                  button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\\n                outline: 'none',\\n                color: button === selectedItem ? '#fff' : '#1f73b7',\\n                background: button === selectedItem ? '#144a75' : 'inherit',\\n                padding: '10px'\\n              }\\n            })}\\n          >\\n            {button}\\n          </button>\\n        ))}\\n      </div>\\n    )}\\n  </ButtonGroupContainer>\\n);\\n\\nexport const Hook = () => {\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\n  });\\n\\n  return (\\n    <div {...getGroupProps()}>\\n      {buttons.map((button, index) => (\\n        <button\\n          {...getButtonProps({\\n            key: button,\\n            item: button,\\n            focusRef: buttonRefs[index],\\n            style: {\\n              boxShadow:\\n                button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\\n              outline: 'none',\\n              color: button === selectedItem ? '#fff' : '#1f73b7',\\n              background: button === selectedItem ? '#144a75' : 'inherit',\\n              padding: '10px'\\n            }\\n          })}\\n        >\\n          {button}\\n        </button>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ButtongroupContainer'\\n};\\n\\nHook.story = {\\n  name: 'useButtongroup',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useButtonGroup\\\\` hook manages focus, selection and accessibility attributes\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Buttongroup Container',\\n  component: ButtonGroupContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"buttongroup-container--container\":{\"startLoc\":{\"col\":25,\"line\":16},\"endLoc\":{\"col\":1,\"line\":42},\"startBody\":{\"col\":25,\"line\":16},\"endBody\":{\"col\":1,\"line\":42}},\"buttongroup-container--hook\":{\"startLoc\":{\"col\":20,\"line\":44},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":20,\"line\":44},\"endBody\":{\"col\":1,\"line\":74}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/buttongroup.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, useState } from 'react';\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { ButtonGroupContainer, useButtonGroup } from './src';\n\nconst buttons = ['Button 1', 'Button 2', 'Button 3'];\nconst buttonRefs = buttons.map(() => createRef());\n\nexport const Container = addSourceDecorator(() => (\n  <ButtonGroupContainer>\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\n      <div {...getGroupProps()}>\n        {buttons.map((button, index) => (\n          <button\n            {...getButtonProps({\n              key: button,\n              item: button,\n              focusRef: buttonRefs[index],\n              style: {\n                boxShadow:\n                  button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\n                outline: 'none',\n                color: button === selectedItem ? '#fff' : '#1f73b7',\n                background: button === selectedItem ? '#144a75' : 'inherit',\n                padding: '10px'\n              }\n            })}\n          >\n            {button}\n          </button>\n        ))}\n      </div>\n    )}\n  </ButtonGroupContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\n    selectedItem: controlledSelectedItem,\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\n  });\n\n  return (\n    <div {...getGroupProps()}>\n      {buttons.map((button, index) => (\n        <button\n          {...getButtonProps({\n            key: button,\n            item: button,\n            focusRef: buttonRefs[index],\n            style: {\n              boxShadow:\n                button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\n              outline: 'none',\n              color: button === selectedItem ? '#fff' : '#1f73b7',\n              background: button === selectedItem ? '#144a75' : 'inherit',\n              padding: '10px'\n            }\n          })}\n        >\n          {button}\n        </button>\n      ))}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'ButtongroupContainer'\n};\n\nHook.story = {\n  name: 'useButtongroup',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useButtonGroup\\` hook manages focus, selection and accessibility attributes\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\n    }\n  }\n};\n\nexport default {\n  title: 'Buttongroup Container',\n  component: ButtonGroupContainer,\n  decorators: [withKnobs],\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef, useState } from 'react';\\nimport { withKnobs } from '@storybook/addon-knobs';\\n\\nimport { ButtonGroupContainer, useButtonGroup } from './src';\\n\\nconst buttons = ['Button 1', 'Button 2', 'Button 3'];\\nconst buttonRefs = buttons.map(() => createRef());\\n\\nexport const Container = () => (\\n  <ButtonGroupContainer>\\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\\n      <div {...getGroupProps()}>\\n        {buttons.map((button, index) => (\\n          <button\\n            {...getButtonProps({\\n              key: button,\\n              item: button,\\n              focusRef: buttonRefs[index],\\n              style: {\\n                boxShadow:\\n                  button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\\n                outline: 'none',\\n                color: button === selectedItem ? '#fff' : '#1f73b7',\\n                background: button === selectedItem ? '#144a75' : 'inherit',\\n                padding: '10px'\\n              }\\n            })}\\n          >\\n            {button}\\n          </button>\\n        ))}\\n      </div>\\n    )}\\n  </ButtonGroupContainer>\\n);\\n\\nexport const Hook = () => {\\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\\n  });\\n\\n  return (\\n    <div {...getGroupProps()}>\\n      {buttons.map((button, index) => (\\n        <button\\n          {...getButtonProps({\\n            key: button,\\n            item: button,\\n            focusRef: buttonRefs[index],\\n            style: {\\n              boxShadow:\\n                button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\\n              outline: 'none',\\n              color: button === selectedItem ? '#fff' : '#1f73b7',\\n              background: button === selectedItem ? '#144a75' : 'inherit',\\n              padding: '10px'\\n            }\\n          })}\\n        >\\n          {button}\\n        </button>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'ButtongroupContainer'\\n};\\n\\nHook.story = {\\n  name: 'useButtongroup',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useButtonGroup\\\\` hook manages focus, selection and accessibility attributes\\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Buttongroup Container',\\n  component: ButtonGroupContainer,\\n  decorators: [withKnobs],\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"buttongroup-container--container\":{\"startLoc\":{\"col\":25,\"line\":16},\"endLoc\":{\"col\":1,\"line\":42},\"startBody\":{\"col\":25,\"line\":16},\"endBody\":{\"col\":1,\"line\":42}},\"buttongroup-container--hook\":{\"startLoc\":{\"col\":20,\"line\":44},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":20,\"line\":44},\"endBody\":{\"col\":1,\"line\":74}}}},\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\n  },};\n",locationsMap:{"buttongroup-container--container":{startLoc:{col:25,line:38},endLoc:{col:139,line:64},startBody:{col:25,line:38},endBody:{col:139,line:64}},"buttongroup-container--hook":{startLoc:{col:20,line:66},endLoc:{col:139,line:96},startBody:{col:20,line:66},endBody:{col:139,line:96}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef, useState } from 'react';\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { ButtonGroupContainer, useButtonGroup } from './src';\n\nconst buttons = ['Button 1', 'Button 2', 'Button 3'];\nconst buttonRefs = buttons.map(() => createRef());\n\nexport const Container = () => (\n  <ButtonGroupContainer>\n    {({ selectedItem, focusedItem, getButtonProps, getGroupProps }) => (\n      <div {...getGroupProps()}>\n        {buttons.map((button, index) => (\n          <button\n            {...getButtonProps({\n              key: button,\n              item: button,\n              focusRef: buttonRefs[index],\n              style: {\n                boxShadow:\n                  button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\n                outline: 'none',\n                color: button === selectedItem ? '#fff' : '#1f73b7',\n                background: button === selectedItem ? '#144a75' : 'inherit',\n                padding: '10px'\n              }\n            })}\n          >\n            {button}\n          </button>\n        ))}\n      </div>\n    )}\n  </ButtonGroupContainer>\n);\n\nexport const Hook = () => {\n  const [controlledSelectedItem, setSelectedItem] = useState<string>();\n  const { selectedItem, focusedItem, getButtonProps, getGroupProps } = useButtonGroup<string>({\n    selectedItem: controlledSelectedItem,\n    onSelect: newSelectedItem => setSelectedItem(newSelectedItem)\n  });\n\n  return (\n    <div {...getGroupProps()}>\n      {buttons.map((button, index) => (\n        <button\n          {...getButtonProps({\n            key: button,\n            item: button,\n            focusRef: buttonRefs[index],\n            style: {\n              boxShadow:\n                button === focusedItem ? 'inset 0 0 0 3px rgba(31,115,183, 0.35)' : 'inherit',\n              outline: 'none',\n              color: button === selectedItem ? '#fff' : '#1f73b7',\n              background: button === selectedItem ? '#144a75' : 'inherit',\n              padding: '10px'\n            }\n          })}\n        >\n          {button}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nContainer.story = {\n  name: 'ButtongroupContainer'\n};\n\nHook.story = {\n  name: 'useButtongroup',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useButtonGroup\\` hook manages focus, selection and accessibility attributes\n      required for a group of buttons. Garden uses this in [react-components](https://github.com/zendeskgarden/react-components)\n      for the [buttons package](https://github.com/zendeskgarden/react-components/tree/main/packages/buttons).`\n    }\n  }\n};\n\nexport default {\n  title: 'Buttongroup Container',\n  component: ButtonGroupContainer,\n  decorators: [withKnobs],\n  parameters: {\n    componentSubtitle: `A container component which wraps the useButtongroup hook.`\n  }\n};\n",locationsMap:{"buttongroup-container--container":{startLoc:{col:25,line:16},endLoc:{col:1,line:42},startBody:{col:25,line:16},endBody:{col:1,line:42}},"buttongroup-container--hook":{startLoc:{col:20,line:44},endLoc:{col:1,line:74},startBody:{col:20,line:44},endBody:{col:1,line:74}}}},_parameters.componentSubtitle="A container component which wraps the useButtongroup hook.",_parameters)}},2816:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),es2015=__webpack_require__(583),dist=__webpack_require__(4),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),esm_extends=__webpack_require__(588),objectWithoutPropertiesLoose=__webpack_require__(589),hooks=__webpack_require__(816);function useField(idPrefix){var seed=Object(hooks.a)(),prefix=Object(react.useState)(idPrefix||seed("field_storybook"))[0],inputId=prefix+"--input",labelId=prefix+"--label",hintId=prefix+"--hint";return{getLabelProps:function(_temp){var _ref=void 0===_temp?{}:_temp,_ref$id=_ref.id,id=void 0===_ref$id?labelId:_ref$id,_ref$htmlFor=_ref.htmlFor,htmlFor=void 0===_ref$htmlFor?inputId:_ref$htmlFor,other=Object(objectWithoutPropertiesLoose.a)(_ref,["id","htmlFor"]);return Object(esm_extends.a)({id:id,htmlFor:htmlFor,"data-garden-container-id":"containers.field","data-garden-container-version":"storybook"},other)},getInputProps:function(_temp2,_temp3){var _ref2=void 0===_temp2?{}:_temp2,_ref2$id=_ref2.id,id=void 0===_ref2$id?inputId:_ref2$id,other=Object(objectWithoutPropertiesLoose.a)(_ref2,["id"]),_ref3$isDescribed=(void 0===_temp3?{}:_temp3).isDescribed,isDescribed=void 0!==_ref3$isDescribed&&_ref3$isDescribed;return Object(esm_extends.a)({id:id,"aria-labelledby":labelId,"aria-describedby":isDescribed?hintId:null},other)},getHintProps:function(_temp4){var _ref4=void 0===_temp4?{}:_temp4,_ref4$id=_ref4.id,id=void 0===_ref4$id?hintId:_ref4$id,other=Object(objectWithoutPropertiesLoose.a)(_ref4,["id"]);return Object(esm_extends.a)({id:id},other)}}}var FieldContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,id=_ref.id;return(react_default.a.createElement(react_default.a.Fragment,null,render(useField(id))))};FieldContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,id:prop_types_default.a.string},FieldContainer.__docgenInfo={description:"",methods:[],displayName:"FieldContainer",props:{children:{type:{name:"func"},required:!1,description:"A children render prop function which receives field prop getters"},render:{type:{name:"func"},required:!1,description:"A render prop function which receives field prop getters"},id:{type:{name:"string"},required:!1,description:"An identifer for the field input elements"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/field/src/FieldContainer.tsx"]={name:"FieldContainer",docgenInfo:FieldContainer.__docgenInfo,path:"packages/field/src/FieldContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/field",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/field";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/field\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { uid } from \'react-uid\';\\\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FieldContainer, useField } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({}, { isDescribed: true })} />\\\\n      </>\\\\n    )}\\\\n  </FieldContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Field = ({ id }: { id: string }) => {\\\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\\\n    const [value, setVal] = React.useState(\'\');\\\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\\\n\\\\n    return (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FieldContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useField\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useField\\\\\\\\` hook will supply the prop getters to handle \\\\\\\\`aria-labelledby\\\\\\\\` along\\\\n      with for/id mapping and \\\\\\\\`aria-describedby\\\\\\\\` mapping when a hint is applied.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Field Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FieldContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useField hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"field-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"field-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":42}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/field.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { uid } from \'react-uid\';\\\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FieldContainer, useField } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({}, { isDescribed: true })} />\\\\n      </>\\\\n    )}\\\\n  </FieldContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Field = ({ id }: { id: string }) => {\\\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\\\n    const [value, setVal] = React.useState(\'\');\\\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\\\n\\\\n    return (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FieldContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useField\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useField\\\\\\\\` hook will supply the prop getters to handle \\\\\\\\`aria-labelledby\\\\\\\\` along\\\\n      with for/id mapping and \\\\\\\\`aria-describedby\\\\\\\\` mapping when a hint is applied.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Field Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FieldContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useField hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"field-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"field-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":42}}}},\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"field-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":46},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":46}},"field-container--hook":{"startLoc":{"col":20,"line":48},"endLoc":{"col":139,"line":64},"startBody":{"col":20,"line":48},"endBody":{"col":139,"line":64}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/field.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/field";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = () => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n};\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"field-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"field-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":42},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":42}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/field.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\nimport { uid } from \'react-uid\';\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\n\nimport { FieldContainer, useField } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\n    {({ getLabelProps, getInputProps, getHintProps }) => (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({}, { isDescribed: true })} />\n      </>\n    )}\n  </FieldContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const Field = ({ id }: { id: string }) => {\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\n    const [value, setVal] = React.useState(\'\');\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\n\n    return (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\n      </>\n    );\n  };\n\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FieldContainer\'\n};\n\nHook.story = {\n  name: \'useField\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useField\\` hook will supply the prop getters to handle \\`aria-labelledby\\` along\n      with for/id mapping and \\`aria-describedby\\` mapping when a hint is applied.`\n    }\n  }\n};\n\nexport default {\n  title: \'Field Container\',\n  decorators: [withKnobs],\n  component: FieldContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/field\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { uid } from \'react-uid\';\\\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FieldContainer, useField } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({}, { isDescribed: true })} />\\\\n      </>\\\\n    )}\\\\n  </FieldContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Field = ({ id }: { id: string }) => {\\\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\\\n    const [value, setVal] = React.useState(\'\');\\\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\\\n\\\\n    return (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FieldContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useField\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useField\\\\\\\\` hook will supply the prop getters to handle \\\\\\\\`aria-labelledby\\\\\\\\` along\\\\n      with for/id mapping and \\\\\\\\`aria-describedby\\\\\\\\` mapping when a hint is applied.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Field Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FieldContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useField hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"field-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"field-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":42}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/field.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { uid } from \'react-uid\';\\\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FieldContainer, useField } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({}, { isDescribed: true })} />\\\\n      </>\\\\n    )}\\\\n  </FieldContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Field = ({ id }: { id: string }) => {\\\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\\\n    const [value, setVal] = React.useState(\'\');\\\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\\\n\\\\n    return (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FieldContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useField\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useField\\\\\\\\` hook will supply the prop getters to handle \\\\\\\\`aria-labelledby\\\\\\\\` along\\\\n      with for/id mapping and \\\\\\\\`aria-describedby\\\\\\\\` mapping when a hint is applied.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Field Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FieldContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useField hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"field-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"field-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":42}}}},\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  },};\\n","locationsMap":{"field-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":46},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":46}},"field-container--hook":{"startLoc":{"col":20,"line":48},"endLoc":{"col":139,"line":64},"startBody":{"col":20,"line":48},"endBody":{"col":139,"line":64}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = () => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n};\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  }\\n};\\n","locationsMap":{"field-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"field-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":42},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":42}}}},\n    componentSubtitle: `A container component which wraps the useField hook.`\n  },};\n',__ADDS_MAP__={"field-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:68},startBody:{col:25,line:58},endBody:{col:277,line:68}},"field-container--hook":{startLoc:{col:20,line:70},endLoc:{col:277,line:86},startBody:{col:20,line:70},endBody:{col:277,line:86}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},Container=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/field",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/field";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = () => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n};\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"field-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"field-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":42},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":42}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/field.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\nimport { uid } from \'react-uid\';\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\n\nimport { FieldContainer, useField } from \'./src\';\n\nexport const Container = addSourceDecorator(() => (\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\n    {({ getLabelProps, getInputProps, getHintProps }) => (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({}, { isDescribed: true })} />\n      </>\n    )}\n  </FieldContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const Field = ({ id }: { id: string }) => {\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\n    const [value, setVal] = React.useState(\'\');\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\n\n    return (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\n      </>\n    );\n  };\n\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FieldContainer\'\n};\n\nHook.story = {\n  name: \'useField\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useField\\` hook will supply the prop getters to handle \\`aria-labelledby\\` along\n      with for/id mapping and \\`aria-describedby\\` mapping when a hint is applied.`\n    }\n  }\n};\n\nexport default {\n  title: \'Field Container\',\n  decorators: [withKnobs],\n  component: FieldContainer,\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = () => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n};\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  }\\n};\\n","locationsMap":{"field-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"field-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":42},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":42}}}},\n    componentSubtitle: `A container component which wraps the useField hook.`\n  },};\n',__ADDS_MAP__={"field-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:46},startBody:{col:25,line:36},endBody:{col:139,line:46}},"field-container--hook":{startLoc:{col:20,line:48},endLoc:{col:139,line:64},startBody:{col:20,line:48},endBody:{col:139,line:64}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(2).withSource,(addSourceDecorator=__webpack_require__(2).addSource)(addSourceDecorator(addSourceDecorator((function(){return react_default.a.createElement(FieldContainer,{id:Object(dist.text)("id",Object(es2015.a)({name:"FieldContainer"}))},(function(_ref){var getLabelProps=_ref.getLabelProps,getInputProps=_ref.getInputProps,getHintProps=_ref.getHintProps;return(react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("label",getLabelProps(),"Accessible Native Input"),react_default.a.createElement("div",getHintProps(),"Optional Hint"),react_default.a.createElement("input",getInputProps({},{isDescribed:!0}))))}))}),{__STORY__:__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\nimport { uid } from 'react-uid';\nimport { withKnobs, text } from '@storybook/addon-knobs';\n\nimport { FieldContainer, useField } from './src';\n\nexport const Container = () => (\n  <FieldContainer id={text('id', uid({ name: 'FieldContainer' }))}>\n    {({ getLabelProps, getInputProps, getHintProps }) => (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({}, { isDescribed: true })} />\n      </>\n    )}\n  </FieldContainer>\n);\n\nexport const Hook = () => {\n  const Field = ({ id }: { id: string }) => {\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\n    const [value, setVal] = React.useState('');\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\n\n    return (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\n      </>\n    );\n  };\n\n  return <Field id={text('id', uid({ name: 'useField' }))} />;\n};\n\nContainer.story = {\n  name: 'FieldContainer'\n};\n\nHook.story = {\n  name: 'useField',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useField\\` hook will supply the prop getters to handle \\`aria-labelledby\\` along\n      with for/id mapping and \\`aria-describedby\\` mapping when a hint is applied.`\n    }\n  }\n};\n\nexport default {\n  title: 'Field Container',\n  decorators: [withKnobs],\n  component: FieldContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useField hook.`\n  }\n};\n",__ADDS_MAP__:__ADDS_MAP__={"field-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:24},startBody:{col:25,line:14},endBody:{col:1,line:24}},"field-container--hook":{startLoc:{col:20,line:26},endLoc:{col:1,line:42},startBody:{col:20,line:26},endBody:{col:1,line:42}}},__MAIN_FILE_LOCATION__:"/field.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/home/circleci/project/packages/field",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/field.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/field.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){return react_default.a.createElement((function(_ref2){var _useField=useField(_ref2.id),getLabelProps=_useField.getLabelProps,getInputProps=_useField.getInputProps,getHintProps=_useField.getHintProps,_React$useState=react_default.a.useState(""),value=_React$useState[0],setVal=_React$useState[1];return(react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("label",getLabelProps(),"Accessible Native Input"),react_default.a.createElement("div",getHintProps(),"Optional Hint"),react_default.a.createElement("input",getInputProps({value:value,onChange:function(event){return setVal(event.target.value)}},{isDescribed:!0}))))}),{id:Object(dist.text)("id",Object(es2015.a)({name:"useField"}))})}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/field.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/field.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/field.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"FieldContainer"},Hook.story={name:"useField",parameters:{docs:{storyDescription:"The `useField` hook will supply the prop getters to handle `aria-labelledby` along\n      with for/id mapping and `aria-describedby` mapping when a hint is applied."}}};__webpack_exports__.default={title:"Field Container",decorators:[dist.withKnobs],component:FieldContainer,parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/field";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/field\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { uid } from \'react-uid\';\\\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FieldContainer, useField } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({}, { isDescribed: true })} />\\\\n      </>\\\\n    )}\\\\n  </FieldContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Field = ({ id }: { id: string }) => {\\\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\\\n    const [value, setVal] = React.useState(\'\');\\\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\\\n\\\\n    return (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FieldContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useField\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useField\\\\\\\\` hook will supply the prop getters to handle \\\\\\\\`aria-labelledby\\\\\\\\` along\\\\n      with for/id mapping and \\\\\\\\`aria-describedby\\\\\\\\` mapping when a hint is applied.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Field Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FieldContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useField hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"field-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"field-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":42}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/field.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { uid } from \'react-uid\';\\\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FieldContainer, useField } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({}, { isDescribed: true })} />\\\\n      </>\\\\n    )}\\\\n  </FieldContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Field = ({ id }: { id: string }) => {\\\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\\\n    const [value, setVal] = React.useState(\'\');\\\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\\\n\\\\n    return (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FieldContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useField\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useField\\\\\\\\` hook will supply the prop getters to handle \\\\\\\\`aria-labelledby\\\\\\\\` along\\\\n      with for/id mapping and \\\\\\\\`aria-describedby\\\\\\\\` mapping when a hint is applied.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Field Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FieldContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useField hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"field-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"field-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":42}}}},\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"field-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":46},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":46}},"field-container--hook":{"startLoc":{"col":20,"line":48},"endLoc":{"col":139,"line":64},"startBody":{"col":20,"line":48},"endBody":{"col":139,"line":64}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/field.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/field";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = () => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n};\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"field-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"field-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":42},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":42}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/field.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\nimport { uid } from \'react-uid\';\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\n\nimport { FieldContainer, useField } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\n    {({ getLabelProps, getInputProps, getHintProps }) => (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({}, { isDescribed: true })} />\n      </>\n    )}\n  </FieldContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const Field = ({ id }: { id: string }) => {\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\n    const [value, setVal] = React.useState(\'\');\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\n\n    return (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\n      </>\n    );\n  };\n\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FieldContainer\'\n};\n\nHook.story = {\n  name: \'useField\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useField\\` hook will supply the prop getters to handle \\`aria-labelledby\\` along\n      with for/id mapping and \\`aria-describedby\\` mapping when a hint is applied.`\n    }\n  }\n};\n\nexport default {\n  title: \'Field Container\',\n  decorators: [withKnobs],\n  component: FieldContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/field\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { uid } from \'react-uid\';\\\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FieldContainer, useField } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({}, { isDescribed: true })} />\\\\n      </>\\\\n    )}\\\\n  </FieldContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Field = ({ id }: { id: string }) => {\\\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\\\n    const [value, setVal] = React.useState(\'\');\\\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\\\n\\\\n    return (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FieldContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useField\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useField\\\\\\\\` hook will supply the prop getters to handle \\\\\\\\`aria-labelledby\\\\\\\\` along\\\\n      with for/id mapping and \\\\\\\\`aria-describedby\\\\\\\\` mapping when a hint is applied.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Field Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FieldContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useField hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"field-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"field-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":42}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/field.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { uid } from \'react-uid\';\\\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { FieldContainer, useField } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({}, { isDescribed: true })} />\\\\n      </>\\\\n    )}\\\\n  </FieldContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Field = ({ id }: { id: string }) => {\\\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\\\n    const [value, setVal] = React.useState(\'\');\\\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\\\n\\\\n    return (\\\\n      <>\\\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\\\n        <div {...getHintProps()}>Optional Hint</div>\\\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FieldContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useField\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useField\\\\\\\\` hook will supply the prop getters to handle \\\\\\\\`aria-labelledby\\\\\\\\` along\\\\n      with for/id mapping and \\\\\\\\`aria-describedby\\\\\\\\` mapping when a hint is applied.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Field Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FieldContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useField hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"field-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":24},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":24}},\\"field-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":26},\\"endLoc\\":{\\"col\\":1,\\"line\\":42},\\"startBody\\":{\\"col\\":20,\\"line\\":26},\\"endBody\\":{\\"col\\":1,\\"line\\":42}}}},\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  },};\\n","locationsMap":{"field-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":46},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":46}},"field-container--hook":{"startLoc":{"col":20,"line":48},"endLoc":{"col":139,"line":64},"startBody":{"col":20,"line":48},"endBody":{"col":139,"line":64}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = () => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n};\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  }\\n};\\n","locationsMap":{"field-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"field-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":42},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":42}}}},\n    componentSubtitle: `A container component which wraps the useField hook.`\n  },};\n',locationsMap:{"field-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:68},startBody:{col:25,line:58},endBody:{col:277,line:68}},"field-container--hook":{startLoc:{col:20,line:70},endLoc:{col:277,line:86},startBody:{col:20,line:70},endBody:{col:277,line:86}}}}},_parameters.storySource={source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/field";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = () => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n};\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"field-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"field-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":42},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":42}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/field.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\nimport { uid } from \'react-uid\';\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\n\nimport { FieldContainer, useField } from \'./src\';\n\nexport const Container = addSourceDecorator(() => (\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\n    {({ getLabelProps, getInputProps, getHintProps }) => (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({}, { isDescribed: true })} />\n      </>\n    )}\n  </FieldContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const Field = ({ id }: { id: string }) => {\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\n    const [value, setVal] = React.useState(\'\');\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\n\n    return (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\n      </>\n    );\n  };\n\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FieldContainer\'\n};\n\nHook.story = {\n  name: \'useField\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useField\\` hook will supply the prop getters to handle \\`aria-labelledby\\` along\n      with for/id mapping and \\`aria-describedby\\` mapping when a hint is applied.`\n    }\n  }\n};\n\nexport default {\n  title: \'Field Container\',\n  decorators: [withKnobs],\n  component: FieldContainer,\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { uid } from \'react-uid\';\\nimport { withKnobs, text } from \'@storybook/addon-knobs\';\\n\\nimport { FieldContainer, useField } from \'./src\';\\n\\nexport const Container = () => (\\n  <FieldContainer id={text(\'id\', uid({ name: \'FieldContainer\' }))}>\\n    {({ getLabelProps, getInputProps, getHintProps }) => (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({}, { isDescribed: true })} />\\n      </>\\n    )}\\n  </FieldContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Field = ({ id }: { id: string }) => {\\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\\n    const [value, setVal] = React.useState(\'\');\\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\\n\\n    return (\\n      <>\\n        <label {...getLabelProps()}>Accessible Native Input</label>\\n        <div {...getHintProps()}>Optional Hint</div>\\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\\n      </>\\n    );\\n  };\\n\\n  return <Field id={text(\'id\', uid({ name: \'useField\' }))} />;\\n};\\n\\nContainer.story = {\\n  name: \'FieldContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useField\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useField\\\\` hook will supply the prop getters to handle \\\\`aria-labelledby\\\\` along\\n      with for/id mapping and \\\\`aria-describedby\\\\` mapping when a hint is applied.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Field Container\',\\n  decorators: [withKnobs],\\n  component: FieldContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useField hook.`\\n  }\\n};\\n","locationsMap":{"field-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":24},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":24}},"field-container--hook":{"startLoc":{"col":20,"line":26},"endLoc":{"col":1,"line":42},"startBody":{"col":20,"line":26},"endBody":{"col":1,"line":42}}}},\n    componentSubtitle: `A container component which wraps the useField hook.`\n  },};\n',locationsMap:{"field-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:46},startBody:{col:25,line:36},endBody:{col:139,line:46}},"field-container--hook":{startLoc:{col:20,line:48},endLoc:{col:139,line:64},startBody:{col:20,line:48},endBody:{col:139,line:64}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\nimport { uid } from 'react-uid';\nimport { withKnobs, text } from '@storybook/addon-knobs';\n\nimport { FieldContainer, useField } from './src';\n\nexport const Container = () => (\n  <FieldContainer id={text('id', uid({ name: 'FieldContainer' }))}>\n    {({ getLabelProps, getInputProps, getHintProps }) => (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({}, { isDescribed: true })} />\n      </>\n    )}\n  </FieldContainer>\n);\n\nexport const Hook = () => {\n  const Field = ({ id }: { id: string }) => {\n    const { getLabelProps, getInputProps, getHintProps } = useField(id);\n    const [value, setVal] = React.useState('');\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => setVal(event.target.value);\n\n    return (\n      <>\n        <label {...getLabelProps()}>Accessible Native Input</label>\n        <div {...getHintProps()}>Optional Hint</div>\n        <input {...getInputProps({ value, onChange }, { isDescribed: true })} />\n      </>\n    );\n  };\n\n  return <Field id={text('id', uid({ name: 'useField' }))} />;\n};\n\nContainer.story = {\n  name: 'FieldContainer'\n};\n\nHook.story = {\n  name: 'useField',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useField\\` hook will supply the prop getters to handle \\`aria-labelledby\\` along\n      with for/id mapping and \\`aria-describedby\\` mapping when a hint is applied.`\n    }\n  }\n};\n\nexport default {\n  title: 'Field Container',\n  decorators: [withKnobs],\n  component: FieldContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useField hook.`\n  }\n};\n",locationsMap:{"field-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:24},startBody:{col:25,line:14},endBody:{col:1,line:24}},"field-container--hook":{startLoc:{col:20,line:26},endLoc:{col:1,line:42},startBody:{col:20,line:26},endBody:{col:1,line:42}}}},_parameters.componentSubtitle="A container component which wraps the useField hook.",_parameters)}},2817:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(234);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),styled_components_browser_esm=__webpack_require__(411),dist=__webpack_require__(4),esm_extends=__webpack_require__(1418),objectWithoutPropertiesLoose=__webpack_require__(1419),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),INPUT_TYPES_WHITE_LIST=(__webpack_require__(815),__webpack_require__(573),{text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0});function useFocusVisible(_temp){var _ref=void 0===_temp?{}:_temp,scope=_ref.scope,relativeDocument=_ref.relativeDocument,_ref$className=_ref.className,className=void 0===_ref$className?"garden-focus-visible":_ref$className,_ref$dataAttribute=_ref.dataAttribute,dataAttribute=void 0===_ref$dataAttribute?"data-garden-focus-visible":_ref$dataAttribute;if(!scope)throw new Error('Error: the useFocusVisible() hook requires a "scope" property');var hadKeyboardEvent=Object(react.useRef)(!1),hadFocusVisibleRecently=Object(react.useRef)(!1),hadFocusVisibleRecentlyTimeout=Object(react.useRef)();Object(react.useEffect)((function(){var environment=relativeDocument;environment||(environment=document);var isValidFocusTarget=function(el){return!!(el&&el!==scope.current&&"HTML"!==el.nodeName&&"BODY"!==el.nodeName&&"classList"in el&&"contains"in el.classList)},isFocused=function(el){return!(!el||!el.classList.contains(className)&&!el.hasAttribute(dataAttribute))},addFocusVisibleClass=function(el){isFocused(el)||(el&&el.classList.add(className),el&&el.setAttribute(dataAttribute,"true"))},onKeyDown=function(e){e.metaKey||e.altKey||e.ctrlKey||(isValidFocusTarget(environment.activeElement)&&addFocusVisibleClass(environment.activeElement),hadKeyboardEvent.current=!0)},onPointerDown=function(){hadKeyboardEvent.current=!1},onFocus=function(e){var el,type,tagName;isValidFocusTarget(e.target)&&((hadKeyboardEvent.current||(el=e.target,type=el.type,"INPUT"===(tagName=el.tagName)&&INPUT_TYPES_WHITE_LIST[type]&&!el.readOnly||"TEXTAREA"===tagName&&!el.readOnly||el.isContentEditable))&&addFocusVisibleClass(e.target))},onBlur=function(e){var el;if(isValidFocusTarget(e.target)&&isFocused(e.target)){hadFocusVisibleRecently.current=!0,clearTimeout(hadFocusVisibleRecentlyTimeout.current);var timeoutId=setTimeout((function(){hadFocusVisibleRecently.current=!1,clearTimeout(hadFocusVisibleRecentlyTimeout.current)}),100);hadFocusVisibleRecentlyTimeout.current=+timeoutId,(el=e.target).classList.remove(className),el.removeAttribute(dataAttribute)}},onInitialPointerMove=function(e){var nodeName=e.target.nodeName;nodeName&&"html"===nodeName.toLowerCase()||(hadKeyboardEvent.current=!1,removeInitialPointerMoveListeners())},removeInitialPointerMoveListeners=function(){environment.removeEventListener("mousemove",onInitialPointerMove),environment.removeEventListener("mousedown",onInitialPointerMove),environment.removeEventListener("mouseup",onInitialPointerMove),environment.removeEventListener("pointermove",onInitialPointerMove),environment.removeEventListener("pointerdown",onInitialPointerMove),environment.removeEventListener("pointerup",onInitialPointerMove),environment.removeEventListener("touchmove",onInitialPointerMove),environment.removeEventListener("touchstart",onInitialPointerMove),environment.removeEventListener("touchend",onInitialPointerMove)},onVisibilityChange=function(){"hidden"===environment.visibilityState&&hadFocusVisibleRecently.current&&(hadKeyboardEvent.current=!0)},currentScope=scope.current;if(environment&&currentScope)return environment.addEventListener("keydown",onKeyDown,!0),environment.addEventListener("mousedown",onPointerDown,!0),environment.addEventListener("pointerdown",onPointerDown,!0),environment.addEventListener("touchstart",onPointerDown,!0),environment.addEventListener("visibilitychange",onVisibilityChange,!0),environment.addEventListener("mousemove",onInitialPointerMove),environment.addEventListener("mousedown",onInitialPointerMove),environment.addEventListener("mouseup",onInitialPointerMove),environment.addEventListener("pointermove",onInitialPointerMove),environment.addEventListener("pointerdown",onInitialPointerMove),environment.addEventListener("pointerup",onInitialPointerMove),environment.addEventListener("touchmove",onInitialPointerMove),environment.addEventListener("touchstart",onInitialPointerMove),environment.addEventListener("touchend",onInitialPointerMove),currentScope&&currentScope.addEventListener("focus",onFocus,!0),currentScope&&currentScope.addEventListener("blur",onBlur,!0),function(){environment.removeEventListener("keydown",onKeyDown),environment.removeEventListener("mousedown",onPointerDown),environment.removeEventListener("pointerdown",onPointerDown),environment.removeEventListener("touchstart",onPointerDown),environment.removeEventListener("visibilityChange",onVisibilityChange),removeInitialPointerMoveListeners(),currentScope&&currentScope.removeEventListener("focus",onFocus),currentScope&&currentScope.removeEventListener("blur",onBlur),clearTimeout(hadFocusVisibleRecentlyTimeout.current)}}),[relativeDocument,scope,className,dataAttribute])}var FocusVisibleContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=Object(objectWithoutPropertiesLoose.a)(_ref,["children","render"]),scopeRef=Object(react.useRef)(null);return useFocusVisible(Object(esm_extends.a)({scope:scopeRef},options)),react_default.a.createElement(react_default.a.Fragment,null,render({ref:scopeRef}))};FocusVisibleContainer.defaultProps={className:"garden-focus-visible",dataAttribute:"data-garden-focus-visible"},FocusVisibleContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,relativeDocument:prop_types_default.a.object,className:prop_types_default.a.string,dataAttribute:prop_types_default.a.string},FocusVisibleContainer.__docgenInfo={description:"",methods:[],displayName:"FocusVisibleContainer",props:{className:{defaultValue:{value:"'garden-focus-visible'",computed:!1},type:{name:"string"},required:!1,description:"A class name applied to the element with `:focus-visible` behavior"},dataAttribute:{defaultValue:{value:"'data-garden-focus-visible'",computed:!1},type:{name:"string"},required:!1,description:"A data attribute applied to the element with `:focus-visible` behavior"},children:{type:{name:"func"},required:!1,description:"A children render prop function which receives a `ref`"},render:{type:{name:"func"},required:!1,description:"A render prop function which receives a `ref`"},relativeDocument:{type:{name:"object"},required:!1,description:"A relative document"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/focusvisible/src/FocusVisibleContainer.tsx"]={name:"FocusVisibleContainer",docgenInfo:FocusVisibleContainer.__docgenInfo,path:"packages/focusvisible/src/FocusVisibleContainer.tsx"});var useSelection=__webpack_require__(1415);__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook})),__webpack_require__.d(__webpack_exports__,"WithSelection",(function(){return WithSelection}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,"/home/circleci/project/packages/focusvisible"),__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { useFocusVisible, FocusVisibleContainer } from './src';\nimport { useSelection } from '../selection/src';\n\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\n  isSelected?: boolean;\n}\n\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\n  :focus {\n    outline: none;\n  }\n\n  &[data-garden-focus-visible] {\n    outline: 2px dashed red;\n  }\n`;\n\nconst StyledWrapper = styled.div`\n  * {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const Container = () => (\n  <FocusVisibleContainer>\n    {({ ref }) => (\n      <StyledWrapper ref={ref}>\n        <div>\n          <StyledCustomFocus as=\"button\">Hello world</StyledCustomFocus>\n        </div>\n        <div>\n          <StyledCustomFocus as=\"input\" />\n        </div>\n      </StyledWrapper>\n    )}\n  </FocusVisibleContainer>\n);\n\nexport const Hook = () => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useFocusVisible({ scope: ref });\n\n  return (\n    <StyledWrapper ref={ref}>\n      <div>\n        <StyledCustomFocus as=\"button\">Customized Button Focus</StyledCustomFocus>\n      </div>\n      <div>\n        <StyledCustomFocus as=\"input\" placeholder=\"Always shows focus\" aria-label=\"Example input\" />\n      </div>\n      <div>\n        <StyledCustomFocus tabIndex={0}>\n          <p>Focusable div content only shows focus with keyboard interaction</p>\n        </StyledCustomFocus>\n      </div>\n      <div>\n        <StyledCustomFocus\n          as=\"textarea\"\n          placeholder=\"Always shows focus\"\n          aria-label=\"Example textarea\"\n        />\n      </div>\n      <div>\n        <label>\n          <StyledCustomFocus as=\"input\" type=\"checkbox\" />\n          Only shows focus when keyed to\n        </label>\n      </div>\n    </StyledWrapper>\n  );\n};\n\nexport const WithSelection = () => {\n  const items = ['One', 'Two', 'Three'];\n\n  const StyledExampleContainer = styled.ul`\n    display: flex;\n  `;\n\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: 'li' })`\n    list-style: none;\n    margin: 16px;\n    padding: 8px;\n    text-align: center;\n    cursor: pointer;\n\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\n  `;\n\n  const Selection = () => {\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\n      defaultSelectedIndex: 0\n    });\n    const ref = useRef<HTMLUListElement>(null);\n\n    useFocusVisible({ scope: ref });\n\n    return (\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\n        {items.map(item => {\n          const itemRef = React.createRef();\n          const isSelected = selectedItem === item;\n\n          return (\n            <StyledExampleItem\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                isSelected\n              })}\n            >\n              {item}\n            </StyledExampleItem>\n          );\n        })}\n      </StyledExampleContainer>\n    );\n  };\n\n  return <Selection />;\n};\n\nContainer.story = {\n  name: 'FocusVisibleContainer'\n};\n\nHook.story = {\n  name: 'useFocusVisible',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusVisible\\` hook implements [\\`:focus-visible\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\n    }\n  }\n};\n\nWithSelection.story = {\n  name: 'Usage with useSelection',\n  parameters: {\n    docs: {\n      storyDescription: `The following story demonstrates using the \\`useFocusVisible\\` hook with the \\`useSelection\\` hook.`\n    }\n  }\n};\n\nexport default {\n  title: 'FocusVisible Container',\n  decorators: [withKnobs],\n  component: FocusVisibleContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\n  }\n};\n",__ADDS_MAP__={"focusvisible-container--container":{startLoc:{col:25,line:36},endLoc:{col:1,line:49},startBody:{col:25,line:36},endBody:{col:1,line:49}},"focusvisible-container--hook":{startLoc:{col:20,line:51},endLoc:{col:1,line:84},startBody:{col:20,line:51},endBody:{col:1,line:84}},"focusvisible-container--with-selection":{startLoc:{col:29,line:86},endLoc:{col:1,line:135},startBody:{col:29,line:86},endBody:{col:1,line:135}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},StyledCustomFocus=styled_components_browser_esm.a.div.withConfig({displayName:"focusvisiblestories__StyledCustomFocus",componentId:"x6r41u-0"})([":focus{outline:none;}&[data-garden-focus-visible]{outline:2px dashed red;}"]),StyledWrapper=styled_components_browser_esm.a.div.withConfig({displayName:"focusvisiblestories__StyledWrapper",componentId:"x6r41u-1"})(["*{margin-bottom:8px;}"]),Container=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){return react_default.a.createElement(FocusVisibleContainer,null,(function(_ref){var ref=_ref.ref;return(react_default.a.createElement(StyledWrapper,{ref:ref},react_default.a.createElement("div",null,react_default.a.createElement(StyledCustomFocus,{as:"button"},"Hello world")),react_default.a.createElement("div",null,react_default.a.createElement(StyledCustomFocus,{as:"input"}))))}))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusvisible.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusvisible.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusvisible.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var ref=Object(react.useRef)(null);return useFocusVisible({scope:ref}),react_default.a.createElement(StyledWrapper,{ref:ref},react_default.a.createElement("div",null,react_default.a.createElement(StyledCustomFocus,{as:"button"},"Customized Button Focus")),react_default.a.createElement("div",null,react_default.a.createElement(StyledCustomFocus,{as:"input",placeholder:"Always shows focus","aria-label":"Example input"})),react_default.a.createElement("div",null,react_default.a.createElement(StyledCustomFocus,{tabIndex:0},react_default.a.createElement("p",null,"Focusable div content only shows focus with keyboard interaction"))),react_default.a.createElement("div",null,react_default.a.createElement(StyledCustomFocus,{as:"textarea",placeholder:"Always shows focus","aria-label":"Example textarea"})),react_default.a.createElement("div",null,react_default.a.createElement("label",null,react_default.a.createElement(StyledCustomFocus,{as:"input",type:"checkbox"}),"Only shows focus when keyed to")))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusvisible.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusvisible.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusvisible.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),WithSelection=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var items=["One","Two","Three"],StyledExampleContainer=styled_components_browser_esm.a.ul.withConfig({displayName:"focusvisiblestories__StyledExampleContainer",componentId:"x6r41u-2"})(["display:flex;"]),StyledExampleItem=Object(styled_components_browser_esm.a)(StyledCustomFocus).attrs({as:"li"}).withConfig({displayName:"focusvisiblestories__StyledExampleItem",componentId:"x6r41u-3"})(["list-style:none;margin:16px;padding:8px;text-align:center;cursor:pointer;",""],(function(props){return props.isSelected&&"border-bottom: 4px solid blue"}));return(react_default.a.createElement((function(){var _useSelection=Object(useSelection.a)({defaultSelectedIndex:0}),selectedItem=_useSelection.selectedItem,getContainerProps=_useSelection.getContainerProps,getItemProps=_useSelection.getItemProps,ref=Object(react.useRef)(null);return useFocusVisible({scope:ref}),react_default.a.createElement(StyledExampleContainer,getContainerProps({ref:ref}),items.map((function(item){var itemRef=react_default.a.createRef();return(react_default.a.createElement(StyledExampleItem,getItemProps({key:item,item:item,focusRef:itemRef,isSelected:selectedItem===item}),item))})))}),null))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusvisible.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusvisible.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/focusvisible.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"FocusVisibleContainer"},Hook.story={name:"useFocusVisible",parameters:{docs:{storyDescription:"The `useFocusVisible` hook implements [`:focus-visible`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element."}}},WithSelection.story={name:"Usage with useSelection",parameters:{docs:{storyDescription:"The following story demonstrates using the `useFocusVisible` hook with the `useSelection` hook."}}};__webpack_exports__.default={title:"FocusVisible Container",decorators:[dist.withKnobs],component:FocusVisibleContainer,parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/focusvisible";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/focusvisible\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport styled from \'styled-components\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\\\nimport { useSelection } from \'../selection/src\';\\\\n\\\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\\\n  isSelected?: boolean;\\\\n}\\\\n\\\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\\\n  :focus {\\\\n    outline: none;\\\\n  }\\\\n\\\\n  &[data-garden-focus-visible] {\\\\n    outline: 2px dashed red;\\\\n  }\\\\n`;\\\\n\\\\nconst StyledWrapper = styled.div`\\\\n  * {\\\\n    margin-bottom: 8px;\\\\n  }\\\\n`;\\\\n\\\\nexport const Container = () => (\\\\n  <FocusVisibleContainer>\\\\n    {({ ref }) => (\\\\n      <StyledWrapper ref={ref}>\\\\n        <div>\\\\n          <StyledCustomFocus as=\\\\\\"button\\\\\\">Hello world</StyledCustomFocus>\\\\n        </div>\\\\n        <div>\\\\n          <StyledCustomFocus as=\\\\\\"input\\\\\\" />\\\\n        </div>\\\\n      </StyledWrapper>\\\\n    )}\\\\n  </FocusVisibleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const ref = useRef<HTMLDivElement>(null);\\\\n\\\\n  useFocusVisible({ scope: ref });\\\\n\\\\n  return (\\\\n    <StyledWrapper ref={ref}>\\\\n      <div>\\\\n        <StyledCustomFocus as=\\\\\\"button\\\\\\">Customized Button Focus</StyledCustomFocus>\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus as=\\\\\\"input\\\\\\" placeholder=\\\\\\"Always shows focus\\\\\\" aria-label=\\\\\\"Example input\\\\\\" />\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus tabIndex={0}>\\\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\\\n        </StyledCustomFocus>\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus\\\\n          as=\\\\\\"textarea\\\\\\"\\\\n          placeholder=\\\\\\"Always shows focus\\\\\\"\\\\n          aria-label=\\\\\\"Example textarea\\\\\\"\\\\n        />\\\\n      </div>\\\\n      <div>\\\\n        <label>\\\\n          <StyledCustomFocus as=\\\\\\"input\\\\\\" type=\\\\\\"checkbox\\\\\\" />\\\\n          Only shows focus when keyed to\\\\n        </label>\\\\n      </div>\\\\n    </StyledWrapper>\\\\n  );\\\\n};\\\\n\\\\nexport const WithSelection = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n\\\\n  const StyledExampleContainer = styled.ul`\\\\n    display: flex;\\\\n  `;\\\\n\\\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\\\n    list-style: none;\\\\n    margin: 16px;\\\\n    padding: 8px;\\\\n    text-align: center;\\\\n    cursor: pointer;\\\\n\\\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\\\n  `;\\\\n\\\\n  const Selection = () => {\\\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\\\n      defaultSelectedIndex: 0\\\\n    });\\\\n    const ref = useRef<HTMLUListElement>(null);\\\\n\\\\n    useFocusVisible({ scope: ref });\\\\n\\\\n    return (\\\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef();\\\\n          const isSelected = selectedItem === item;\\\\n\\\\n          return (\\\\n            <StyledExampleItem\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                isSelected\\\\n              })}\\\\n            >\\\\n              {item}\\\\n            </StyledExampleItem>\\\\n          );\\\\n        })}\\\\n      </StyledExampleContainer>\\\\n    );\\\\n  };\\\\n\\\\n  return <Selection />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusVisibleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusVisible\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusVisible\\\\\\\\` hook implements [\\\\\\\\`:focus-visible\\\\\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithSelection.story = {\\\\n  name: \'Usage with useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The following story demonstrates using the \\\\\\\\`useFocusVisible\\\\\\\\` hook with the \\\\\\\\`useSelection\\\\\\\\` hook.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusVisible Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusVisibleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"focusvisible-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":36},\\"endLoc\\":{\\"col\\":1,\\"line\\":49},\\"startBody\\":{\\"col\\":25,\\"line\\":36},\\"endBody\\":{\\"col\\":1,\\"line\\":49}},\\"focusvisible-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":51},\\"endLoc\\":{\\"col\\":1,\\"line\\":84},\\"startBody\\":{\\"col\\":20,\\"line\\":51},\\"endBody\\":{\\"col\\":1,\\"line\\":84}},\\"focusvisible-container--with-selection\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":86},\\"endLoc\\":{\\"col\\":1,\\"line\\":135},\\"startBody\\":{\\"col\\":29,\\"line\\":86},\\"endBody\\":{\\"col\\":1,\\"line\\":135}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/focusvisible.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport styled from \'styled-components\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\nimport { useSelection } from \'../selection/src\';\\n\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\n  isSelected?: boolean;\\n}\\n\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\n  :focus {\\n    outline: none;\\n  }\\n\\n  &[data-garden-focus-visible] {\\n    outline: 2px dashed red;\\n  }\\n`;\\n\\nconst StyledWrapper = styled.div`\\n  * {\\n    margin-bottom: 8px;\\n  }\\n`;\\n\\nexport const Container = addSourceDecorator(() => (\\n  <FocusVisibleContainer>\\n    {({ ref }) => (\\n      <StyledWrapper ref={ref}>\\n        <div>\\n          <StyledCustomFocus as=\\"button\\">Hello world</StyledCustomFocus>\\n        </div>\\n        <div>\\n          <StyledCustomFocus as=\\"input\\" />\\n        </div>\\n      </StyledWrapper>\\n    )}\\n  </FocusVisibleContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const ref = useRef<HTMLDivElement>(null);\\n\\n  useFocusVisible({ scope: ref });\\n\\n  return (\\n    <StyledWrapper ref={ref}>\\n      <div>\\n        <StyledCustomFocus as=\\"button\\">Customized Button Focus</StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus as=\\"input\\" placeholder=\\"Always shows focus\\" aria-label=\\"Example input\\" />\\n      </div>\\n      <div>\\n        <StyledCustomFocus tabIndex={0}>\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\n        </StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus\\n          as=\\"textarea\\"\\n          placeholder=\\"Always shows focus\\"\\n          aria-label=\\"Example textarea\\"\\n        />\\n      </div>\\n      <div>\\n        <label>\\n          <StyledCustomFocus as=\\"input\\" type=\\"checkbox\\" />\\n          Only shows focus when keyed to\\n        </label>\\n      </div>\\n    </StyledWrapper>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const WithSelection = addSourceDecorator(() => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n\\n  const StyledExampleContainer = styled.ul`\\n    display: flex;\\n  `;\\n\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\n    list-style: none;\\n    margin: 16px;\\n    padding: 8px;\\n    text-align: center;\\n    cursor: pointer;\\n\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\n  `;\\n\\n  const Selection = () => {\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\n      defaultSelectedIndex: 0\\n    });\\n    const ref = useRef<HTMLUListElement>(null);\\n\\n    useFocusVisible({ scope: ref });\\n\\n    return (\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\n        {items.map(item => {\\n          const itemRef = React.createRef();\\n          const isSelected = selectedItem === item;\\n\\n          return (\\n            <StyledExampleItem\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                isSelected\\n              })}\\n            >\\n              {item}\\n            </StyledExampleItem>\\n          );\\n        })}\\n      </StyledExampleContainer>\\n    );\\n  };\\n\\n  return <Selection />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FocusVisibleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusVisible\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusVisible\\\\` hook implements [\\\\`:focus-visible\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\n    }\\n  }\\n};\\n\\nWithSelection.story = {\\n  name: \'Usage with useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The following story demonstrates using the \\\\`useFocusVisible\\\\` hook with the \\\\`useSelection\\\\` hook.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusVisible Container\',\\n  decorators: [withKnobs],\\n  component: FocusVisibleContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport styled from \'styled-components\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\\\nimport { useSelection } from \'../selection/src\';\\\\n\\\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\\\n  isSelected?: boolean;\\\\n}\\\\n\\\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\\\n  :focus {\\\\n    outline: none;\\\\n  }\\\\n\\\\n  &[data-garden-focus-visible] {\\\\n    outline: 2px dashed red;\\\\n  }\\\\n`;\\\\n\\\\nconst StyledWrapper = styled.div`\\\\n  * {\\\\n    margin-bottom: 8px;\\\\n  }\\\\n`;\\\\n\\\\nexport const Container = () => (\\\\n  <FocusVisibleContainer>\\\\n    {({ ref }) => (\\\\n      <StyledWrapper ref={ref}>\\\\n        <div>\\\\n          <StyledCustomFocus as=\\\\\\"button\\\\\\">Hello world</StyledCustomFocus>\\\\n        </div>\\\\n        <div>\\\\n          <StyledCustomFocus as=\\\\\\"input\\\\\\" />\\\\n        </div>\\\\n      </StyledWrapper>\\\\n    )}\\\\n  </FocusVisibleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const ref = useRef<HTMLDivElement>(null);\\\\n\\\\n  useFocusVisible({ scope: ref });\\\\n\\\\n  return (\\\\n    <StyledWrapper ref={ref}>\\\\n      <div>\\\\n        <StyledCustomFocus as=\\\\\\"button\\\\\\">Customized Button Focus</StyledCustomFocus>\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus as=\\\\\\"input\\\\\\" placeholder=\\\\\\"Always shows focus\\\\\\" aria-label=\\\\\\"Example input\\\\\\" />\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus tabIndex={0}>\\\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\\\n        </StyledCustomFocus>\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus\\\\n          as=\\\\\\"textarea\\\\\\"\\\\n          placeholder=\\\\\\"Always shows focus\\\\\\"\\\\n          aria-label=\\\\\\"Example textarea\\\\\\"\\\\n        />\\\\n      </div>\\\\n      <div>\\\\n        <label>\\\\n          <StyledCustomFocus as=\\\\\\"input\\\\\\" type=\\\\\\"checkbox\\\\\\" />\\\\n          Only shows focus when keyed to\\\\n        </label>\\\\n      </div>\\\\n    </StyledWrapper>\\\\n  );\\\\n};\\\\n\\\\nexport const WithSelection = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n\\\\n  const StyledExampleContainer = styled.ul`\\\\n    display: flex;\\\\n  `;\\\\n\\\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\\\n    list-style: none;\\\\n    margin: 16px;\\\\n    padding: 8px;\\\\n    text-align: center;\\\\n    cursor: pointer;\\\\n\\\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\\\n  `;\\\\n\\\\n  const Selection = () => {\\\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\\\n      defaultSelectedIndex: 0\\\\n    });\\\\n    const ref = useRef<HTMLUListElement>(null);\\\\n\\\\n    useFocusVisible({ scope: ref });\\\\n\\\\n    return (\\\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef();\\\\n          const isSelected = selectedItem === item;\\\\n\\\\n          return (\\\\n            <StyledExampleItem\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                isSelected\\\\n              })}\\\\n            >\\\\n              {item}\\\\n            </StyledExampleItem>\\\\n          );\\\\n        })}\\\\n      </StyledExampleContainer>\\\\n    );\\\\n  };\\\\n\\\\n  return <Selection />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusVisibleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusVisible\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusVisible\\\\\\\\` hook implements [\\\\\\\\`:focus-visible\\\\\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithSelection.story = {\\\\n  name: \'Usage with useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The following story demonstrates using the \\\\\\\\`useFocusVisible\\\\\\\\` hook with the \\\\\\\\`useSelection\\\\\\\\` hook.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusVisible Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusVisibleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"focusvisible-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":36},\\"endLoc\\":{\\"col\\":1,\\"line\\":49},\\"startBody\\":{\\"col\\":25,\\"line\\":36},\\"endBody\\":{\\"col\\":1,\\"line\\":49}},\\"focusvisible-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":51},\\"endLoc\\":{\\"col\\":1,\\"line\\":84},\\"startBody\\":{\\"col\\":20,\\"line\\":51},\\"endBody\\":{\\"col\\":1,\\"line\\":84}},\\"focusvisible-container--with-selection\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":86},\\"endLoc\\":{\\"col\\":1,\\"line\\":135},\\"startBody\\":{\\"col\\":29,\\"line\\":86},\\"endBody\\":{\\"col\\":1,\\"line\\":135}}}},\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"focusvisible-container--container":{"startLoc":{"col":25,"line":58},"endLoc":{"col":139,"line":71},"startBody":{"col":25,"line":58},"endBody":{"col":139,"line":71}},"focusvisible-container--hook":{"startLoc":{"col":20,"line":73},"endLoc":{"col":139,"line":106},"startBody":{"col":20,"line":73},"endBody":{"col":139,"line":106}},"focusvisible-container--with-selection":{"startLoc":{"col":29,"line":108},"endLoc":{"col":139,"line":157},"startBody":{"col":29,"line":108},"endBody":{"col":139,"line":157}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/focusvisible.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/focusvisible";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport styled from \'styled-components\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\nimport { useSelection } from \'../selection/src\';\\n\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\n  isSelected?: boolean;\\n}\\n\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\n  :focus {\\n    outline: none;\\n  }\\n\\n  &[data-garden-focus-visible] {\\n    outline: 2px dashed red;\\n  }\\n`;\\n\\nconst StyledWrapper = styled.div`\\n  * {\\n    margin-bottom: 8px;\\n  }\\n`;\\n\\nexport const Container = () => (\\n  <FocusVisibleContainer>\\n    {({ ref }) => (\\n      <StyledWrapper ref={ref}>\\n        <div>\\n          <StyledCustomFocus as=\\"button\\">Hello world</StyledCustomFocus>\\n        </div>\\n        <div>\\n          <StyledCustomFocus as=\\"input\\" />\\n        </div>\\n      </StyledWrapper>\\n    )}\\n  </FocusVisibleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const ref = useRef<HTMLDivElement>(null);\\n\\n  useFocusVisible({ scope: ref });\\n\\n  return (\\n    <StyledWrapper ref={ref}>\\n      <div>\\n        <StyledCustomFocus as=\\"button\\">Customized Button Focus</StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus as=\\"input\\" placeholder=\\"Always shows focus\\" aria-label=\\"Example input\\" />\\n      </div>\\n      <div>\\n        <StyledCustomFocus tabIndex={0}>\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\n        </StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus\\n          as=\\"textarea\\"\\n          placeholder=\\"Always shows focus\\"\\n          aria-label=\\"Example textarea\\"\\n        />\\n      </div>\\n      <div>\\n        <label>\\n          <StyledCustomFocus as=\\"input\\" type=\\"checkbox\\" />\\n          Only shows focus when keyed to\\n        </label>\\n      </div>\\n    </StyledWrapper>\\n  );\\n};\\n\\nexport const WithSelection = () => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n\\n  const StyledExampleContainer = styled.ul`\\n    display: flex;\\n  `;\\n\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\n    list-style: none;\\n    margin: 16px;\\n    padding: 8px;\\n    text-align: center;\\n    cursor: pointer;\\n\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\n  `;\\n\\n  const Selection = () => {\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\n      defaultSelectedIndex: 0\\n    });\\n    const ref = useRef<HTMLUListElement>(null);\\n\\n    useFocusVisible({ scope: ref });\\n\\n    return (\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\n        {items.map(item => {\\n          const itemRef = React.createRef();\\n          const isSelected = selectedItem === item;\\n\\n          return (\\n            <StyledExampleItem\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                isSelected\\n              })}\\n            >\\n              {item}\\n            </StyledExampleItem>\\n          );\\n        })}\\n      </StyledExampleContainer>\\n    );\\n  };\\n\\n  return <Selection />;\\n};\\n\\nContainer.story = {\\n  name: \'FocusVisibleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusVisible\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusVisible\\\\` hook implements [\\\\`:focus-visible\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\n    }\\n  }\\n};\\n\\nWithSelection.story = {\\n  name: \'Usage with useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The following story demonstrates using the \\\\`useFocusVisible\\\\` hook with the \\\\`useSelection\\\\` hook.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusVisible Container\',\\n  decorators: [withKnobs],\\n  component: FocusVisibleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"focusvisible-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":1,"line":49},"startBody":{"col":25,"line":36},"endBody":{"col":1,"line":49}},"focusvisible-container--hook":{"startLoc":{"col":20,"line":51},"endLoc":{"col":1,"line":84},"startBody":{"col":20,"line":51},"endBody":{"col":1,"line":84}},"focusvisible-container--with-selection":{"startLoc":{"col":29,"line":86},"endLoc":{"col":1,"line":135},"startBody":{"col":29,"line":86},"endBody":{"col":1,"line":135}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/focusvisible.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from \'react\';\nimport styled from \'styled-components\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\nimport { useSelection } from \'../selection/src\';\n\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\n  isSelected?: boolean;\n}\n\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\n  :focus {\n    outline: none;\n  }\n\n  &[data-garden-focus-visible] {\n    outline: 2px dashed red;\n  }\n`;\n\nconst StyledWrapper = styled.div`\n  * {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <FocusVisibleContainer>\n    {({ ref }) => (\n      <StyledWrapper ref={ref}>\n        <div>\n          <StyledCustomFocus as="button">Hello world</StyledCustomFocus>\n        </div>\n        <div>\n          <StyledCustomFocus as="input" />\n        </div>\n      </StyledWrapper>\n    )}\n  </FocusVisibleContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useFocusVisible({ scope: ref });\n\n  return (\n    <StyledWrapper ref={ref}>\n      <div>\n        <StyledCustomFocus as="button">Customized Button Focus</StyledCustomFocus>\n      </div>\n      <div>\n        <StyledCustomFocus as="input" placeholder="Always shows focus" aria-label="Example input" />\n      </div>\n      <div>\n        <StyledCustomFocus tabIndex={0}>\n          <p>Focusable div content only shows focus with keyboard interaction</p>\n        </StyledCustomFocus>\n      </div>\n      <div>\n        <StyledCustomFocus\n          as="textarea"\n          placeholder="Always shows focus"\n          aria-label="Example textarea"\n        />\n      </div>\n      <div>\n        <label>\n          <StyledCustomFocus as="input" type="checkbox" />\n          Only shows focus when keyed to\n        </label>\n      </div>\n    </StyledWrapper>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const WithSelection = addSourceDecorator(addSourceDecorator(() => {\n  const items = [\'One\', \'Two\', \'Three\'];\n\n  const StyledExampleContainer = styled.ul`\n    display: flex;\n  `;\n\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\n    list-style: none;\n    margin: 16px;\n    padding: 8px;\n    text-align: center;\n    cursor: pointer;\n\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\n  `;\n\n  const Selection = () => {\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\n      defaultSelectedIndex: 0\n    });\n    const ref = useRef<HTMLUListElement>(null);\n\n    useFocusVisible({ scope: ref });\n\n    return (\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\n        {items.map(item => {\n          const itemRef = React.createRef();\n          const isSelected = selectedItem === item;\n\n          return (\n            <StyledExampleItem\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                isSelected\n              })}\n            >\n              {item}\n            </StyledExampleItem>\n          );\n        })}\n      </StyledExampleContainer>\n    );\n  };\n\n  return <Selection />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FocusVisibleContainer\'\n};\n\nHook.story = {\n  name: \'useFocusVisible\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusVisible\\` hook implements [\\`:focus-visible\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\n    }\n  }\n};\n\nWithSelection.story = {\n  name: \'Usage with useSelection\',\n  parameters: {\n    docs: {\n      storyDescription: `The following story demonstrates using the \\`useFocusVisible\\` hook with the \\`useSelection\\` hook.`\n    }\n  }\n};\n\nexport default {\n  title: \'FocusVisible Container\',\n  decorators: [withKnobs],\n  component: FocusVisibleContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/focusvisible\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport styled from \'styled-components\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\\\nimport { useSelection } from \'../selection/src\';\\\\n\\\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\\\n  isSelected?: boolean;\\\\n}\\\\n\\\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\\\n  :focus {\\\\n    outline: none;\\\\n  }\\\\n\\\\n  &[data-garden-focus-visible] {\\\\n    outline: 2px dashed red;\\\\n  }\\\\n`;\\\\n\\\\nconst StyledWrapper = styled.div`\\\\n  * {\\\\n    margin-bottom: 8px;\\\\n  }\\\\n`;\\\\n\\\\nexport const Container = () => (\\\\n  <FocusVisibleContainer>\\\\n    {({ ref }) => (\\\\n      <StyledWrapper ref={ref}>\\\\n        <div>\\\\n          <StyledCustomFocus as=\\\\\\"button\\\\\\">Hello world</StyledCustomFocus>\\\\n        </div>\\\\n        <div>\\\\n          <StyledCustomFocus as=\\\\\\"input\\\\\\" />\\\\n        </div>\\\\n      </StyledWrapper>\\\\n    )}\\\\n  </FocusVisibleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const ref = useRef<HTMLDivElement>(null);\\\\n\\\\n  useFocusVisible({ scope: ref });\\\\n\\\\n  return (\\\\n    <StyledWrapper ref={ref}>\\\\n      <div>\\\\n        <StyledCustomFocus as=\\\\\\"button\\\\\\">Customized Button Focus</StyledCustomFocus>\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus as=\\\\\\"input\\\\\\" placeholder=\\\\\\"Always shows focus\\\\\\" aria-label=\\\\\\"Example input\\\\\\" />\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus tabIndex={0}>\\\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\\\n        </StyledCustomFocus>\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus\\\\n          as=\\\\\\"textarea\\\\\\"\\\\n          placeholder=\\\\\\"Always shows focus\\\\\\"\\\\n          aria-label=\\\\\\"Example textarea\\\\\\"\\\\n        />\\\\n      </div>\\\\n      <div>\\\\n        <label>\\\\n          <StyledCustomFocus as=\\\\\\"input\\\\\\" type=\\\\\\"checkbox\\\\\\" />\\\\n          Only shows focus when keyed to\\\\n        </label>\\\\n      </div>\\\\n    </StyledWrapper>\\\\n  );\\\\n};\\\\n\\\\nexport const WithSelection = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n\\\\n  const StyledExampleContainer = styled.ul`\\\\n    display: flex;\\\\n  `;\\\\n\\\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\\\n    list-style: none;\\\\n    margin: 16px;\\\\n    padding: 8px;\\\\n    text-align: center;\\\\n    cursor: pointer;\\\\n\\\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\\\n  `;\\\\n\\\\n  const Selection = () => {\\\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\\\n      defaultSelectedIndex: 0\\\\n    });\\\\n    const ref = useRef<HTMLUListElement>(null);\\\\n\\\\n    useFocusVisible({ scope: ref });\\\\n\\\\n    return (\\\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef();\\\\n          const isSelected = selectedItem === item;\\\\n\\\\n          return (\\\\n            <StyledExampleItem\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                isSelected\\\\n              })}\\\\n            >\\\\n              {item}\\\\n            </StyledExampleItem>\\\\n          );\\\\n        })}\\\\n      </StyledExampleContainer>\\\\n    );\\\\n  };\\\\n\\\\n  return <Selection />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusVisibleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusVisible\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusVisible\\\\\\\\` hook implements [\\\\\\\\`:focus-visible\\\\\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithSelection.story = {\\\\n  name: \'Usage with useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The following story demonstrates using the \\\\\\\\`useFocusVisible\\\\\\\\` hook with the \\\\\\\\`useSelection\\\\\\\\` hook.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusVisible Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusVisibleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"focusvisible-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":36},\\"endLoc\\":{\\"col\\":1,\\"line\\":49},\\"startBody\\":{\\"col\\":25,\\"line\\":36},\\"endBody\\":{\\"col\\":1,\\"line\\":49}},\\"focusvisible-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":51},\\"endLoc\\":{\\"col\\":1,\\"line\\":84},\\"startBody\\":{\\"col\\":20,\\"line\\":51},\\"endBody\\":{\\"col\\":1,\\"line\\":84}},\\"focusvisible-container--with-selection\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":86},\\"endLoc\\":{\\"col\\":1,\\"line\\":135},\\"startBody\\":{\\"col\\":29,\\"line\\":86},\\"endBody\\":{\\"col\\":1,\\"line\\":135}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/focusvisible.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport styled from \'styled-components\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\nimport { useSelection } from \'../selection/src\';\\n\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\n  isSelected?: boolean;\\n}\\n\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\n  :focus {\\n    outline: none;\\n  }\\n\\n  &[data-garden-focus-visible] {\\n    outline: 2px dashed red;\\n  }\\n`;\\n\\nconst StyledWrapper = styled.div`\\n  * {\\n    margin-bottom: 8px;\\n  }\\n`;\\n\\nexport const Container = addSourceDecorator(() => (\\n  <FocusVisibleContainer>\\n    {({ ref }) => (\\n      <StyledWrapper ref={ref}>\\n        <div>\\n          <StyledCustomFocus as=\\"button\\">Hello world</StyledCustomFocus>\\n        </div>\\n        <div>\\n          <StyledCustomFocus as=\\"input\\" />\\n        </div>\\n      </StyledWrapper>\\n    )}\\n  </FocusVisibleContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const ref = useRef<HTMLDivElement>(null);\\n\\n  useFocusVisible({ scope: ref });\\n\\n  return (\\n    <StyledWrapper ref={ref}>\\n      <div>\\n        <StyledCustomFocus as=\\"button\\">Customized Button Focus</StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus as=\\"input\\" placeholder=\\"Always shows focus\\" aria-label=\\"Example input\\" />\\n      </div>\\n      <div>\\n        <StyledCustomFocus tabIndex={0}>\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\n        </StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus\\n          as=\\"textarea\\"\\n          placeholder=\\"Always shows focus\\"\\n          aria-label=\\"Example textarea\\"\\n        />\\n      </div>\\n      <div>\\n        <label>\\n          <StyledCustomFocus as=\\"input\\" type=\\"checkbox\\" />\\n          Only shows focus when keyed to\\n        </label>\\n      </div>\\n    </StyledWrapper>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const WithSelection = addSourceDecorator(() => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n\\n  const StyledExampleContainer = styled.ul`\\n    display: flex;\\n  `;\\n\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\n    list-style: none;\\n    margin: 16px;\\n    padding: 8px;\\n    text-align: center;\\n    cursor: pointer;\\n\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\n  `;\\n\\n  const Selection = () => {\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\n      defaultSelectedIndex: 0\\n    });\\n    const ref = useRef<HTMLUListElement>(null);\\n\\n    useFocusVisible({ scope: ref });\\n\\n    return (\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\n        {items.map(item => {\\n          const itemRef = React.createRef();\\n          const isSelected = selectedItem === item;\\n\\n          return (\\n            <StyledExampleItem\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                isSelected\\n              })}\\n            >\\n              {item}\\n            </StyledExampleItem>\\n          );\\n        })}\\n      </StyledExampleContainer>\\n    );\\n  };\\n\\n  return <Selection />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'FocusVisibleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusVisible\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusVisible\\\\` hook implements [\\\\`:focus-visible\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\n    }\\n  }\\n};\\n\\nWithSelection.story = {\\n  name: \'Usage with useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The following story demonstrates using the \\\\`useFocusVisible\\\\` hook with the \\\\`useSelection\\\\` hook.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusVisible Container\',\\n  decorators: [withKnobs],\\n  component: FocusVisibleContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef } from \'react\';\\\\nimport styled from \'styled-components\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\\\nimport { useSelection } from \'../selection/src\';\\\\n\\\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\\\n  isSelected?: boolean;\\\\n}\\\\n\\\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\\\n  :focus {\\\\n    outline: none;\\\\n  }\\\\n\\\\n  &[data-garden-focus-visible] {\\\\n    outline: 2px dashed red;\\\\n  }\\\\n`;\\\\n\\\\nconst StyledWrapper = styled.div`\\\\n  * {\\\\n    margin-bottom: 8px;\\\\n  }\\\\n`;\\\\n\\\\nexport const Container = () => (\\\\n  <FocusVisibleContainer>\\\\n    {({ ref }) => (\\\\n      <StyledWrapper ref={ref}>\\\\n        <div>\\\\n          <StyledCustomFocus as=\\\\\\"button\\\\\\">Hello world</StyledCustomFocus>\\\\n        </div>\\\\n        <div>\\\\n          <StyledCustomFocus as=\\\\\\"input\\\\\\" />\\\\n        </div>\\\\n      </StyledWrapper>\\\\n    )}\\\\n  </FocusVisibleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const ref = useRef<HTMLDivElement>(null);\\\\n\\\\n  useFocusVisible({ scope: ref });\\\\n\\\\n  return (\\\\n    <StyledWrapper ref={ref}>\\\\n      <div>\\\\n        <StyledCustomFocus as=\\\\\\"button\\\\\\">Customized Button Focus</StyledCustomFocus>\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus as=\\\\\\"input\\\\\\" placeholder=\\\\\\"Always shows focus\\\\\\" aria-label=\\\\\\"Example input\\\\\\" />\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus tabIndex={0}>\\\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\\\n        </StyledCustomFocus>\\\\n      </div>\\\\n      <div>\\\\n        <StyledCustomFocus\\\\n          as=\\\\\\"textarea\\\\\\"\\\\n          placeholder=\\\\\\"Always shows focus\\\\\\"\\\\n          aria-label=\\\\\\"Example textarea\\\\\\"\\\\n        />\\\\n      </div>\\\\n      <div>\\\\n        <label>\\\\n          <StyledCustomFocus as=\\\\\\"input\\\\\\" type=\\\\\\"checkbox\\\\\\" />\\\\n          Only shows focus when keyed to\\\\n        </label>\\\\n      </div>\\\\n    </StyledWrapper>\\\\n  );\\\\n};\\\\n\\\\nexport const WithSelection = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n\\\\n  const StyledExampleContainer = styled.ul`\\\\n    display: flex;\\\\n  `;\\\\n\\\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\\\n    list-style: none;\\\\n    margin: 16px;\\\\n    padding: 8px;\\\\n    text-align: center;\\\\n    cursor: pointer;\\\\n\\\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\\\n  `;\\\\n\\\\n  const Selection = () => {\\\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\\\n      defaultSelectedIndex: 0\\\\n    });\\\\n    const ref = useRef<HTMLUListElement>(null);\\\\n\\\\n    useFocusVisible({ scope: ref });\\\\n\\\\n    return (\\\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef();\\\\n          const isSelected = selectedItem === item;\\\\n\\\\n          return (\\\\n            <StyledExampleItem\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                isSelected\\\\n              })}\\\\n            >\\\\n              {item}\\\\n            </StyledExampleItem>\\\\n          );\\\\n        })}\\\\n      </StyledExampleContainer>\\\\n    );\\\\n  };\\\\n\\\\n  return <Selection />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'FocusVisibleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useFocusVisible\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useFocusVisible\\\\\\\\` hook implements [\\\\\\\\`:focus-visible\\\\\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nWithSelection.story = {\\\\n  name: \'Usage with useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The following story demonstrates using the \\\\\\\\`useFocusVisible\\\\\\\\` hook with the \\\\\\\\`useSelection\\\\\\\\` hook.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'FocusVisible Container\',\\\\n  decorators: [withKnobs],\\\\n  component: FocusVisibleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"focusvisible-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":36},\\"endLoc\\":{\\"col\\":1,\\"line\\":49},\\"startBody\\":{\\"col\\":25,\\"line\\":36},\\"endBody\\":{\\"col\\":1,\\"line\\":49}},\\"focusvisible-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":51},\\"endLoc\\":{\\"col\\":1,\\"line\\":84},\\"startBody\\":{\\"col\\":20,\\"line\\":51},\\"endBody\\":{\\"col\\":1,\\"line\\":84}},\\"focusvisible-container--with-selection\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":86},\\"endLoc\\":{\\"col\\":1,\\"line\\":135},\\"startBody\\":{\\"col\\":29,\\"line\\":86},\\"endBody\\":{\\"col\\":1,\\"line\\":135}}}},\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\n  },};\\n","locationsMap":{"focusvisible-container--container":{"startLoc":{"col":25,"line":58},"endLoc":{"col":139,"line":71},"startBody":{"col":25,"line":58},"endBody":{"col":139,"line":71}},"focusvisible-container--hook":{"startLoc":{"col":20,"line":73},"endLoc":{"col":139,"line":106},"startBody":{"col":20,"line":73},"endBody":{"col":139,"line":106}},"focusvisible-container--with-selection":{"startLoc":{"col":29,"line":108},"endLoc":{"col":139,"line":157},"startBody":{"col":29,"line":108},"endBody":{"col":139,"line":157}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport styled from \'styled-components\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\nimport { useSelection } from \'../selection/src\';\\n\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\n  isSelected?: boolean;\\n}\\n\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\n  :focus {\\n    outline: none;\\n  }\\n\\n  &[data-garden-focus-visible] {\\n    outline: 2px dashed red;\\n  }\\n`;\\n\\nconst StyledWrapper = styled.div`\\n  * {\\n    margin-bottom: 8px;\\n  }\\n`;\\n\\nexport const Container = () => (\\n  <FocusVisibleContainer>\\n    {({ ref }) => (\\n      <StyledWrapper ref={ref}>\\n        <div>\\n          <StyledCustomFocus as=\\"button\\">Hello world</StyledCustomFocus>\\n        </div>\\n        <div>\\n          <StyledCustomFocus as=\\"input\\" />\\n        </div>\\n      </StyledWrapper>\\n    )}\\n  </FocusVisibleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const ref = useRef<HTMLDivElement>(null);\\n\\n  useFocusVisible({ scope: ref });\\n\\n  return (\\n    <StyledWrapper ref={ref}>\\n      <div>\\n        <StyledCustomFocus as=\\"button\\">Customized Button Focus</StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus as=\\"input\\" placeholder=\\"Always shows focus\\" aria-label=\\"Example input\\" />\\n      </div>\\n      <div>\\n        <StyledCustomFocus tabIndex={0}>\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\n        </StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus\\n          as=\\"textarea\\"\\n          placeholder=\\"Always shows focus\\"\\n          aria-label=\\"Example textarea\\"\\n        />\\n      </div>\\n      <div>\\n        <label>\\n          <StyledCustomFocus as=\\"input\\" type=\\"checkbox\\" />\\n          Only shows focus when keyed to\\n        </label>\\n      </div>\\n    </StyledWrapper>\\n  );\\n};\\n\\nexport const WithSelection = () => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n\\n  const StyledExampleContainer = styled.ul`\\n    display: flex;\\n  `;\\n\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\n    list-style: none;\\n    margin: 16px;\\n    padding: 8px;\\n    text-align: center;\\n    cursor: pointer;\\n\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\n  `;\\n\\n  const Selection = () => {\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\n      defaultSelectedIndex: 0\\n    });\\n    const ref = useRef<HTMLUListElement>(null);\\n\\n    useFocusVisible({ scope: ref });\\n\\n    return (\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\n        {items.map(item => {\\n          const itemRef = React.createRef();\\n          const isSelected = selectedItem === item;\\n\\n          return (\\n            <StyledExampleItem\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                isSelected\\n              })}\\n            >\\n              {item}\\n            </StyledExampleItem>\\n          );\\n        })}\\n      </StyledExampleContainer>\\n    );\\n  };\\n\\n  return <Selection />;\\n};\\n\\nContainer.story = {\\n  name: \'FocusVisibleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusVisible\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusVisible\\\\` hook implements [\\\\`:focus-visible\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\n    }\\n  }\\n};\\n\\nWithSelection.story = {\\n  name: \'Usage with useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The following story demonstrates using the \\\\`useFocusVisible\\\\` hook with the \\\\`useSelection\\\\` hook.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusVisible Container\',\\n  decorators: [withKnobs],\\n  component: FocusVisibleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\n  }\\n};\\n","locationsMap":{"focusvisible-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":1,"line":49},"startBody":{"col":25,"line":36},"endBody":{"col":1,"line":49}},"focusvisible-container--hook":{"startLoc":{"col":20,"line":51},"endLoc":{"col":1,"line":84},"startBody":{"col":20,"line":51},"endBody":{"col":1,"line":84}},"focusvisible-container--with-selection":{"startLoc":{"col":29,"line":86},"endLoc":{"col":1,"line":135},"startBody":{"col":29,"line":86},"endBody":{"col":1,"line":135}}}},\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\n  },};\n',locationsMap:{"focusvisible-container--container":{startLoc:{col:25,line:80},endLoc:{col:277,line:93},startBody:{col:25,line:80},endBody:{col:277,line:93}},"focusvisible-container--hook":{startLoc:{col:20,line:95},endLoc:{col:277,line:128},startBody:{col:20,line:95},endBody:{col:277,line:128}},"focusvisible-container--with-selection":{startLoc:{col:29,line:130},endLoc:{col:277,line:179},startBody:{col:29,line:130},endBody:{col:277,line:179}}}}},_parameters.storySource={source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/focusvisible";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport styled from \'styled-components\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\nimport { useSelection } from \'../selection/src\';\\n\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\n  isSelected?: boolean;\\n}\\n\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\n  :focus {\\n    outline: none;\\n  }\\n\\n  &[data-garden-focus-visible] {\\n    outline: 2px dashed red;\\n  }\\n`;\\n\\nconst StyledWrapper = styled.div`\\n  * {\\n    margin-bottom: 8px;\\n  }\\n`;\\n\\nexport const Container = () => (\\n  <FocusVisibleContainer>\\n    {({ ref }) => (\\n      <StyledWrapper ref={ref}>\\n        <div>\\n          <StyledCustomFocus as=\\"button\\">Hello world</StyledCustomFocus>\\n        </div>\\n        <div>\\n          <StyledCustomFocus as=\\"input\\" />\\n        </div>\\n      </StyledWrapper>\\n    )}\\n  </FocusVisibleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const ref = useRef<HTMLDivElement>(null);\\n\\n  useFocusVisible({ scope: ref });\\n\\n  return (\\n    <StyledWrapper ref={ref}>\\n      <div>\\n        <StyledCustomFocus as=\\"button\\">Customized Button Focus</StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus as=\\"input\\" placeholder=\\"Always shows focus\\" aria-label=\\"Example input\\" />\\n      </div>\\n      <div>\\n        <StyledCustomFocus tabIndex={0}>\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\n        </StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus\\n          as=\\"textarea\\"\\n          placeholder=\\"Always shows focus\\"\\n          aria-label=\\"Example textarea\\"\\n        />\\n      </div>\\n      <div>\\n        <label>\\n          <StyledCustomFocus as=\\"input\\" type=\\"checkbox\\" />\\n          Only shows focus when keyed to\\n        </label>\\n      </div>\\n    </StyledWrapper>\\n  );\\n};\\n\\nexport const WithSelection = () => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n\\n  const StyledExampleContainer = styled.ul`\\n    display: flex;\\n  `;\\n\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\n    list-style: none;\\n    margin: 16px;\\n    padding: 8px;\\n    text-align: center;\\n    cursor: pointer;\\n\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\n  `;\\n\\n  const Selection = () => {\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\n      defaultSelectedIndex: 0\\n    });\\n    const ref = useRef<HTMLUListElement>(null);\\n\\n    useFocusVisible({ scope: ref });\\n\\n    return (\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\n        {items.map(item => {\\n          const itemRef = React.createRef();\\n          const isSelected = selectedItem === item;\\n\\n          return (\\n            <StyledExampleItem\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                isSelected\\n              })}\\n            >\\n              {item}\\n            </StyledExampleItem>\\n          );\\n        })}\\n      </StyledExampleContainer>\\n    );\\n  };\\n\\n  return <Selection />;\\n};\\n\\nContainer.story = {\\n  name: \'FocusVisibleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusVisible\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusVisible\\\\` hook implements [\\\\`:focus-visible\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\n    }\\n  }\\n};\\n\\nWithSelection.story = {\\n  name: \'Usage with useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The following story demonstrates using the \\\\`useFocusVisible\\\\` hook with the \\\\`useSelection\\\\` hook.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusVisible Container\',\\n  decorators: [withKnobs],\\n  component: FocusVisibleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"focusvisible-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":1,"line":49},"startBody":{"col":25,"line":36},"endBody":{"col":1,"line":49}},"focusvisible-container--hook":{"startLoc":{"col":20,"line":51},"endLoc":{"col":1,"line":84},"startBody":{"col":20,"line":51},"endBody":{"col":1,"line":84}},"focusvisible-container--with-selection":{"startLoc":{"col":29,"line":86},"endLoc":{"col":1,"line":135},"startBody":{"col":29,"line":86},"endBody":{"col":1,"line":135}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/focusvisible.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from \'react\';\nimport styled from \'styled-components\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\nimport { useSelection } from \'../selection/src\';\n\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\n  isSelected?: boolean;\n}\n\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\n  :focus {\n    outline: none;\n  }\n\n  &[data-garden-focus-visible] {\n    outline: 2px dashed red;\n  }\n`;\n\nconst StyledWrapper = styled.div`\n  * {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const Container = addSourceDecorator(() => (\n  <FocusVisibleContainer>\n    {({ ref }) => (\n      <StyledWrapper ref={ref}>\n        <div>\n          <StyledCustomFocus as="button">Hello world</StyledCustomFocus>\n        </div>\n        <div>\n          <StyledCustomFocus as="input" />\n        </div>\n      </StyledWrapper>\n    )}\n  </FocusVisibleContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useFocusVisible({ scope: ref });\n\n  return (\n    <StyledWrapper ref={ref}>\n      <div>\n        <StyledCustomFocus as="button">Customized Button Focus</StyledCustomFocus>\n      </div>\n      <div>\n        <StyledCustomFocus as="input" placeholder="Always shows focus" aria-label="Example input" />\n      </div>\n      <div>\n        <StyledCustomFocus tabIndex={0}>\n          <p>Focusable div content only shows focus with keyboard interaction</p>\n        </StyledCustomFocus>\n      </div>\n      <div>\n        <StyledCustomFocus\n          as="textarea"\n          placeholder="Always shows focus"\n          aria-label="Example textarea"\n        />\n      </div>\n      <div>\n        <label>\n          <StyledCustomFocus as="input" type="checkbox" />\n          Only shows focus when keyed to\n        </label>\n      </div>\n    </StyledWrapper>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const WithSelection = addSourceDecorator(() => {\n  const items = [\'One\', \'Two\', \'Three\'];\n\n  const StyledExampleContainer = styled.ul`\n    display: flex;\n  `;\n\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\n    list-style: none;\n    margin: 16px;\n    padding: 8px;\n    text-align: center;\n    cursor: pointer;\n\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\n  `;\n\n  const Selection = () => {\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\n      defaultSelectedIndex: 0\n    });\n    const ref = useRef<HTMLUListElement>(null);\n\n    useFocusVisible({ scope: ref });\n\n    return (\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\n        {items.map(item => {\n          const itemRef = React.createRef();\n          const isSelected = selectedItem === item;\n\n          return (\n            <StyledExampleItem\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                isSelected\n              })}\n            >\n              {item}\n            </StyledExampleItem>\n          );\n        })}\n      </StyledExampleContainer>\n    );\n  };\n\n  return <Selection />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'FocusVisibleContainer\'\n};\n\nHook.story = {\n  name: \'useFocusVisible\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusVisible\\` hook implements [\\`:focus-visible\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\n    }\n  }\n};\n\nWithSelection.story = {\n  name: \'Usage with useSelection\',\n  parameters: {\n    docs: {\n      storyDescription: `The following story demonstrates using the \\`useFocusVisible\\` hook with the \\`useSelection\\` hook.`\n    }\n  }\n};\n\nexport default {\n  title: \'FocusVisible Container\',\n  decorators: [withKnobs],\n  component: FocusVisibleContainer,\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef } from \'react\';\\nimport styled from \'styled-components\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { useFocusVisible, FocusVisibleContainer } from \'./src\';\\nimport { useSelection } from \'../selection/src\';\\n\\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\\n  isSelected?: boolean;\\n}\\n\\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\\n  :focus {\\n    outline: none;\\n  }\\n\\n  &[data-garden-focus-visible] {\\n    outline: 2px dashed red;\\n  }\\n`;\\n\\nconst StyledWrapper = styled.div`\\n  * {\\n    margin-bottom: 8px;\\n  }\\n`;\\n\\nexport const Container = () => (\\n  <FocusVisibleContainer>\\n    {({ ref }) => (\\n      <StyledWrapper ref={ref}>\\n        <div>\\n          <StyledCustomFocus as=\\"button\\">Hello world</StyledCustomFocus>\\n        </div>\\n        <div>\\n          <StyledCustomFocus as=\\"input\\" />\\n        </div>\\n      </StyledWrapper>\\n    )}\\n  </FocusVisibleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const ref = useRef<HTMLDivElement>(null);\\n\\n  useFocusVisible({ scope: ref });\\n\\n  return (\\n    <StyledWrapper ref={ref}>\\n      <div>\\n        <StyledCustomFocus as=\\"button\\">Customized Button Focus</StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus as=\\"input\\" placeholder=\\"Always shows focus\\" aria-label=\\"Example input\\" />\\n      </div>\\n      <div>\\n        <StyledCustomFocus tabIndex={0}>\\n          <p>Focusable div content only shows focus with keyboard interaction</p>\\n        </StyledCustomFocus>\\n      </div>\\n      <div>\\n        <StyledCustomFocus\\n          as=\\"textarea\\"\\n          placeholder=\\"Always shows focus\\"\\n          aria-label=\\"Example textarea\\"\\n        />\\n      </div>\\n      <div>\\n        <label>\\n          <StyledCustomFocus as=\\"input\\" type=\\"checkbox\\" />\\n          Only shows focus when keyed to\\n        </label>\\n      </div>\\n    </StyledWrapper>\\n  );\\n};\\n\\nexport const WithSelection = () => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n\\n  const StyledExampleContainer = styled.ul`\\n    display: flex;\\n  `;\\n\\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: \'li\' })`\\n    list-style: none;\\n    margin: 16px;\\n    padding: 8px;\\n    text-align: center;\\n    cursor: pointer;\\n\\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\\n  `;\\n\\n  const Selection = () => {\\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\\n      defaultSelectedIndex: 0\\n    });\\n    const ref = useRef<HTMLUListElement>(null);\\n\\n    useFocusVisible({ scope: ref });\\n\\n    return (\\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\\n        {items.map(item => {\\n          const itemRef = React.createRef();\\n          const isSelected = selectedItem === item;\\n\\n          return (\\n            <StyledExampleItem\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                isSelected\\n              })}\\n            >\\n              {item}\\n            </StyledExampleItem>\\n          );\\n        })}\\n      </StyledExampleContainer>\\n    );\\n  };\\n\\n  return <Selection />;\\n};\\n\\nContainer.story = {\\n  name: \'FocusVisibleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useFocusVisible\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useFocusVisible\\\\` hook implements [\\\\`:focus-visible\\\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\\n    }\\n  }\\n};\\n\\nWithSelection.story = {\\n  name: \'Usage with useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The following story demonstrates using the \\\\`useFocusVisible\\\\` hook with the \\\\`useSelection\\\\` hook.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'FocusVisible Container\',\\n  decorators: [withKnobs],\\n  component: FocusVisibleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\\n  }\\n};\\n","locationsMap":{"focusvisible-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":1,"line":49},"startBody":{"col":25,"line":36},"endBody":{"col":1,"line":49}},"focusvisible-container--hook":{"startLoc":{"col":20,"line":51},"endLoc":{"col":1,"line":84},"startBody":{"col":20,"line":51},"endBody":{"col":1,"line":84}},"focusvisible-container--with-selection":{"startLoc":{"col":29,"line":86},"endLoc":{"col":1,"line":135},"startBody":{"col":29,"line":86},"endBody":{"col":1,"line":135}}}},\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\n  },};\n',locationsMap:{"focusvisible-container--container":{startLoc:{col:25,line:58},endLoc:{col:139,line:71},startBody:{col:25,line:58},endBody:{col:139,line:71}},"focusvisible-container--hook":{startLoc:{col:20,line:73},endLoc:{col:139,line:106},startBody:{col:20,line:73},endBody:{col:139,line:106}},"focusvisible-container--with-selection":{startLoc:{col:29,line:108},endLoc:{col:139,line:157},startBody:{col:29,line:108},endBody:{col:139,line:157}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { useFocusVisible, FocusVisibleContainer } from './src';\nimport { useSelection } from '../selection/src';\n\ninterface IStyledCustomFocus extends React.HTMLProps<HTMLDivElement> {\n  isSelected?: boolean;\n}\n\nconst StyledCustomFocus = styled.div<IStyledCustomFocus>`\n  :focus {\n    outline: none;\n  }\n\n  &[data-garden-focus-visible] {\n    outline: 2px dashed red;\n  }\n`;\n\nconst StyledWrapper = styled.div`\n  * {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const Container = () => (\n  <FocusVisibleContainer>\n    {({ ref }) => (\n      <StyledWrapper ref={ref}>\n        <div>\n          <StyledCustomFocus as=\"button\">Hello world</StyledCustomFocus>\n        </div>\n        <div>\n          <StyledCustomFocus as=\"input\" />\n        </div>\n      </StyledWrapper>\n    )}\n  </FocusVisibleContainer>\n);\n\nexport const Hook = () => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useFocusVisible({ scope: ref });\n\n  return (\n    <StyledWrapper ref={ref}>\n      <div>\n        <StyledCustomFocus as=\"button\">Customized Button Focus</StyledCustomFocus>\n      </div>\n      <div>\n        <StyledCustomFocus as=\"input\" placeholder=\"Always shows focus\" aria-label=\"Example input\" />\n      </div>\n      <div>\n        <StyledCustomFocus tabIndex={0}>\n          <p>Focusable div content only shows focus with keyboard interaction</p>\n        </StyledCustomFocus>\n      </div>\n      <div>\n        <StyledCustomFocus\n          as=\"textarea\"\n          placeholder=\"Always shows focus\"\n          aria-label=\"Example textarea\"\n        />\n      </div>\n      <div>\n        <label>\n          <StyledCustomFocus as=\"input\" type=\"checkbox\" />\n          Only shows focus when keyed to\n        </label>\n      </div>\n    </StyledWrapper>\n  );\n};\n\nexport const WithSelection = () => {\n  const items = ['One', 'Two', 'Three'];\n\n  const StyledExampleContainer = styled.ul`\n    display: flex;\n  `;\n\n  const StyledExampleItem = styled(StyledCustomFocus).attrs({ as: 'li' })`\n    list-style: none;\n    margin: 16px;\n    padding: 8px;\n    text-align: center;\n    cursor: pointer;\n\n    ${props => props.isSelected && `border-bottom: 4px solid blue`}\n  `;\n\n  const Selection = () => {\n    const { selectedItem, getContainerProps, getItemProps } = useSelection({\n      defaultSelectedIndex: 0\n    });\n    const ref = useRef<HTMLUListElement>(null);\n\n    useFocusVisible({ scope: ref });\n\n    return (\n      <StyledExampleContainer {...(getContainerProps({ ref }) as any)}>\n        {items.map(item => {\n          const itemRef = React.createRef();\n          const isSelected = selectedItem === item;\n\n          return (\n            <StyledExampleItem\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                isSelected\n              })}\n            >\n              {item}\n            </StyledExampleItem>\n          );\n        })}\n      </StyledExampleContainer>\n    );\n  };\n\n  return <Selection />;\n};\n\nContainer.story = {\n  name: 'FocusVisibleContainer'\n};\n\nHook.story = {\n  name: 'useFocusVisible',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useFocusVisible\\` hook implements [\\`:focus-visible\\`](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo) behavior for a DOM element.`\n    }\n  }\n};\n\nWithSelection.story = {\n  name: 'Usage with useSelection',\n  parameters: {\n    docs: {\n      storyDescription: `The following story demonstrates using the \\`useFocusVisible\\` hook with the \\`useSelection\\` hook.`\n    }\n  }\n};\n\nexport default {\n  title: 'FocusVisible Container',\n  decorators: [withKnobs],\n  component: FocusVisibleContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useFocusVisible hook.`\n  }\n};\n",locationsMap:{"focusvisible-container--container":{startLoc:{col:25,line:36},endLoc:{col:1,line:49},startBody:{col:25,line:36},endBody:{col:1,line:49}},"focusvisible-container--hook":{startLoc:{col:20,line:51},endLoc:{col:1,line:84},startBody:{col:20,line:51},endBody:{col:1,line:84}},"focusvisible-container--with-selection":{startLoc:{col:29,line:86},endLoc:{col:1,line:135},startBody:{col:29,line:86},endBody:{col:1,line:135}}}},_parameters.componentSubtitle="A container component which wraps the useFocusVisible hook.",_parameters)}},2818:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),esm_extends=(__webpack_require__(815),__webpack_require__(573),__webpack_require__(1420)),objectWithoutPropertiesLoose=__webpack_require__(1421),index_esm=__webpack_require__(3);function useKeyboardFocus(){var _useState=Object(react.useState)(!1),keyboardFocused=_useState[0],setKeyboardFocused=_useState[1],focusableTimeoutIdRef=Object(react.useRef)(),isKeyboardFocusableRef=Object(react.useRef)(!0);Object(react.useEffect)((function(){return function(){clearTimeout(focusableTimeoutIdRef.current)}}),[]);var onKeyboardFocusPointerDown=function(){isKeyboardFocusableRef.current=!1;var timeoutId=setTimeout((function(){isKeyboardFocusableRef.current=!0}),0);focusableTimeoutIdRef.current=+timeoutId},onKeyboardFocus=function(){isKeyboardFocusableRef.current&&setKeyboardFocused(!0)},onKeyboardFocusBlur=function(){setKeyboardFocused(!1)};return{getFocusProps:function(_temp){var _ref=void 0===_temp?{}:_temp,_ref$tabIndex=_ref.tabIndex,tabIndex=void 0===_ref$tabIndex?0:_ref$tabIndex,onBlur=_ref.onBlur,onFocus=_ref.onFocus,onMouseDown=_ref.onMouseDown,onPointerDown=_ref.onPointerDown,onTouchStart=_ref.onTouchStart,props=Object(objectWithoutPropertiesLoose.a)(_ref,["tabIndex","onBlur","onFocus","onMouseDown","onPointerDown","onTouchStart"]);return Object(esm_extends.a)({tabIndex:tabIndex,onBlur:Object(index_esm.b)(onBlur,onKeyboardFocusBlur),onFocus:Object(index_esm.b)(onFocus,onKeyboardFocus),onMouseDown:Object(index_esm.b)(onMouseDown,onKeyboardFocusPointerDown),onPointerDown:Object(index_esm.b)(onPointerDown,onKeyboardFocusPointerDown),onTouchStart:Object(index_esm.b)(onTouchStart,onKeyboardFocusPointerDown),"data-garden-container-id":"containers.keyboardfocus","data-garden-container-version":"storybook"},props)},keyboardFocused:keyboardFocused}}var KeyboardFocusContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render;return(react_default.a.createElement(react_default.a.Fragment,null,render(useKeyboardFocus())))};KeyboardFocusContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func},KeyboardFocusContainer.__docgenInfo={description:"",methods:[],displayName:"KeyboardFocusContainer",props:{children:{type:{name:"func"},required:!1,description:"A children render prop function"},render:{type:{name:"func"},required:!1,description:"A render prop function"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/keyboardfocus/src/KeyboardFocusContainer.tsx"]={name:"KeyboardFocusContainer",docgenInfo:KeyboardFocusContainer.__docgenInfo,path:"packages/keyboardfocus/src/KeyboardFocusContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/keyboardfocus",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/keyboardfocus";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/keyboardfocus\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <KeyboardFocusContainer>\\\\n    {({ keyboardFocused, getFocusProps }) => (\\\\n      <div\\\\n        {...getFocusProps({\\\\n          style: {\\\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n      </div>\\\\n    )}\\\\n  </KeyboardFocusContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\\\n\\\\n  return (\\\\n    <div\\\\n      {...getFocusProps({\\\\n        style: {\\\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\\\n        }\\\\n      })}\\\\n    >\\\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'KeyboardFocusContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useKeyboardFocus\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useKeyboardFocus\\\\\\\\` hook supplies state and props that help you to distinguish\\\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\\\n      when to add the focus ring.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'KeyboardFocus Container\',\\\\n  decorators: [withKnobs],\\\\n  component: KeyboardFocusContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"keyboardfocus-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"keyboardfocus-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":44},\\"startBody\\":{\\"col\\":20,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":44}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/keyboardfocus.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <KeyboardFocusContainer>\\\\n    {({ keyboardFocused, getFocusProps }) => (\\\\n      <div\\\\n        {...getFocusProps({\\\\n          style: {\\\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n      </div>\\\\n    )}\\\\n  </KeyboardFocusContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\\\n\\\\n  return (\\\\n    <div\\\\n      {...getFocusProps({\\\\n        style: {\\\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\\\n        }\\\\n      })}\\\\n    >\\\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'KeyboardFocusContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useKeyboardFocus\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useKeyboardFocus\\\\\\\\` hook supplies state and props that help you to distinguish\\\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\\\n      when to add the focus ring.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'KeyboardFocus Container\',\\\\n  decorators: [withKnobs],\\\\n  component: KeyboardFocusContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"keyboardfocus-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"keyboardfocus-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":44},\\"startBody\\":{\\"col\\":20,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":44}}}},\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"keyboardfocus-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":50},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":50}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":52},"endLoc":{"col":139,"line":66},"startBody":{"col":20,"line":52},"endBody":{"col":139,"line":66}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/keyboardfocus.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/keyboardfocus";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = () => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"keyboardfocus-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":28},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":28}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":30},"endLoc":{"col":1,"line":44},"startBody":{"col":20,"line":30},"endBody":{"col":1,"line":44}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/keyboardfocus.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <KeyboardFocusContainer>\n    {({ keyboardFocused, getFocusProps }) => (\n      <div\n        {...getFocusProps({\n          style: {\n            color: keyboardFocused ? \'red\' : \'inherit\'\n          }\n        })}\n      >\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\n      </div>\n    )}\n  </KeyboardFocusContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\n\n  return (\n    <div\n      {...getFocusProps({\n        style: {\n          color: keyboardFocused ? \'red\' : \'inherit\'\n        }\n      })}\n    >\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'KeyboardFocusContainer\'\n};\n\nHook.story = {\n  name: \'useKeyboardFocus\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useKeyboardFocus\\` hook supplies state and props that help you to distinguish\n      between mouse and keyboard focus. Garden uses this in react-components to know\n      when to add the focus ring.`\n    }\n  }\n};\n\nexport default {\n  title: \'KeyboardFocus Container\',\n  decorators: [withKnobs],\n  component: KeyboardFocusContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/keyboardfocus\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <KeyboardFocusContainer>\\\\n    {({ keyboardFocused, getFocusProps }) => (\\\\n      <div\\\\n        {...getFocusProps({\\\\n          style: {\\\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n      </div>\\\\n    )}\\\\n  </KeyboardFocusContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\\\n\\\\n  return (\\\\n    <div\\\\n      {...getFocusProps({\\\\n        style: {\\\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\\\n        }\\\\n      })}\\\\n    >\\\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'KeyboardFocusContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useKeyboardFocus\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useKeyboardFocus\\\\\\\\` hook supplies state and props that help you to distinguish\\\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\\\n      when to add the focus ring.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'KeyboardFocus Container\',\\\\n  decorators: [withKnobs],\\\\n  component: KeyboardFocusContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"keyboardfocus-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"keyboardfocus-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":44},\\"startBody\\":{\\"col\\":20,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":44}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/keyboardfocus.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <KeyboardFocusContainer>\\\\n    {({ keyboardFocused, getFocusProps }) => (\\\\n      <div\\\\n        {...getFocusProps({\\\\n          style: {\\\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n      </div>\\\\n    )}\\\\n  </KeyboardFocusContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\\\n\\\\n  return (\\\\n    <div\\\\n      {...getFocusProps({\\\\n        style: {\\\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\\\n        }\\\\n      })}\\\\n    >\\\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'KeyboardFocusContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useKeyboardFocus\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useKeyboardFocus\\\\\\\\` hook supplies state and props that help you to distinguish\\\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\\\n      when to add the focus ring.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'KeyboardFocus Container\',\\\\n  decorators: [withKnobs],\\\\n  component: KeyboardFocusContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"keyboardfocus-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"keyboardfocus-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":44},\\"startBody\\":{\\"col\\":20,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":44}}}},\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  },};\\n","locationsMap":{"keyboardfocus-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":50},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":50}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":52},"endLoc":{"col":139,"line":66},"startBody":{"col":20,"line":52},"endBody":{"col":139,"line":66}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = () => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  }\\n};\\n","locationsMap":{"keyboardfocus-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":28},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":28}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":30},"endLoc":{"col":1,"line":44},"startBody":{"col":20,"line":30},"endBody":{"col":1,"line":44}}}},\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\n  },};\n',__ADDS_MAP__={"keyboardfocus-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:72},startBody:{col:25,line:58},endBody:{col:277,line:72}},"keyboardfocus-container--hook":{startLoc:{col:20,line:74},endLoc:{col:277,line:88},startBody:{col:20,line:74},endBody:{col:277,line:88}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},Container=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/keyboardfocus",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/keyboardfocus";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = () => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"keyboardfocus-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":28},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":28}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":30},"endLoc":{"col":1,"line":44},"startBody":{"col":20,"line":30},"endBody":{"col":1,"line":44}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/keyboardfocus.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\n\nexport const Container = addSourceDecorator(() => (\n  <KeyboardFocusContainer>\n    {({ keyboardFocused, getFocusProps }) => (\n      <div\n        {...getFocusProps({\n          style: {\n            color: keyboardFocused ? \'red\' : \'inherit\'\n          }\n        })}\n      >\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\n      </div>\n    )}\n  </KeyboardFocusContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\n\n  return (\n    <div\n      {...getFocusProps({\n        style: {\n          color: keyboardFocused ? \'red\' : \'inherit\'\n        }\n      })}\n    >\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'KeyboardFocusContainer\'\n};\n\nHook.story = {\n  name: \'useKeyboardFocus\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useKeyboardFocus\\` hook supplies state and props that help you to distinguish\n      between mouse and keyboard focus. Garden uses this in react-components to know\n      when to add the focus ring.`\n    }\n  }\n};\n\nexport default {\n  title: \'KeyboardFocus Container\',\n  decorators: [withKnobs],\n  component: KeyboardFocusContainer,\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = () => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  }\\n};\\n","locationsMap":{"keyboardfocus-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":28},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":28}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":30},"endLoc":{"col":1,"line":44},"startBody":{"col":20,"line":30},"endBody":{"col":1,"line":44}}}},\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\n  },};\n',__ADDS_MAP__={"keyboardfocus-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:50},startBody:{col:25,line:36},endBody:{col:139,line:50}},"keyboardfocus-container--hook":{startLoc:{col:20,line:52},endLoc:{col:139,line:66},startBody:{col:20,line:52},endBody:{col:139,line:66}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(2).withSource,(addSourceDecorator=__webpack_require__(2).addSource)(addSourceDecorator(addSourceDecorator((function(){return react_default.a.createElement(KeyboardFocusContainer,null,(function(_ref){var keyboardFocused=_ref.keyboardFocused,getFocusProps=_ref.getFocusProps;return(react_default.a.createElement("div",getFocusProps({style:{color:keyboardFocused?"red":"inherit"}}),keyboardFocused?"Keyboard focused!":"Not keyboard focused"))}))}),{__STORY__:__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { KeyboardFocusContainer, useKeyboardFocus } from './src';\n\nexport const Container = () => (\n  <KeyboardFocusContainer>\n    {({ keyboardFocused, getFocusProps }) => (\n      <div\n        {...getFocusProps({\n          style: {\n            color: keyboardFocused ? 'red' : 'inherit'\n          }\n        })}\n      >\n        {keyboardFocused ? 'Keyboard focused!' : 'Not keyboard focused'}\n      </div>\n    )}\n  </KeyboardFocusContainer>\n);\n\nexport const Hook = () => {\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\n\n  return (\n    <div\n      {...getFocusProps({\n        style: {\n          color: keyboardFocused ? 'red' : 'inherit'\n        }\n      })}\n    >\n      {keyboardFocused ? 'Keyboard focused!' : 'Not keyboard focused'}\n    </div>\n  );\n};\n\nContainer.story = {\n  name: 'KeyboardFocusContainer'\n};\n\nHook.story = {\n  name: 'useKeyboardFocus',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useKeyboardFocus\\` hook supplies state and props that help you to distinguish\n      between mouse and keyboard focus. Garden uses this in react-components to know\n      when to add the focus ring.`\n    }\n  }\n};\n\nexport default {\n  title: 'KeyboardFocus Container',\n  decorators: [withKnobs],\n  component: KeyboardFocusContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\n  }\n};\n",__ADDS_MAP__:__ADDS_MAP__={"keyboardfocus-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:28},startBody:{col:25,line:14},endBody:{col:1,line:28}},"keyboardfocus-container--hook":{startLoc:{col:20,line:30},endLoc:{col:1,line:44},startBody:{col:20,line:30},endBody:{col:1,line:44}}},__MAIN_FILE_LOCATION__:"/keyboardfocus.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/home/circleci/project/packages/keyboardfocus",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/keyboardfocus.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/keyboardfocus.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var _useKeyboardFocus=useKeyboardFocus(),getFocusProps=_useKeyboardFocus.getFocusProps,keyboardFocused=_useKeyboardFocus.keyboardFocused;return(react_default.a.createElement("div",getFocusProps({style:{color:keyboardFocused?"red":"inherit"}}),keyboardFocused?"Keyboard focused!":"Not keyboard focused"))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/keyboardfocus.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/keyboardfocus.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/keyboardfocus.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"KeyboardFocusContainer"},Hook.story={name:"useKeyboardFocus",parameters:{docs:{storyDescription:"The `useKeyboardFocus` hook supplies state and props that help you to distinguish\n      between mouse and keyboard focus. Garden uses this in react-components to know\n      when to add the focus ring."}}};__webpack_exports__.default={title:"KeyboardFocus Container",decorators:[dist.withKnobs],component:KeyboardFocusContainer,parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/keyboardfocus";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/keyboardfocus\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <KeyboardFocusContainer>\\\\n    {({ keyboardFocused, getFocusProps }) => (\\\\n      <div\\\\n        {...getFocusProps({\\\\n          style: {\\\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n      </div>\\\\n    )}\\\\n  </KeyboardFocusContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\\\n\\\\n  return (\\\\n    <div\\\\n      {...getFocusProps({\\\\n        style: {\\\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\\\n        }\\\\n      })}\\\\n    >\\\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'KeyboardFocusContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useKeyboardFocus\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useKeyboardFocus\\\\\\\\` hook supplies state and props that help you to distinguish\\\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\\\n      when to add the focus ring.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'KeyboardFocus Container\',\\\\n  decorators: [withKnobs],\\\\n  component: KeyboardFocusContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"keyboardfocus-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"keyboardfocus-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":44},\\"startBody\\":{\\"col\\":20,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":44}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/keyboardfocus.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <KeyboardFocusContainer>\\\\n    {({ keyboardFocused, getFocusProps }) => (\\\\n      <div\\\\n        {...getFocusProps({\\\\n          style: {\\\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n      </div>\\\\n    )}\\\\n  </KeyboardFocusContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\\\n\\\\n  return (\\\\n    <div\\\\n      {...getFocusProps({\\\\n        style: {\\\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\\\n        }\\\\n      })}\\\\n    >\\\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'KeyboardFocusContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useKeyboardFocus\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useKeyboardFocus\\\\\\\\` hook supplies state and props that help you to distinguish\\\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\\\n      when to add the focus ring.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'KeyboardFocus Container\',\\\\n  decorators: [withKnobs],\\\\n  component: KeyboardFocusContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"keyboardfocus-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"keyboardfocus-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":44},\\"startBody\\":{\\"col\\":20,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":44}}}},\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"keyboardfocus-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":50},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":50}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":52},"endLoc":{"col":139,"line":66},"startBody":{"col":20,"line":52},"endBody":{"col":139,"line":66}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/keyboardfocus.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/keyboardfocus";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = () => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"keyboardfocus-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":28},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":28}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":30},"endLoc":{"col":1,"line":44},"startBody":{"col":20,"line":30},"endBody":{"col":1,"line":44}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/keyboardfocus.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <KeyboardFocusContainer>\n    {({ keyboardFocused, getFocusProps }) => (\n      <div\n        {...getFocusProps({\n          style: {\n            color: keyboardFocused ? \'red\' : \'inherit\'\n          }\n        })}\n      >\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\n      </div>\n    )}\n  </KeyboardFocusContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\n\n  return (\n    <div\n      {...getFocusProps({\n        style: {\n          color: keyboardFocused ? \'red\' : \'inherit\'\n        }\n      })}\n    >\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'KeyboardFocusContainer\'\n};\n\nHook.story = {\n  name: \'useKeyboardFocus\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useKeyboardFocus\\` hook supplies state and props that help you to distinguish\n      between mouse and keyboard focus. Garden uses this in react-components to know\n      when to add the focus ring.`\n    }\n  }\n};\n\nexport default {\n  title: \'KeyboardFocus Container\',\n  decorators: [withKnobs],\n  component: KeyboardFocusContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/keyboardfocus\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <KeyboardFocusContainer>\\\\n    {({ keyboardFocused, getFocusProps }) => (\\\\n      <div\\\\n        {...getFocusProps({\\\\n          style: {\\\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n      </div>\\\\n    )}\\\\n  </KeyboardFocusContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\\\n\\\\n  return (\\\\n    <div\\\\n      {...getFocusProps({\\\\n        style: {\\\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\\\n        }\\\\n      })}\\\\n    >\\\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'KeyboardFocusContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useKeyboardFocus\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useKeyboardFocus\\\\\\\\` hook supplies state and props that help you to distinguish\\\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\\\n      when to add the focus ring.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'KeyboardFocus Container\',\\\\n  decorators: [withKnobs],\\\\n  component: KeyboardFocusContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"keyboardfocus-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"keyboardfocus-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":44},\\"startBody\\":{\\"col\\":20,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":44}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/keyboardfocus.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <KeyboardFocusContainer>\\\\n    {({ keyboardFocused, getFocusProps }) => (\\\\n      <div\\\\n        {...getFocusProps({\\\\n          style: {\\\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n      </div>\\\\n    )}\\\\n  </KeyboardFocusContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\\\n\\\\n  return (\\\\n    <div\\\\n      {...getFocusProps({\\\\n        style: {\\\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\\\n        }\\\\n      })}\\\\n    >\\\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'KeyboardFocusContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useKeyboardFocus\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useKeyboardFocus\\\\\\\\` hook supplies state and props that help you to distinguish\\\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\\\n      when to add the focus ring.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'KeyboardFocus Container\',\\\\n  decorators: [withKnobs],\\\\n  component: KeyboardFocusContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"keyboardfocus-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"keyboardfocus-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":44},\\"startBody\\":{\\"col\\":20,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":44}}}},\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  },};\\n","locationsMap":{"keyboardfocus-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":50},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":50}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":52},"endLoc":{"col":139,"line":66},"startBody":{"col":20,"line":52},"endBody":{"col":139,"line":66}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = () => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  }\\n};\\n","locationsMap":{"keyboardfocus-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":28},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":28}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":30},"endLoc":{"col":1,"line":44},"startBody":{"col":20,"line":30},"endBody":{"col":1,"line":44}}}},\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\n  },};\n',locationsMap:{"keyboardfocus-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:72},startBody:{col:25,line:58},endBody:{col:277,line:72}},"keyboardfocus-container--hook":{startLoc:{col:20,line:74},endLoc:{col:277,line:88},startBody:{col:20,line:74},endBody:{col:277,line:88}}}}},_parameters.storySource={source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/keyboardfocus";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = () => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"keyboardfocus-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":28},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":28}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":30},"endLoc":{"col":1,"line":44},"startBody":{"col":20,"line":30},"endBody":{"col":1,"line":44}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/keyboardfocus.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs } from \'@storybook/addon-knobs\';\n\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\n\nexport const Container = addSourceDecorator(() => (\n  <KeyboardFocusContainer>\n    {({ keyboardFocused, getFocusProps }) => (\n      <div\n        {...getFocusProps({\n          style: {\n            color: keyboardFocused ? \'red\' : \'inherit\'\n          }\n        })}\n      >\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\n      </div>\n    )}\n  </KeyboardFocusContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\n\n  return (\n    <div\n      {...getFocusProps({\n        style: {\n          color: keyboardFocused ? \'red\' : \'inherit\'\n        }\n      })}\n    >\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'KeyboardFocusContainer\'\n};\n\nHook.story = {\n  name: \'useKeyboardFocus\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useKeyboardFocus\\` hook supplies state and props that help you to distinguish\n      between mouse and keyboard focus. Garden uses this in react-components to know\n      when to add the focus ring.`\n    }\n  }\n};\n\nexport default {\n  title: \'KeyboardFocus Container\',\n  decorators: [withKnobs],\n  component: KeyboardFocusContainer,\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs } from \'@storybook/addon-knobs\';\\n\\nimport { KeyboardFocusContainer, useKeyboardFocus } from \'./src\';\\n\\nexport const Container = () => (\\n  <KeyboardFocusContainer>\\n    {({ keyboardFocused, getFocusProps }) => (\\n      <div\\n        {...getFocusProps({\\n          style: {\\n            color: keyboardFocused ? \'red\' : \'inherit\'\\n          }\\n        })}\\n      >\\n        {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n      </div>\\n    )}\\n  </KeyboardFocusContainer>\\n);\\n\\nexport const Hook = () => {\\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\\n\\n  return (\\n    <div\\n      {...getFocusProps({\\n        style: {\\n          color: keyboardFocused ? \'red\' : \'inherit\'\\n        }\\n      })}\\n    >\\n      {keyboardFocused ? \'Keyboard focused!\' : \'Not keyboard focused\'}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'KeyboardFocusContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useKeyboardFocus\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useKeyboardFocus\\\\` hook supplies state and props that help you to distinguish\\n      between mouse and keyboard focus. Garden uses this in react-components to know\\n      when to add the focus ring.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'KeyboardFocus Container\',\\n  decorators: [withKnobs],\\n  component: KeyboardFocusContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\\n  }\\n};\\n","locationsMap":{"keyboardfocus-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":28},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":28}},"keyboardfocus-container--hook":{"startLoc":{"col":20,"line":30},"endLoc":{"col":1,"line":44},"startBody":{"col":20,"line":30},"endBody":{"col":1,"line":44}}}},\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\n  },};\n',locationsMap:{"keyboardfocus-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:50},startBody:{col:25,line:36},endBody:{col:139,line:50}},"keyboardfocus-container--hook":{startLoc:{col:20,line:52},endLoc:{col:139,line:66},startBody:{col:20,line:52},endBody:{col:139,line:66}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { KeyboardFocusContainer, useKeyboardFocus } from './src';\n\nexport const Container = () => (\n  <KeyboardFocusContainer>\n    {({ keyboardFocused, getFocusProps }) => (\n      <div\n        {...getFocusProps({\n          style: {\n            color: keyboardFocused ? 'red' : 'inherit'\n          }\n        })}\n      >\n        {keyboardFocused ? 'Keyboard focused!' : 'Not keyboard focused'}\n      </div>\n    )}\n  </KeyboardFocusContainer>\n);\n\nexport const Hook = () => {\n  const { getFocusProps, keyboardFocused } = useKeyboardFocus();\n\n  return (\n    <div\n      {...getFocusProps({\n        style: {\n          color: keyboardFocused ? 'red' : 'inherit'\n        }\n      })}\n    >\n      {keyboardFocused ? 'Keyboard focused!' : 'Not keyboard focused'}\n    </div>\n  );\n};\n\nContainer.story = {\n  name: 'KeyboardFocusContainer'\n};\n\nHook.story = {\n  name: 'useKeyboardFocus',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useKeyboardFocus\\` hook supplies state and props that help you to distinguish\n      between mouse and keyboard focus. Garden uses this in react-components to know\n      when to add the focus ring.`\n    }\n  }\n};\n\nexport default {\n  title: 'KeyboardFocus Container',\n  decorators: [withKnobs],\n  component: KeyboardFocusContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useKeyboardFocus hook.`\n  }\n};\n",locationsMap:{"keyboardfocus-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:28},startBody:{col:25,line:14},endBody:{col:1,line:28}},"keyboardfocus-container--hook":{startLoc:{col:20,line:30},endLoc:{col:1,line:44},startBody:{col:20,line:30},endBody:{col:1,line:44}}}},_parameters.componentSubtitle="A container component which wraps the useKeyboardFocus hook.",_parameters)}},2819:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(1384),__webpack_require__(234);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),objectWithoutPropertiesLoose=__webpack_require__(236),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),esm_extends=__webpack_require__(412),index_esm=__webpack_require__(290);function usePagination(options){var _useSelection=Object(index_esm.a)(options),selectedItem=_useSelection.selectedItem,focusedItem=_useSelection.focusedItem,getControlledContainerProps=_useSelection.getContainerProps,getItemProps=_useSelection.getItemProps;return{selectedItem:selectedItem,focusedItem:focusedItem,getContainerProps:function(props){return getControlledContainerProps((_ref$role=(_ref=void 0===(_temp=props)?{}:_temp).role,role=void 0===_ref$role?"list":_ref$role,other=Object(objectWithoutPropertiesLoose.a)(_ref,["role"]),Object(esm_extends.a)({role:role,"data-garden-container-id":"containers.pagination","data-garden-container-version":"storybook"},other)));var _temp,_ref,_ref$role,role,other},getPageProps:function(props){return getItemProps((ariaLabel=(_ref4=void 0===(_temp4=props)?{}:_temp4).ariaLabel,page=_ref4.page,current=_ref4.current,_ref4$role=_ref4.role,role=void 0===_ref4$role?"listitem":_ref4$role,other=Object(objectWithoutPropertiesLoose.a)(_ref4,["ariaLabel","page","current","role"]),ariaLabelText="Page "+page,current&&!ariaLabel&&(ariaLabelText="Current page, Page "+page),Object(esm_extends.a)({selectedAriaKey:"aria-current",role:role,"aria-label":ariaLabel||ariaLabelText},other)),"getPageProps");var _temp4,_ref4,ariaLabel,page,current,_ref4$role,role,other,ariaLabelText},getPreviousPageProps:function(props){return getItemProps(function(_temp2){var _ref2=void 0===_temp2?{}:_temp2,ariaLabel=_ref2.ariaLabel,_ref2$role=_ref2.role,role=void 0===_ref2$role?"listitem":_ref2$role,props=Object(objectWithoutPropertiesLoose.a)(_ref2,["ariaLabel","role"]);return Object(esm_extends.a)({selectedAriaKey:null,role:role,"aria-label":ariaLabel||"Previous Page"},props)}(props),"getPreviousPageProps")},getNextPageProps:function(props){return getItemProps(function(_temp3){var _ref3=void 0===_temp3?{}:_temp3,ariaLabel=_ref3.ariaLabel,_ref3$role=_ref3.role,role=void 0===_ref3$role?"listitem":_ref3$role,props=Object(objectWithoutPropertiesLoose.a)(_ref3,["ariaLabel","role"]);return Object(esm_extends.a)({selectedAriaKey:null,role:role,"aria-label":ariaLabel||"Next Page"},props)}(props),"getNextPageProps")}}}var PaginationContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=Object(objectWithoutPropertiesLoose.a)(_ref,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(usePagination(options))))};PaginationContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,focusedItem:prop_types_default.a.any,selectedItem:prop_types_default.a.any,onSelect:prop_types_default.a.func,onFocus:prop_types_default.a.func},PaginationContainer.__docgenInfo={description:"",methods:[],displayName:"PaginationContainer",props:{children:{type:{name:"func"},required:!1,description:"A children render prop function which receives the newly selected item"},render:{type:{name:"func"},required:!1,description:"A render prop function which receives the newly selected item"},focusedItem:{type:{name:"any"},required:!1,description:"Sets the focused pagination item. Useful for controlled usages"},selectedItem:{type:{name:"any"},required:!1,description:"Sets the focused pagination item. Useful for controlled usages"},onSelect:{type:{name:"func"},required:!1,description:"A callback function that receives the selected pagination item"},onFocus:{type:{name:"func"},required:!1,description:"A callback function that receives the focused pagination item"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/pagination/src/PaginationContainer.tsx"]={name:"PaginationContainer",docgenInfo:PaginationContainer.__docgenInfo,path:"packages/pagination/src/PaginationContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,"/home/circleci/project/packages/pagination"),__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, useState } from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { PaginationContainer, usePagination } from './src';\n\nconst pages = new Array(7).fill('page');\n\nexport const Container = () => {\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\n  const previousPageRef = useRef(null);\n  const nextPageRef = useRef(null);\n  const pageRefs = pages.map(() => React.createRef());\n\n  return (\n    <PaginationContainer\n      selectedItem={controlledSelectedItem}\n      onSelect={newSelectedItem => {\n        let modifiedNewSelectedItem = controlledSelectedItem;\n\n        if (newSelectedItem === 'prev') {\n          if (controlledSelectedItem > 0) {\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\n          }\n        } else if (newSelectedItem === 'next') {\n          if (controlledSelectedItem < pages.length - 1) {\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\n          }\n        } else {\n          modifiedNewSelectedItem = newSelectedItem;\n        }\n\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\n          setSelectedItem(modifiedNewSelectedItem);\n        }\n      }}\n    >\n      {({\n        selectedItem,\n        focusedItem,\n        getContainerProps,\n        getNextPageProps,\n        getPreviousPageProps,\n        getPageProps\n      }) => {\n        return (\n          <nav aria-label=\"Pagination (Container)\">\n            <div\n              {...getContainerProps({\n                style: { display: 'flex' }\n              })}\n            >\n              <div\n                {...getPreviousPageProps({\n                  item: 'prev',\n                  'aria-disabled': selectedItem === 0,\n                  focusRef: previousPageRef,\n                  ref: previousPageRef,\n                  key: 'previous-page',\n                  style: {\n                    color: selectedItem === 0 ? 'gray' : undefined,\n                    cursor: 'pointer',\n                    userSelect: 'none'\n                  }\n                })}\n              >\n                Prev\n              </div>\n              {pages.map((page, index) => {\n                return (\n                  <div\n                    {...getPageProps({\n                      page: index,\n                      current: index === selectedItem,\n                      item: index,\n                      focusRef: pageRefs[index],\n                      ref: pageRefs[index],\n                      key: `page-${index}`,\n                      style: {\n                        outline: index === focusedItem ? '3px solid red' : undefined,\n                        background: index === selectedItem ? 'gray' : undefined,\n                        padding: '0 6px',\n                        cursor: 'pointer',\n                        userSelect: 'none'\n                      }\n                    })}\n                  >\n                    {index + 1}\n                  </div>\n                );\n              })}\n              <div\n                {...getNextPageProps({\n                  item: 'next',\n                  'aria-disabled': selectedItem === pages.length - 1,\n                  focusRef: nextPageRef,\n                  ref: nextPageRef,\n                  key: 'next-page',\n                  style: {\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\n                    cursor: 'pointer',\n                    userSelect: 'none'\n                  }\n                })}\n              >\n                Next\n              </div>\n            </div>\n          </nav>\n        );\n      }}\n    </PaginationContainer>\n  );\n};\n\nexport const Hook = () => {\n  const previousPageRef = useRef(null);\n  const nextPageRef = useRef(null);\n  const pageRefs = pages.map(() => React.createRef());\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\n\n  const {\n    selectedItem,\n    focusedItem,\n    getContainerProps,\n    getNextPageProps,\n    getPreviousPageProps,\n    getPageProps\n  } = usePagination<number | string>({\n    selectedItem: controlledSelectedItem,\n    onSelect: newSelectedItem => {\n      let modifiedNewSelectedItem = controlledSelectedItem;\n\n      if (newSelectedItem === 'prev') {\n        if (controlledSelectedItem > 0) {\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\n        }\n      } else if (newSelectedItem === 'next') {\n        if (controlledSelectedItem < pages.length - 1) {\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\n        }\n      } else {\n        modifiedNewSelectedItem = newSelectedItem as number;\n      }\n\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\n        setSelectedItem(modifiedNewSelectedItem);\n      }\n    }\n  });\n\n  return (\n    <nav aria-label=\"Pagination (Hook)\">\n      <ul\n        {...getContainerProps({\n          role: null,\n          style: { display: 'flex' }\n        })}\n      >\n        <li\n          {...getPreviousPageProps({\n            role: null,\n            item: 'prev',\n            'aria-disabled': selectedItem === 0,\n            focusRef: previousPageRef,\n            key: 'previous-page',\n            style: {\n              color: selectedItem === 0 ? 'gray' : undefined,\n              cursor: 'pointer',\n              userSelect: 'none'\n            }\n          })}\n        >\n          Prev\n        </li>\n        {pages.map((page, index) => {\n          return (\n            <li\n              {...getPageProps({\n                role: null,\n                page: index,\n                current: index === selectedItem,\n                item: index,\n                focusRef: pageRefs[index],\n                key: `page-${index}`,\n                style: {\n                  outline: index === focusedItem ? '3px solid red' : undefined,\n                  background: index === selectedItem ? 'gray' : undefined,\n                  padding: '0 6px',\n                  cursor: 'pointer',\n                  userSelect: 'none'\n                }\n              })}\n            >\n              {index + 1}\n            </li>\n          );\n        })}\n        <li\n          {...getNextPageProps({\n            role: null,\n            item: 'next',\n            'aria-disabled': selectedItem === pages.length - 1,\n            focusRef: nextPageRef,\n            key: 'next-page',\n            style: {\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\n              cursor: 'pointer',\n              userSelect: 'none'\n            }\n          })}\n        >\n          Next\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nContainer.story = {\n  name: 'PaginationContainer'\n};\n\nHook.story = {\n  name: 'usePagination',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`usePagination\\` hook is wrapper on top of the [\\`useSelection\\`](/docs/selection-container--container#useselection) hook with\n      specific prop getters for pagination.`\n    }\n  }\n};\n\nexport default {\n  title: 'Pagination Container',\n  decorators: [withKnobs],\n  component: PaginationContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the usePagination hook.`\n  }\n};\n",__ADDS_MAP__={"pagination-container--container":{startLoc:{col:25,line:16},endLoc:{col:1,line:121},startBody:{col:25,line:16},endBody:{col:1,line:121}},"pagination-container--hook":{startLoc:{col:20,line:123},endLoc:{col:1,line:225},startBody:{col:20,line:123},endBody:{col:1,line:225}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},pages=Array(7).fill("page"),Container=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var _useState=Object(react.useState)(3),controlledSelectedItem=_useState[0],setSelectedItem=_useState[1],previousPageRef=Object(react.useRef)(null),nextPageRef=Object(react.useRef)(null),pageRefs=pages.map((function(){return react_default.a.createRef()}));return(react_default.a.createElement(PaginationContainer,{selectedItem:controlledSelectedItem,onSelect:function(newSelectedItem){var modifiedNewSelectedItem=controlledSelectedItem;"prev"===newSelectedItem?0<controlledSelectedItem&&(modifiedNewSelectedItem=controlledSelectedItem-1):"next"===newSelectedItem?controlledSelectedItem<pages.length-1&&(modifiedNewSelectedItem=controlledSelectedItem+1):modifiedNewSelectedItem=newSelectedItem,modifiedNewSelectedItem!==controlledSelectedItem&&setSelectedItem(modifiedNewSelectedItem)}},(function(_ref){var selectedItem=_ref.selectedItem,focusedItem=_ref.focusedItem,getContainerProps=_ref.getContainerProps,getNextPageProps=_ref.getNextPageProps,getPreviousPageProps=_ref.getPreviousPageProps,getPageProps=_ref.getPageProps;return(react_default.a.createElement("nav",{"aria-label":"Pagination (Container)"},react_default.a.createElement("div",getContainerProps({style:{display:"flex"}}),react_default.a.createElement("div",getPreviousPageProps({item:"prev","aria-disabled":0===selectedItem,focusRef:previousPageRef,ref:previousPageRef,key:"previous-page",style:{color:0===selectedItem?"gray":void 0,cursor:"pointer",userSelect:"none"}}),"Prev"),pages.map((function(page,index){return react_default.a.createElement("div",getPageProps({page:index,current:index===selectedItem,item:index,focusRef:pageRefs[index],ref:pageRefs[index],key:"page-"+index,style:{outline:index===focusedItem?"3px solid red":void 0,background:index===selectedItem?"gray":void 0,padding:"0 6px",cursor:"pointer",userSelect:"none"}}),index+1)})),react_default.a.createElement("div",getNextPageProps({item:"next","aria-disabled":selectedItem===pages.length-1,focusRef:nextPageRef,ref:nextPageRef,key:"next-page",style:{color:selectedItem===pages.length-1?"gray":void 0,cursor:"pointer",userSelect:"none"}}),"Next"))))})))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/pagination.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/pagination.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/pagination.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var previousPageRef=Object(react.useRef)(null),nextPageRef=Object(react.useRef)(null),pageRefs=pages.map((function(){return react_default.a.createRef()})),_useState2=Object(react.useState)(3),controlledSelectedItem=_useState2[0],setSelectedItem=_useState2[1],_usePagination=usePagination({selectedItem:controlledSelectedItem,onSelect:function(newSelectedItem){var modifiedNewSelectedItem=controlledSelectedItem;"prev"===newSelectedItem?0<controlledSelectedItem&&(modifiedNewSelectedItem=controlledSelectedItem-1):"next"===newSelectedItem?controlledSelectedItem<pages.length-1&&(modifiedNewSelectedItem=controlledSelectedItem+1):modifiedNewSelectedItem=newSelectedItem,modifiedNewSelectedItem!==controlledSelectedItem&&setSelectedItem(modifiedNewSelectedItem)}}),selectedItem=_usePagination.selectedItem,focusedItem=_usePagination.focusedItem,getContainerProps=_usePagination.getContainerProps,getNextPageProps=_usePagination.getNextPageProps,getPreviousPageProps=_usePagination.getPreviousPageProps,getPageProps=_usePagination.getPageProps;return(react_default.a.createElement("nav",{"aria-label":"Pagination (Hook)"},react_default.a.createElement("ul",getContainerProps({role:null,style:{display:"flex"}}),react_default.a.createElement("li",getPreviousPageProps({role:null,item:"prev","aria-disabled":0===selectedItem,focusRef:previousPageRef,key:"previous-page",style:{color:0===selectedItem?"gray":void 0,cursor:"pointer",userSelect:"none"}}),"Prev"),pages.map((function(page,index){return react_default.a.createElement("li",getPageProps({role:null,page:index,current:index===selectedItem,item:index,focusRef:pageRefs[index],key:"page-"+index,style:{outline:index===focusedItem?"3px solid red":void 0,background:index===selectedItem?"gray":void 0,padding:"0 6px",cursor:"pointer",userSelect:"none"}}),index+1)})),react_default.a.createElement("li",getNextPageProps({role:null,item:"next","aria-disabled":selectedItem===pages.length-1,focusRef:nextPageRef,key:"next-page",style:{color:selectedItem===pages.length-1?"gray":void 0,cursor:"pointer",userSelect:"none"}}),"Next"))))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/pagination.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/pagination.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/pagination.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"PaginationContainer"},Hook.story={name:"usePagination",parameters:{docs:{storyDescription:"The `usePagination` hook is wrapper on top of the [`useSelection`](/docs/selection-container--container#useselection) hook with\n      specific prop getters for pagination."}}};__webpack_exports__.default={title:"Pagination Container",decorators:[dist.withKnobs],component:PaginationContainer,parameters:(_parameters={storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/pagination\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/home/circleci/project/packages/pagination\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, useState } from 'react';\\\\n\\\\nimport { withKnobs } from '@storybook/addon-knobs';\\\\n\\\\nimport { PaginationContainer, usePagination } from './src';\\\\n\\\\nconst pages = new Array(7).fill('page');\\\\n\\\\nexport const Container = () => {\\\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\\\n  const previousPageRef = useRef(null);\\\\n  const nextPageRef = useRef(null);\\\\n  const pageRefs = pages.map(() => React.createRef());\\\\n\\\\n  return (\\\\n    <PaginationContainer\\\\n      selectedItem={controlledSelectedItem}\\\\n      onSelect={newSelectedItem => {\\\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\\\n\\\\n        if (newSelectedItem === 'prev') {\\\\n          if (controlledSelectedItem > 0) {\\\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\\\n          }\\\\n        } else if (newSelectedItem === 'next') {\\\\n          if (controlledSelectedItem < pages.length - 1) {\\\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\\\n          }\\\\n        } else {\\\\n          modifiedNewSelectedItem = newSelectedItem;\\\\n        }\\\\n\\\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\\\n          setSelectedItem(modifiedNewSelectedItem);\\\\n        }\\\\n      }}\\\\n    >\\\\n      {({\\\\n        selectedItem,\\\\n        focusedItem,\\\\n        getContainerProps,\\\\n        getNextPageProps,\\\\n        getPreviousPageProps,\\\\n        getPageProps\\\\n      }) => {\\\\n        return (\\\\n          <nav aria-label=\\\\\\\"Pagination (Container)\\\\\\\">\\\\n            <div\\\\n              {...getContainerProps({\\\\n                style: { display: 'flex' }\\\\n              })}\\\\n            >\\\\n              <div\\\\n                {...getPreviousPageProps({\\\\n                  item: 'prev',\\\\n                  'aria-disabled': selectedItem === 0,\\\\n                  focusRef: previousPageRef,\\\\n                  ref: previousPageRef,\\\\n                  key: 'previous-page',\\\\n                  style: {\\\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\\\n                    cursor: 'pointer',\\\\n                    userSelect: 'none'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                Prev\\\\n              </div>\\\\n              {pages.map((page, index) => {\\\\n                return (\\\\n                  <div\\\\n                    {...getPageProps({\\\\n                      page: index,\\\\n                      current: index === selectedItem,\\\\n                      item: index,\\\\n                      focusRef: pageRefs[index],\\\\n                      ref: pageRefs[index],\\\\n                      key: `page-${index}`,\\\\n                      style: {\\\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\\\n                        background: index === selectedItem ? 'gray' : undefined,\\\\n                        padding: '0 6px',\\\\n                        cursor: 'pointer',\\\\n                        userSelect: 'none'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {index + 1}\\\\n                  </div>\\\\n                );\\\\n              })}\\\\n              <div\\\\n                {...getNextPageProps({\\\\n                  item: 'next',\\\\n                  'aria-disabled': selectedItem === pages.length - 1,\\\\n                  focusRef: nextPageRef,\\\\n                  ref: nextPageRef,\\\\n                  key: 'next-page',\\\\n                  style: {\\\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\\\n                    cursor: 'pointer',\\\\n                    userSelect: 'none'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                Next\\\\n              </div>\\\\n            </div>\\\\n          </nav>\\\\n        );\\\\n      }}\\\\n    </PaginationContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const previousPageRef = useRef(null);\\\\n  const nextPageRef = useRef(null);\\\\n  const pageRefs = pages.map(() => React.createRef());\\\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\\\n\\\\n  const {\\\\n    selectedItem,\\\\n    focusedItem,\\\\n    getContainerProps,\\\\n    getNextPageProps,\\\\n    getPreviousPageProps,\\\\n    getPageProps\\\\n  } = usePagination<number | string>({\\\\n    selectedItem: controlledSelectedItem,\\\\n    onSelect: newSelectedItem => {\\\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\\\n\\\\n      if (newSelectedItem === 'prev') {\\\\n        if (controlledSelectedItem > 0) {\\\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\\\n        }\\\\n      } else if (newSelectedItem === 'next') {\\\\n        if (controlledSelectedItem < pages.length - 1) {\\\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\\\n        }\\\\n      } else {\\\\n        modifiedNewSelectedItem = newSelectedItem as number;\\\\n      }\\\\n\\\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\\\n        setSelectedItem(modifiedNewSelectedItem);\\\\n      }\\\\n    }\\\\n  });\\\\n\\\\n  return (\\\\n    <nav aria-label=\\\\\\\"Pagination (Hook)\\\\\\\">\\\\n      <ul\\\\n        {...getContainerProps({\\\\n          role: null,\\\\n          style: { display: 'flex' }\\\\n        })}\\\\n      >\\\\n        <li\\\\n          {...getPreviousPageProps({\\\\n            role: null,\\\\n            item: 'prev',\\\\n            'aria-disabled': selectedItem === 0,\\\\n            focusRef: previousPageRef,\\\\n            key: 'previous-page',\\\\n            style: {\\\\n              color: selectedItem === 0 ? 'gray' : undefined,\\\\n              cursor: 'pointer',\\\\n              userSelect: 'none'\\\\n            }\\\\n          })}\\\\n        >\\\\n          Prev\\\\n        </li>\\\\n        {pages.map((page, index) => {\\\\n          return (\\\\n            <li\\\\n              {...getPageProps({\\\\n                role: null,\\\\n                page: index,\\\\n                current: index === selectedItem,\\\\n                item: index,\\\\n                focusRef: pageRefs[index],\\\\n                key: `page-${index}`,\\\\n                style: {\\\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\\\n                  background: index === selectedItem ? 'gray' : undefined,\\\\n                  padding: '0 6px',\\\\n                  cursor: 'pointer',\\\\n                  userSelect: 'none'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {index + 1}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n        <li\\\\n          {...getNextPageProps({\\\\n            role: null,\\\\n            item: 'next',\\\\n            'aria-disabled': selectedItem === pages.length - 1,\\\\n            focusRef: nextPageRef,\\\\n            key: 'next-page',\\\\n            style: {\\\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\\\n              cursor: 'pointer',\\\\n              userSelect: 'none'\\\\n            }\\\\n          })}\\\\n        >\\\\n          Next\\\\n        </li>\\\\n      </ul>\\\\n    </nav>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'PaginationContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'usePagination',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`usePagination\\\\\\\\` hook is wrapper on top of the [\\\\\\\\`useSelection\\\\\\\\`](/docs/selection-container--container#useselection) hook with\\\\n      specific prop getters for pagination.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Pagination Container',\\\\n  decorators: [withKnobs],\\\\n  component: PaginationContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\\\n  }\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"pagination-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":16},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":121},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":16},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":121}},\\\"pagination-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":123},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":225},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":123},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":225}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/pagination.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, useState } from 'react';\\n\\nimport { withKnobs } from '@storybook/addon-knobs';\\n\\nimport { PaginationContainer, usePagination } from './src';\\n\\nconst pages = new Array(7).fill('page');\\n\\nexport const Container = addSourceDecorator(() => {\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n\\n  return (\\n    <PaginationContainer\\n      selectedItem={controlledSelectedItem}\\n      onSelect={newSelectedItem => {\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n        if (newSelectedItem === 'prev') {\\n          if (controlledSelectedItem > 0) {\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\n          }\\n        } else if (newSelectedItem === 'next') {\\n          if (controlledSelectedItem < pages.length - 1) {\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\n          }\\n        } else {\\n          modifiedNewSelectedItem = newSelectedItem;\\n        }\\n\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n          setSelectedItem(modifiedNewSelectedItem);\\n        }\\n      }}\\n    >\\n      {({\\n        selectedItem,\\n        focusedItem,\\n        getContainerProps,\\n        getNextPageProps,\\n        getPreviousPageProps,\\n        getPageProps\\n      }) => {\\n        return (\\n          <nav aria-label=\\\"Pagination (Container)\\\">\\n            <div\\n              {...getContainerProps({\\n                style: { display: 'flex' }\\n              })}\\n            >\\n              <div\\n                {...getPreviousPageProps({\\n                  item: 'prev',\\n                  'aria-disabled': selectedItem === 0,\\n                  focusRef: previousPageRef,\\n                  ref: previousPageRef,\\n                  key: 'previous-page',\\n                  style: {\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Prev\\n              </div>\\n              {pages.map((page, index) => {\\n                return (\\n                  <div\\n                    {...getPageProps({\\n                      page: index,\\n                      current: index === selectedItem,\\n                      item: index,\\n                      focusRef: pageRefs[index],\\n                      ref: pageRefs[index],\\n                      key: `page-${index}`,\\n                      style: {\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\n                        background: index === selectedItem ? 'gray' : undefined,\\n                        padding: '0 6px',\\n                        cursor: 'pointer',\\n                        userSelect: 'none'\\n                      }\\n                    })}\\n                  >\\n                    {index + 1}\\n                  </div>\\n                );\\n              })}\\n              <div\\n                {...getNextPageProps({\\n                  item: 'next',\\n                  'aria-disabled': selectedItem === pages.length - 1,\\n                  focusRef: nextPageRef,\\n                  ref: nextPageRef,\\n                  key: 'next-page',\\n                  style: {\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Next\\n              </div>\\n            </div>\\n          </nav>\\n        );\\n      }}\\n    </PaginationContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n\\n  const {\\n    selectedItem,\\n    focusedItem,\\n    getContainerProps,\\n    getNextPageProps,\\n    getPreviousPageProps,\\n    getPageProps\\n  } = usePagination<number | string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => {\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n      if (newSelectedItem === 'prev') {\\n        if (controlledSelectedItem > 0) {\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\n        }\\n      } else if (newSelectedItem === 'next') {\\n        if (controlledSelectedItem < pages.length - 1) {\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\n        }\\n      } else {\\n        modifiedNewSelectedItem = newSelectedItem as number;\\n      }\\n\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n        setSelectedItem(modifiedNewSelectedItem);\\n      }\\n    }\\n  });\\n\\n  return (\\n    <nav aria-label=\\\"Pagination (Hook)\\\">\\n      <ul\\n        {...getContainerProps({\\n          role: null,\\n          style: { display: 'flex' }\\n        })}\\n      >\\n        <li\\n          {...getPreviousPageProps({\\n            role: null,\\n            item: 'prev',\\n            'aria-disabled': selectedItem === 0,\\n            focusRef: previousPageRef,\\n            key: 'previous-page',\\n            style: {\\n              color: selectedItem === 0 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Prev\\n        </li>\\n        {pages.map((page, index) => {\\n          return (\\n            <li\\n              {...getPageProps({\\n                role: null,\\n                page: index,\\n                current: index === selectedItem,\\n                item: index,\\n                focusRef: pageRefs[index],\\n                key: `page-${index}`,\\n                style: {\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\n                  background: index === selectedItem ? 'gray' : undefined,\\n                  padding: '0 6px',\\n                  cursor: 'pointer',\\n                  userSelect: 'none'\\n                }\\n              })}\\n            >\\n              {index + 1}\\n            </li>\\n          );\\n        })}\\n        <li\\n          {...getNextPageProps({\\n            role: null,\\n            item: 'next',\\n            'aria-disabled': selectedItem === pages.length - 1,\\n            focusRef: nextPageRef,\\n            key: 'next-page',\\n            style: {\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Next\\n        </li>\\n      </ul>\\n    </nav>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: 'PaginationContainer'\\n};\\n\\nHook.story = {\\n  name: 'usePagination',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`usePagination\\\\` hook is wrapper on top of the [\\\\`useSelection\\\\`](/docs/selection-container--container#useselection) hook with\\n      specific prop getters for pagination.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Pagination Container',\\n  decorators: [withKnobs],\\n  component: PaginationContainer,\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, useState } from 'react';\\\\n\\\\nimport { withKnobs } from '@storybook/addon-knobs';\\\\n\\\\nimport { PaginationContainer, usePagination } from './src';\\\\n\\\\nconst pages = new Array(7).fill('page');\\\\n\\\\nexport const Container = () => {\\\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\\\n  const previousPageRef = useRef(null);\\\\n  const nextPageRef = useRef(null);\\\\n  const pageRefs = pages.map(() => React.createRef());\\\\n\\\\n  return (\\\\n    <PaginationContainer\\\\n      selectedItem={controlledSelectedItem}\\\\n      onSelect={newSelectedItem => {\\\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\\\n\\\\n        if (newSelectedItem === 'prev') {\\\\n          if (controlledSelectedItem > 0) {\\\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\\\n          }\\\\n        } else if (newSelectedItem === 'next') {\\\\n          if (controlledSelectedItem < pages.length - 1) {\\\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\\\n          }\\\\n        } else {\\\\n          modifiedNewSelectedItem = newSelectedItem;\\\\n        }\\\\n\\\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\\\n          setSelectedItem(modifiedNewSelectedItem);\\\\n        }\\\\n      }}\\\\n    >\\\\n      {({\\\\n        selectedItem,\\\\n        focusedItem,\\\\n        getContainerProps,\\\\n        getNextPageProps,\\\\n        getPreviousPageProps,\\\\n        getPageProps\\\\n      }) => {\\\\n        return (\\\\n          <nav aria-label=\\\\\\\"Pagination (Container)\\\\\\\">\\\\n            <div\\\\n              {...getContainerProps({\\\\n                style: { display: 'flex' }\\\\n              })}\\\\n            >\\\\n              <div\\\\n                {...getPreviousPageProps({\\\\n                  item: 'prev',\\\\n                  'aria-disabled': selectedItem === 0,\\\\n                  focusRef: previousPageRef,\\\\n                  ref: previousPageRef,\\\\n                  key: 'previous-page',\\\\n                  style: {\\\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\\\n                    cursor: 'pointer',\\\\n                    userSelect: 'none'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                Prev\\\\n              </div>\\\\n              {pages.map((page, index) => {\\\\n                return (\\\\n                  <div\\\\n                    {...getPageProps({\\\\n                      page: index,\\\\n                      current: index === selectedItem,\\\\n                      item: index,\\\\n                      focusRef: pageRefs[index],\\\\n                      ref: pageRefs[index],\\\\n                      key: `page-${index}`,\\\\n                      style: {\\\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\\\n                        background: index === selectedItem ? 'gray' : undefined,\\\\n                        padding: '0 6px',\\\\n                        cursor: 'pointer',\\\\n                        userSelect: 'none'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {index + 1}\\\\n                  </div>\\\\n                );\\\\n              })}\\\\n              <div\\\\n                {...getNextPageProps({\\\\n                  item: 'next',\\\\n                  'aria-disabled': selectedItem === pages.length - 1,\\\\n                  focusRef: nextPageRef,\\\\n                  ref: nextPageRef,\\\\n                  key: 'next-page',\\\\n                  style: {\\\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\\\n                    cursor: 'pointer',\\\\n                    userSelect: 'none'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                Next\\\\n              </div>\\\\n            </div>\\\\n          </nav>\\\\n        );\\\\n      }}\\\\n    </PaginationContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const previousPageRef = useRef(null);\\\\n  const nextPageRef = useRef(null);\\\\n  const pageRefs = pages.map(() => React.createRef());\\\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\\\n\\\\n  const {\\\\n    selectedItem,\\\\n    focusedItem,\\\\n    getContainerProps,\\\\n    getNextPageProps,\\\\n    getPreviousPageProps,\\\\n    getPageProps\\\\n  } = usePagination<number | string>({\\\\n    selectedItem: controlledSelectedItem,\\\\n    onSelect: newSelectedItem => {\\\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\\\n\\\\n      if (newSelectedItem === 'prev') {\\\\n        if (controlledSelectedItem > 0) {\\\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\\\n        }\\\\n      } else if (newSelectedItem === 'next') {\\\\n        if (controlledSelectedItem < pages.length - 1) {\\\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\\\n        }\\\\n      } else {\\\\n        modifiedNewSelectedItem = newSelectedItem as number;\\\\n      }\\\\n\\\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\\\n        setSelectedItem(modifiedNewSelectedItem);\\\\n      }\\\\n    }\\\\n  });\\\\n\\\\n  return (\\\\n    <nav aria-label=\\\\\\\"Pagination (Hook)\\\\\\\">\\\\n      <ul\\\\n        {...getContainerProps({\\\\n          role: null,\\\\n          style: { display: 'flex' }\\\\n        })}\\\\n      >\\\\n        <li\\\\n          {...getPreviousPageProps({\\\\n            role: null,\\\\n            item: 'prev',\\\\n            'aria-disabled': selectedItem === 0,\\\\n            focusRef: previousPageRef,\\\\n            key: 'previous-page',\\\\n            style: {\\\\n              color: selectedItem === 0 ? 'gray' : undefined,\\\\n              cursor: 'pointer',\\\\n              userSelect: 'none'\\\\n            }\\\\n          })}\\\\n        >\\\\n          Prev\\\\n        </li>\\\\n        {pages.map((page, index) => {\\\\n          return (\\\\n            <li\\\\n              {...getPageProps({\\\\n                role: null,\\\\n                page: index,\\\\n                current: index === selectedItem,\\\\n                item: index,\\\\n                focusRef: pageRefs[index],\\\\n                key: `page-${index}`,\\\\n                style: {\\\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\\\n                  background: index === selectedItem ? 'gray' : undefined,\\\\n                  padding: '0 6px',\\\\n                  cursor: 'pointer',\\\\n                  userSelect: 'none'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {index + 1}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n        <li\\\\n          {...getNextPageProps({\\\\n            role: null,\\\\n            item: 'next',\\\\n            'aria-disabled': selectedItem === pages.length - 1,\\\\n            focusRef: nextPageRef,\\\\n            key: 'next-page',\\\\n            style: {\\\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\\\n              cursor: 'pointer',\\\\n              userSelect: 'none'\\\\n            }\\\\n          })}\\\\n        >\\\\n          Next\\\\n        </li>\\\\n      </ul>\\\\n    </nav>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'PaginationContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'usePagination',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`usePagination\\\\\\\\` hook is wrapper on top of the [\\\\\\\\`useSelection\\\\\\\\`](/docs/selection-container--container#useselection) hook with\\\\n      specific prop getters for pagination.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Pagination Container',\\\\n  decorators: [withKnobs],\\\\n  component: PaginationContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\\\n  }\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"pagination-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":16},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":121},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":16},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":121}},\\\"pagination-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":123},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":225},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":123},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":225}}}},\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\n  },};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"pagination-container--container\":{\"startLoc\":{\"col\":25,\"line\":38},\"endLoc\":{\"col\":139,\"line\":143},\"startBody\":{\"col\":25,\"line\":38},\"endBody\":{\"col\":139,\"line\":143}},\"pagination-container--hook\":{\"startLoc\":{\"col\":20,\"line\":145},\"endLoc\":{\"col\":139,\"line\":247},\"startBody\":{\"col\":20,\"line\":145},\"endBody\":{\"col\":139,\"line\":247}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/pagination.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/pagination\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, useState } from 'react';\\n\\nimport { withKnobs } from '@storybook/addon-knobs';\\n\\nimport { PaginationContainer, usePagination } from './src';\\n\\nconst pages = new Array(7).fill('page');\\n\\nexport const Container = () => {\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n\\n  return (\\n    <PaginationContainer\\n      selectedItem={controlledSelectedItem}\\n      onSelect={newSelectedItem => {\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n        if (newSelectedItem === 'prev') {\\n          if (controlledSelectedItem > 0) {\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\n          }\\n        } else if (newSelectedItem === 'next') {\\n          if (controlledSelectedItem < pages.length - 1) {\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\n          }\\n        } else {\\n          modifiedNewSelectedItem = newSelectedItem;\\n        }\\n\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n          setSelectedItem(modifiedNewSelectedItem);\\n        }\\n      }}\\n    >\\n      {({\\n        selectedItem,\\n        focusedItem,\\n        getContainerProps,\\n        getNextPageProps,\\n        getPreviousPageProps,\\n        getPageProps\\n      }) => {\\n        return (\\n          <nav aria-label=\\\"Pagination (Container)\\\">\\n            <div\\n              {...getContainerProps({\\n                style: { display: 'flex' }\\n              })}\\n            >\\n              <div\\n                {...getPreviousPageProps({\\n                  item: 'prev',\\n                  'aria-disabled': selectedItem === 0,\\n                  focusRef: previousPageRef,\\n                  ref: previousPageRef,\\n                  key: 'previous-page',\\n                  style: {\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Prev\\n              </div>\\n              {pages.map((page, index) => {\\n                return (\\n                  <div\\n                    {...getPageProps({\\n                      page: index,\\n                      current: index === selectedItem,\\n                      item: index,\\n                      focusRef: pageRefs[index],\\n                      ref: pageRefs[index],\\n                      key: `page-${index}`,\\n                      style: {\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\n                        background: index === selectedItem ? 'gray' : undefined,\\n                        padding: '0 6px',\\n                        cursor: 'pointer',\\n                        userSelect: 'none'\\n                      }\\n                    })}\\n                  >\\n                    {index + 1}\\n                  </div>\\n                );\\n              })}\\n              <div\\n                {...getNextPageProps({\\n                  item: 'next',\\n                  'aria-disabled': selectedItem === pages.length - 1,\\n                  focusRef: nextPageRef,\\n                  ref: nextPageRef,\\n                  key: 'next-page',\\n                  style: {\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Next\\n              </div>\\n            </div>\\n          </nav>\\n        );\\n      }}\\n    </PaginationContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n\\n  const {\\n    selectedItem,\\n    focusedItem,\\n    getContainerProps,\\n    getNextPageProps,\\n    getPreviousPageProps,\\n    getPageProps\\n  } = usePagination<number | string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => {\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n      if (newSelectedItem === 'prev') {\\n        if (controlledSelectedItem > 0) {\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\n        }\\n      } else if (newSelectedItem === 'next') {\\n        if (controlledSelectedItem < pages.length - 1) {\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\n        }\\n      } else {\\n        modifiedNewSelectedItem = newSelectedItem as number;\\n      }\\n\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n        setSelectedItem(modifiedNewSelectedItem);\\n      }\\n    }\\n  });\\n\\n  return (\\n    <nav aria-label=\\\"Pagination (Hook)\\\">\\n      <ul\\n        {...getContainerProps({\\n          role: null,\\n          style: { display: 'flex' }\\n        })}\\n      >\\n        <li\\n          {...getPreviousPageProps({\\n            role: null,\\n            item: 'prev',\\n            'aria-disabled': selectedItem === 0,\\n            focusRef: previousPageRef,\\n            key: 'previous-page',\\n            style: {\\n              color: selectedItem === 0 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Prev\\n        </li>\\n        {pages.map((page, index) => {\\n          return (\\n            <li\\n              {...getPageProps({\\n                role: null,\\n                page: index,\\n                current: index === selectedItem,\\n                item: index,\\n                focusRef: pageRefs[index],\\n                key: `page-${index}`,\\n                style: {\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\n                  background: index === selectedItem ? 'gray' : undefined,\\n                  padding: '0 6px',\\n                  cursor: 'pointer',\\n                  userSelect: 'none'\\n                }\\n              })}\\n            >\\n              {index + 1}\\n            </li>\\n          );\\n        })}\\n        <li\\n          {...getNextPageProps({\\n            role: null,\\n            item: 'next',\\n            'aria-disabled': selectedItem === pages.length - 1,\\n            focusRef: nextPageRef,\\n            key: 'next-page',\\n            style: {\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Next\\n        </li>\\n      </ul>\\n    </nav>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'PaginationContainer'\\n};\\n\\nHook.story = {\\n  name: 'usePagination',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`usePagination\\\\` hook is wrapper on top of the [\\\\`useSelection\\\\`](/docs/selection-container--container#useselection) hook with\\n      specific prop getters for pagination.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Pagination Container',\\n  decorators: [withKnobs],\\n  component: PaginationContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"pagination-container--container\":{\"startLoc\":{\"col\":25,\"line\":16},\"endLoc\":{\"col\":1,\"line\":121},\"startBody\":{\"col\":25,\"line\":16},\"endBody\":{\"col\":1,\"line\":121}},\"pagination-container--hook\":{\"startLoc\":{\"col\":20,\"line\":123},\"endLoc\":{\"col\":1,\"line\":225},\"startBody\":{\"col\":20,\"line\":123},\"endBody\":{\"col\":1,\"line\":225}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/pagination.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, useState } from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { PaginationContainer, usePagination } from './src';\n\nconst pages = new Array(7).fill('page');\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\n  const previousPageRef = useRef(null);\n  const nextPageRef = useRef(null);\n  const pageRefs = pages.map(() => React.createRef());\n\n  return (\n    <PaginationContainer\n      selectedItem={controlledSelectedItem}\n      onSelect={newSelectedItem => {\n        let modifiedNewSelectedItem = controlledSelectedItem;\n\n        if (newSelectedItem === 'prev') {\n          if (controlledSelectedItem > 0) {\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\n          }\n        } else if (newSelectedItem === 'next') {\n          if (controlledSelectedItem < pages.length - 1) {\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\n          }\n        } else {\n          modifiedNewSelectedItem = newSelectedItem;\n        }\n\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\n          setSelectedItem(modifiedNewSelectedItem);\n        }\n      }}\n    >\n      {({\n        selectedItem,\n        focusedItem,\n        getContainerProps,\n        getNextPageProps,\n        getPreviousPageProps,\n        getPageProps\n      }) => {\n        return (\n          <nav aria-label=\"Pagination (Container)\">\n            <div\n              {...getContainerProps({\n                style: { display: 'flex' }\n              })}\n            >\n              <div\n                {...getPreviousPageProps({\n                  item: 'prev',\n                  'aria-disabled': selectedItem === 0,\n                  focusRef: previousPageRef,\n                  ref: previousPageRef,\n                  key: 'previous-page',\n                  style: {\n                    color: selectedItem === 0 ? 'gray' : undefined,\n                    cursor: 'pointer',\n                    userSelect: 'none'\n                  }\n                })}\n              >\n                Prev\n              </div>\n              {pages.map((page, index) => {\n                return (\n                  <div\n                    {...getPageProps({\n                      page: index,\n                      current: index === selectedItem,\n                      item: index,\n                      focusRef: pageRefs[index],\n                      ref: pageRefs[index],\n                      key: `page-${index}`,\n                      style: {\n                        outline: index === focusedItem ? '3px solid red' : undefined,\n                        background: index === selectedItem ? 'gray' : undefined,\n                        padding: '0 6px',\n                        cursor: 'pointer',\n                        userSelect: 'none'\n                      }\n                    })}\n                  >\n                    {index + 1}\n                  </div>\n                );\n              })}\n              <div\n                {...getNextPageProps({\n                  item: 'next',\n                  'aria-disabled': selectedItem === pages.length - 1,\n                  focusRef: nextPageRef,\n                  ref: nextPageRef,\n                  key: 'next-page',\n                  style: {\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\n                    cursor: 'pointer',\n                    userSelect: 'none'\n                  }\n                })}\n              >\n                Next\n              </div>\n            </div>\n          </nav>\n        );\n      }}\n    </PaginationContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const previousPageRef = useRef(null);\n  const nextPageRef = useRef(null);\n  const pageRefs = pages.map(() => React.createRef());\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\n\n  const {\n    selectedItem,\n    focusedItem,\n    getContainerProps,\n    getNextPageProps,\n    getPreviousPageProps,\n    getPageProps\n  } = usePagination<number | string>({\n    selectedItem: controlledSelectedItem,\n    onSelect: newSelectedItem => {\n      let modifiedNewSelectedItem = controlledSelectedItem;\n\n      if (newSelectedItem === 'prev') {\n        if (controlledSelectedItem > 0) {\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\n        }\n      } else if (newSelectedItem === 'next') {\n        if (controlledSelectedItem < pages.length - 1) {\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\n        }\n      } else {\n        modifiedNewSelectedItem = newSelectedItem as number;\n      }\n\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\n        setSelectedItem(modifiedNewSelectedItem);\n      }\n    }\n  });\n\n  return (\n    <nav aria-label=\"Pagination (Hook)\">\n      <ul\n        {...getContainerProps({\n          role: null,\n          style: { display: 'flex' }\n        })}\n      >\n        <li\n          {...getPreviousPageProps({\n            role: null,\n            item: 'prev',\n            'aria-disabled': selectedItem === 0,\n            focusRef: previousPageRef,\n            key: 'previous-page',\n            style: {\n              color: selectedItem === 0 ? 'gray' : undefined,\n              cursor: 'pointer',\n              userSelect: 'none'\n            }\n          })}\n        >\n          Prev\n        </li>\n        {pages.map((page, index) => {\n          return (\n            <li\n              {...getPageProps({\n                role: null,\n                page: index,\n                current: index === selectedItem,\n                item: index,\n                focusRef: pageRefs[index],\n                key: `page-${index}`,\n                style: {\n                  outline: index === focusedItem ? '3px solid red' : undefined,\n                  background: index === selectedItem ? 'gray' : undefined,\n                  padding: '0 6px',\n                  cursor: 'pointer',\n                  userSelect: 'none'\n                }\n              })}\n            >\n              {index + 1}\n            </li>\n          );\n        })}\n        <li\n          {...getNextPageProps({\n            role: null,\n            item: 'next',\n            'aria-disabled': selectedItem === pages.length - 1,\n            focusRef: nextPageRef,\n            key: 'next-page',\n            style: {\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\n              cursor: 'pointer',\n              userSelect: 'none'\n            }\n          })}\n        >\n          Next\n        </li>\n      </ul>\n    </nav>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'PaginationContainer'\n};\n\nHook.story = {\n  name: 'usePagination',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`usePagination\\` hook is wrapper on top of the [\\`useSelection\\`](/docs/selection-container--container#useselection) hook with\n      specific prop getters for pagination.`\n    }\n  }\n};\n\nexport default {\n  title: 'Pagination Container',\n  decorators: [withKnobs],\n  component: PaginationContainer,\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/home/circleci/project/packages/pagination\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, useState } from 'react';\\\\n\\\\nimport { withKnobs } from '@storybook/addon-knobs';\\\\n\\\\nimport { PaginationContainer, usePagination } from './src';\\\\n\\\\nconst pages = new Array(7).fill('page');\\\\n\\\\nexport const Container = () => {\\\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\\\n  const previousPageRef = useRef(null);\\\\n  const nextPageRef = useRef(null);\\\\n  const pageRefs = pages.map(() => React.createRef());\\\\n\\\\n  return (\\\\n    <PaginationContainer\\\\n      selectedItem={controlledSelectedItem}\\\\n      onSelect={newSelectedItem => {\\\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\\\n\\\\n        if (newSelectedItem === 'prev') {\\\\n          if (controlledSelectedItem > 0) {\\\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\\\n          }\\\\n        } else if (newSelectedItem === 'next') {\\\\n          if (controlledSelectedItem < pages.length - 1) {\\\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\\\n          }\\\\n        } else {\\\\n          modifiedNewSelectedItem = newSelectedItem;\\\\n        }\\\\n\\\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\\\n          setSelectedItem(modifiedNewSelectedItem);\\\\n        }\\\\n      }}\\\\n    >\\\\n      {({\\\\n        selectedItem,\\\\n        focusedItem,\\\\n        getContainerProps,\\\\n        getNextPageProps,\\\\n        getPreviousPageProps,\\\\n        getPageProps\\\\n      }) => {\\\\n        return (\\\\n          <nav aria-label=\\\\\\\"Pagination (Container)\\\\\\\">\\\\n            <div\\\\n              {...getContainerProps({\\\\n                style: { display: 'flex' }\\\\n              })}\\\\n            >\\\\n              <div\\\\n                {...getPreviousPageProps({\\\\n                  item: 'prev',\\\\n                  'aria-disabled': selectedItem === 0,\\\\n                  focusRef: previousPageRef,\\\\n                  ref: previousPageRef,\\\\n                  key: 'previous-page',\\\\n                  style: {\\\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\\\n                    cursor: 'pointer',\\\\n                    userSelect: 'none'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                Prev\\\\n              </div>\\\\n              {pages.map((page, index) => {\\\\n                return (\\\\n                  <div\\\\n                    {...getPageProps({\\\\n                      page: index,\\\\n                      current: index === selectedItem,\\\\n                      item: index,\\\\n                      focusRef: pageRefs[index],\\\\n                      ref: pageRefs[index],\\\\n                      key: `page-${index}`,\\\\n                      style: {\\\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\\\n                        background: index === selectedItem ? 'gray' : undefined,\\\\n                        padding: '0 6px',\\\\n                        cursor: 'pointer',\\\\n                        userSelect: 'none'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {index + 1}\\\\n                  </div>\\\\n                );\\\\n              })}\\\\n              <div\\\\n                {...getNextPageProps({\\\\n                  item: 'next',\\\\n                  'aria-disabled': selectedItem === pages.length - 1,\\\\n                  focusRef: nextPageRef,\\\\n                  ref: nextPageRef,\\\\n                  key: 'next-page',\\\\n                  style: {\\\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\\\n                    cursor: 'pointer',\\\\n                    userSelect: 'none'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                Next\\\\n              </div>\\\\n            </div>\\\\n          </nav>\\\\n        );\\\\n      }}\\\\n    </PaginationContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const previousPageRef = useRef(null);\\\\n  const nextPageRef = useRef(null);\\\\n  const pageRefs = pages.map(() => React.createRef());\\\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\\\n\\\\n  const {\\\\n    selectedItem,\\\\n    focusedItem,\\\\n    getContainerProps,\\\\n    getNextPageProps,\\\\n    getPreviousPageProps,\\\\n    getPageProps\\\\n  } = usePagination<number | string>({\\\\n    selectedItem: controlledSelectedItem,\\\\n    onSelect: newSelectedItem => {\\\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\\\n\\\\n      if (newSelectedItem === 'prev') {\\\\n        if (controlledSelectedItem > 0) {\\\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\\\n        }\\\\n      } else if (newSelectedItem === 'next') {\\\\n        if (controlledSelectedItem < pages.length - 1) {\\\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\\\n        }\\\\n      } else {\\\\n        modifiedNewSelectedItem = newSelectedItem as number;\\\\n      }\\\\n\\\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\\\n        setSelectedItem(modifiedNewSelectedItem);\\\\n      }\\\\n    }\\\\n  });\\\\n\\\\n  return (\\\\n    <nav aria-label=\\\\\\\"Pagination (Hook)\\\\\\\">\\\\n      <ul\\\\n        {...getContainerProps({\\\\n          role: null,\\\\n          style: { display: 'flex' }\\\\n        })}\\\\n      >\\\\n        <li\\\\n          {...getPreviousPageProps({\\\\n            role: null,\\\\n            item: 'prev',\\\\n            'aria-disabled': selectedItem === 0,\\\\n            focusRef: previousPageRef,\\\\n            key: 'previous-page',\\\\n            style: {\\\\n              color: selectedItem === 0 ? 'gray' : undefined,\\\\n              cursor: 'pointer',\\\\n              userSelect: 'none'\\\\n            }\\\\n          })}\\\\n        >\\\\n          Prev\\\\n        </li>\\\\n        {pages.map((page, index) => {\\\\n          return (\\\\n            <li\\\\n              {...getPageProps({\\\\n                role: null,\\\\n                page: index,\\\\n                current: index === selectedItem,\\\\n                item: index,\\\\n                focusRef: pageRefs[index],\\\\n                key: `page-${index}`,\\\\n                style: {\\\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\\\n                  background: index === selectedItem ? 'gray' : undefined,\\\\n                  padding: '0 6px',\\\\n                  cursor: 'pointer',\\\\n                  userSelect: 'none'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {index + 1}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n        <li\\\\n          {...getNextPageProps({\\\\n            role: null,\\\\n            item: 'next',\\\\n            'aria-disabled': selectedItem === pages.length - 1,\\\\n            focusRef: nextPageRef,\\\\n            key: 'next-page',\\\\n            style: {\\\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\\\n              cursor: 'pointer',\\\\n              userSelect: 'none'\\\\n            }\\\\n          })}\\\\n        >\\\\n          Next\\\\n        </li>\\\\n      </ul>\\\\n    </nav>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'PaginationContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'usePagination',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`usePagination\\\\\\\\` hook is wrapper on top of the [\\\\\\\\`useSelection\\\\\\\\`](/docs/selection-container--container#useselection) hook with\\\\n      specific prop getters for pagination.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Pagination Container',\\\\n  decorators: [withKnobs],\\\\n  component: PaginationContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\\\n  }\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"pagination-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":16},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":121},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":16},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":121}},\\\"pagination-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":123},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":225},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":123},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":225}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/pagination.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, useState } from 'react';\\n\\nimport { withKnobs } from '@storybook/addon-knobs';\\n\\nimport { PaginationContainer, usePagination } from './src';\\n\\nconst pages = new Array(7).fill('page');\\n\\nexport const Container = addSourceDecorator(() => {\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n\\n  return (\\n    <PaginationContainer\\n      selectedItem={controlledSelectedItem}\\n      onSelect={newSelectedItem => {\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n        if (newSelectedItem === 'prev') {\\n          if (controlledSelectedItem > 0) {\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\n          }\\n        } else if (newSelectedItem === 'next') {\\n          if (controlledSelectedItem < pages.length - 1) {\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\n          }\\n        } else {\\n          modifiedNewSelectedItem = newSelectedItem;\\n        }\\n\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n          setSelectedItem(modifiedNewSelectedItem);\\n        }\\n      }}\\n    >\\n      {({\\n        selectedItem,\\n        focusedItem,\\n        getContainerProps,\\n        getNextPageProps,\\n        getPreviousPageProps,\\n        getPageProps\\n      }) => {\\n        return (\\n          <nav aria-label=\\\"Pagination (Container)\\\">\\n            <div\\n              {...getContainerProps({\\n                style: { display: 'flex' }\\n              })}\\n            >\\n              <div\\n                {...getPreviousPageProps({\\n                  item: 'prev',\\n                  'aria-disabled': selectedItem === 0,\\n                  focusRef: previousPageRef,\\n                  ref: previousPageRef,\\n                  key: 'previous-page',\\n                  style: {\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Prev\\n              </div>\\n              {pages.map((page, index) => {\\n                return (\\n                  <div\\n                    {...getPageProps({\\n                      page: index,\\n                      current: index === selectedItem,\\n                      item: index,\\n                      focusRef: pageRefs[index],\\n                      ref: pageRefs[index],\\n                      key: `page-${index}`,\\n                      style: {\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\n                        background: index === selectedItem ? 'gray' : undefined,\\n                        padding: '0 6px',\\n                        cursor: 'pointer',\\n                        userSelect: 'none'\\n                      }\\n                    })}\\n                  >\\n                    {index + 1}\\n                  </div>\\n                );\\n              })}\\n              <div\\n                {...getNextPageProps({\\n                  item: 'next',\\n                  'aria-disabled': selectedItem === pages.length - 1,\\n                  focusRef: nextPageRef,\\n                  ref: nextPageRef,\\n                  key: 'next-page',\\n                  style: {\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Next\\n              </div>\\n            </div>\\n          </nav>\\n        );\\n      }}\\n    </PaginationContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n\\n  const {\\n    selectedItem,\\n    focusedItem,\\n    getContainerProps,\\n    getNextPageProps,\\n    getPreviousPageProps,\\n    getPageProps\\n  } = usePagination<number | string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => {\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n      if (newSelectedItem === 'prev') {\\n        if (controlledSelectedItem > 0) {\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\n        }\\n      } else if (newSelectedItem === 'next') {\\n        if (controlledSelectedItem < pages.length - 1) {\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\n        }\\n      } else {\\n        modifiedNewSelectedItem = newSelectedItem as number;\\n      }\\n\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n        setSelectedItem(modifiedNewSelectedItem);\\n      }\\n    }\\n  });\\n\\n  return (\\n    <nav aria-label=\\\"Pagination (Hook)\\\">\\n      <ul\\n        {...getContainerProps({\\n          role: null,\\n          style: { display: 'flex' }\\n        })}\\n      >\\n        <li\\n          {...getPreviousPageProps({\\n            role: null,\\n            item: 'prev',\\n            'aria-disabled': selectedItem === 0,\\n            focusRef: previousPageRef,\\n            key: 'previous-page',\\n            style: {\\n              color: selectedItem === 0 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Prev\\n        </li>\\n        {pages.map((page, index) => {\\n          return (\\n            <li\\n              {...getPageProps({\\n                role: null,\\n                page: index,\\n                current: index === selectedItem,\\n                item: index,\\n                focusRef: pageRefs[index],\\n                key: `page-${index}`,\\n                style: {\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\n                  background: index === selectedItem ? 'gray' : undefined,\\n                  padding: '0 6px',\\n                  cursor: 'pointer',\\n                  userSelect: 'none'\\n                }\\n              })}\\n            >\\n              {index + 1}\\n            </li>\\n          );\\n        })}\\n        <li\\n          {...getNextPageProps({\\n            role: null,\\n            item: 'next',\\n            'aria-disabled': selectedItem === pages.length - 1,\\n            focusRef: nextPageRef,\\n            key: 'next-page',\\n            style: {\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Next\\n        </li>\\n      </ul>\\n    </nav>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: 'PaginationContainer'\\n};\\n\\nHook.story = {\\n  name: 'usePagination',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`usePagination\\\\` hook is wrapper on top of the [\\\\`useSelection\\\\`](/docs/selection-container--container#useselection) hook with\\n      specific prop getters for pagination.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Pagination Container',\\n  decorators: [withKnobs],\\n  component: PaginationContainer,\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { useRef, useState } from 'react';\\\\n\\\\nimport { withKnobs } from '@storybook/addon-knobs';\\\\n\\\\nimport { PaginationContainer, usePagination } from './src';\\\\n\\\\nconst pages = new Array(7).fill('page');\\\\n\\\\nexport const Container = () => {\\\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\\\n  const previousPageRef = useRef(null);\\\\n  const nextPageRef = useRef(null);\\\\n  const pageRefs = pages.map(() => React.createRef());\\\\n\\\\n  return (\\\\n    <PaginationContainer\\\\n      selectedItem={controlledSelectedItem}\\\\n      onSelect={newSelectedItem => {\\\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\\\n\\\\n        if (newSelectedItem === 'prev') {\\\\n          if (controlledSelectedItem > 0) {\\\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\\\n          }\\\\n        } else if (newSelectedItem === 'next') {\\\\n          if (controlledSelectedItem < pages.length - 1) {\\\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\\\n          }\\\\n        } else {\\\\n          modifiedNewSelectedItem = newSelectedItem;\\\\n        }\\\\n\\\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\\\n          setSelectedItem(modifiedNewSelectedItem);\\\\n        }\\\\n      }}\\\\n    >\\\\n      {({\\\\n        selectedItem,\\\\n        focusedItem,\\\\n        getContainerProps,\\\\n        getNextPageProps,\\\\n        getPreviousPageProps,\\\\n        getPageProps\\\\n      }) => {\\\\n        return (\\\\n          <nav aria-label=\\\\\\\"Pagination (Container)\\\\\\\">\\\\n            <div\\\\n              {...getContainerProps({\\\\n                style: { display: 'flex' }\\\\n              })}\\\\n            >\\\\n              <div\\\\n                {...getPreviousPageProps({\\\\n                  item: 'prev',\\\\n                  'aria-disabled': selectedItem === 0,\\\\n                  focusRef: previousPageRef,\\\\n                  ref: previousPageRef,\\\\n                  key: 'previous-page',\\\\n                  style: {\\\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\\\n                    cursor: 'pointer',\\\\n                    userSelect: 'none'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                Prev\\\\n              </div>\\\\n              {pages.map((page, index) => {\\\\n                return (\\\\n                  <div\\\\n                    {...getPageProps({\\\\n                      page: index,\\\\n                      current: index === selectedItem,\\\\n                      item: index,\\\\n                      focusRef: pageRefs[index],\\\\n                      ref: pageRefs[index],\\\\n                      key: `page-${index}`,\\\\n                      style: {\\\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\\\n                        background: index === selectedItem ? 'gray' : undefined,\\\\n                        padding: '0 6px',\\\\n                        cursor: 'pointer',\\\\n                        userSelect: 'none'\\\\n                      }\\\\n                    })}\\\\n                  >\\\\n                    {index + 1}\\\\n                  </div>\\\\n                );\\\\n              })}\\\\n              <div\\\\n                {...getNextPageProps({\\\\n                  item: 'next',\\\\n                  'aria-disabled': selectedItem === pages.length - 1,\\\\n                  focusRef: nextPageRef,\\\\n                  ref: nextPageRef,\\\\n                  key: 'next-page',\\\\n                  style: {\\\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\\\n                    cursor: 'pointer',\\\\n                    userSelect: 'none'\\\\n                  }\\\\n                })}\\\\n              >\\\\n                Next\\\\n              </div>\\\\n            </div>\\\\n          </nav>\\\\n        );\\\\n      }}\\\\n    </PaginationContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const previousPageRef = useRef(null);\\\\n  const nextPageRef = useRef(null);\\\\n  const pageRefs = pages.map(() => React.createRef());\\\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\\\n\\\\n  const {\\\\n    selectedItem,\\\\n    focusedItem,\\\\n    getContainerProps,\\\\n    getNextPageProps,\\\\n    getPreviousPageProps,\\\\n    getPageProps\\\\n  } = usePagination<number | string>({\\\\n    selectedItem: controlledSelectedItem,\\\\n    onSelect: newSelectedItem => {\\\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\\\n\\\\n      if (newSelectedItem === 'prev') {\\\\n        if (controlledSelectedItem > 0) {\\\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\\\n        }\\\\n      } else if (newSelectedItem === 'next') {\\\\n        if (controlledSelectedItem < pages.length - 1) {\\\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\\\n        }\\\\n      } else {\\\\n        modifiedNewSelectedItem = newSelectedItem as number;\\\\n      }\\\\n\\\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\\\n        setSelectedItem(modifiedNewSelectedItem);\\\\n      }\\\\n    }\\\\n  });\\\\n\\\\n  return (\\\\n    <nav aria-label=\\\\\\\"Pagination (Hook)\\\\\\\">\\\\n      <ul\\\\n        {...getContainerProps({\\\\n          role: null,\\\\n          style: { display: 'flex' }\\\\n        })}\\\\n      >\\\\n        <li\\\\n          {...getPreviousPageProps({\\\\n            role: null,\\\\n            item: 'prev',\\\\n            'aria-disabled': selectedItem === 0,\\\\n            focusRef: previousPageRef,\\\\n            key: 'previous-page',\\\\n            style: {\\\\n              color: selectedItem === 0 ? 'gray' : undefined,\\\\n              cursor: 'pointer',\\\\n              userSelect: 'none'\\\\n            }\\\\n          })}\\\\n        >\\\\n          Prev\\\\n        </li>\\\\n        {pages.map((page, index) => {\\\\n          return (\\\\n            <li\\\\n              {...getPageProps({\\\\n                role: null,\\\\n                page: index,\\\\n                current: index === selectedItem,\\\\n                item: index,\\\\n                focusRef: pageRefs[index],\\\\n                key: `page-${index}`,\\\\n                style: {\\\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\\\n                  background: index === selectedItem ? 'gray' : undefined,\\\\n                  padding: '0 6px',\\\\n                  cursor: 'pointer',\\\\n                  userSelect: 'none'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {index + 1}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n        <li\\\\n          {...getNextPageProps({\\\\n            role: null,\\\\n            item: 'next',\\\\n            'aria-disabled': selectedItem === pages.length - 1,\\\\n            focusRef: nextPageRef,\\\\n            key: 'next-page',\\\\n            style: {\\\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\\\n              cursor: 'pointer',\\\\n              userSelect: 'none'\\\\n            }\\\\n          })}\\\\n        >\\\\n          Next\\\\n        </li>\\\\n      </ul>\\\\n    </nav>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'PaginationContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'usePagination',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`usePagination\\\\\\\\` hook is wrapper on top of the [\\\\\\\\`useSelection\\\\\\\\`](/docs/selection-container--container#useselection) hook with\\\\n      specific prop getters for pagination.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Pagination Container',\\\\n  decorators: [withKnobs],\\\\n  component: PaginationContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\\\n  }\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"pagination-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":16},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":121},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":16},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":121}},\\\"pagination-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":123},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":225},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":123},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":225}}}},\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\n  },};\\n\",\"locationsMap\":{\"pagination-container--container\":{\"startLoc\":{\"col\":25,\"line\":38},\"endLoc\":{\"col\":139,\"line\":143},\"startBody\":{\"col\":25,\"line\":38},\"endBody\":{\"col\":139,\"line\":143}},\"pagination-container--hook\":{\"startLoc\":{\"col\":20,\"line\":145},\"endLoc\":{\"col\":139,\"line\":247},\"startBody\":{\"col\":20,\"line\":145},\"endBody\":{\"col\":139,\"line\":247}}}},\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, useState } from 'react';\\n\\nimport { withKnobs } from '@storybook/addon-knobs';\\n\\nimport { PaginationContainer, usePagination } from './src';\\n\\nconst pages = new Array(7).fill('page');\\n\\nexport const Container = () => {\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n\\n  return (\\n    <PaginationContainer\\n      selectedItem={controlledSelectedItem}\\n      onSelect={newSelectedItem => {\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n        if (newSelectedItem === 'prev') {\\n          if (controlledSelectedItem > 0) {\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\n          }\\n        } else if (newSelectedItem === 'next') {\\n          if (controlledSelectedItem < pages.length - 1) {\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\n          }\\n        } else {\\n          modifiedNewSelectedItem = newSelectedItem;\\n        }\\n\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n          setSelectedItem(modifiedNewSelectedItem);\\n        }\\n      }}\\n    >\\n      {({\\n        selectedItem,\\n        focusedItem,\\n        getContainerProps,\\n        getNextPageProps,\\n        getPreviousPageProps,\\n        getPageProps\\n      }) => {\\n        return (\\n          <nav aria-label=\\\"Pagination (Container)\\\">\\n            <div\\n              {...getContainerProps({\\n                style: { display: 'flex' }\\n              })}\\n            >\\n              <div\\n                {...getPreviousPageProps({\\n                  item: 'prev',\\n                  'aria-disabled': selectedItem === 0,\\n                  focusRef: previousPageRef,\\n                  ref: previousPageRef,\\n                  key: 'previous-page',\\n                  style: {\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Prev\\n              </div>\\n              {pages.map((page, index) => {\\n                return (\\n                  <div\\n                    {...getPageProps({\\n                      page: index,\\n                      current: index === selectedItem,\\n                      item: index,\\n                      focusRef: pageRefs[index],\\n                      ref: pageRefs[index],\\n                      key: `page-${index}`,\\n                      style: {\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\n                        background: index === selectedItem ? 'gray' : undefined,\\n                        padding: '0 6px',\\n                        cursor: 'pointer',\\n                        userSelect: 'none'\\n                      }\\n                    })}\\n                  >\\n                    {index + 1}\\n                  </div>\\n                );\\n              })}\\n              <div\\n                {...getNextPageProps({\\n                  item: 'next',\\n                  'aria-disabled': selectedItem === pages.length - 1,\\n                  focusRef: nextPageRef,\\n                  ref: nextPageRef,\\n                  key: 'next-page',\\n                  style: {\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Next\\n              </div>\\n            </div>\\n          </nav>\\n        );\\n      }}\\n    </PaginationContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n\\n  const {\\n    selectedItem,\\n    focusedItem,\\n    getContainerProps,\\n    getNextPageProps,\\n    getPreviousPageProps,\\n    getPageProps\\n  } = usePagination<number | string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => {\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n      if (newSelectedItem === 'prev') {\\n        if (controlledSelectedItem > 0) {\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\n        }\\n      } else if (newSelectedItem === 'next') {\\n        if (controlledSelectedItem < pages.length - 1) {\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\n        }\\n      } else {\\n        modifiedNewSelectedItem = newSelectedItem as number;\\n      }\\n\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n        setSelectedItem(modifiedNewSelectedItem);\\n      }\\n    }\\n  });\\n\\n  return (\\n    <nav aria-label=\\\"Pagination (Hook)\\\">\\n      <ul\\n        {...getContainerProps({\\n          role: null,\\n          style: { display: 'flex' }\\n        })}\\n      >\\n        <li\\n          {...getPreviousPageProps({\\n            role: null,\\n            item: 'prev',\\n            'aria-disabled': selectedItem === 0,\\n            focusRef: previousPageRef,\\n            key: 'previous-page',\\n            style: {\\n              color: selectedItem === 0 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Prev\\n        </li>\\n        {pages.map((page, index) => {\\n          return (\\n            <li\\n              {...getPageProps({\\n                role: null,\\n                page: index,\\n                current: index === selectedItem,\\n                item: index,\\n                focusRef: pageRefs[index],\\n                key: `page-${index}`,\\n                style: {\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\n                  background: index === selectedItem ? 'gray' : undefined,\\n                  padding: '0 6px',\\n                  cursor: 'pointer',\\n                  userSelect: 'none'\\n                }\\n              })}\\n            >\\n              {index + 1}\\n            </li>\\n          );\\n        })}\\n        <li\\n          {...getNextPageProps({\\n            role: null,\\n            item: 'next',\\n            'aria-disabled': selectedItem === pages.length - 1,\\n            focusRef: nextPageRef,\\n            key: 'next-page',\\n            style: {\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Next\\n        </li>\\n      </ul>\\n    </nav>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'PaginationContainer'\\n};\\n\\nHook.story = {\\n  name: 'usePagination',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`usePagination\\\\` hook is wrapper on top of the [\\\\`useSelection\\\\`](/docs/selection-container--container#useselection) hook with\\n      specific prop getters for pagination.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Pagination Container',\\n  decorators: [withKnobs],\\n  component: PaginationContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"pagination-container--container\":{\"startLoc\":{\"col\":25,\"line\":16},\"endLoc\":{\"col\":1,\"line\":121},\"startBody\":{\"col\":25,\"line\":16},\"endBody\":{\"col\":1,\"line\":121}},\"pagination-container--hook\":{\"startLoc\":{\"col\":20,\"line\":123},\"endLoc\":{\"col\":1,\"line\":225},\"startBody\":{\"col\":20,\"line\":123},\"endBody\":{\"col\":1,\"line\":225}}}},\n    componentSubtitle: `A container component which wraps the usePagination hook.`\n  },};\n",locationsMap:{"pagination-container--container":{startLoc:{col:25,line:60},endLoc:{col:277,line:165},startBody:{col:25,line:60},endBody:{col:277,line:165}},"pagination-container--hook":{startLoc:{col:20,line:167},endLoc:{col:277,line:269},startBody:{col:20,line:167},endBody:{col:277,line:269}}}}},_parameters.storySource={source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/pagination\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, useState } from 'react';\\n\\nimport { withKnobs } from '@storybook/addon-knobs';\\n\\nimport { PaginationContainer, usePagination } from './src';\\n\\nconst pages = new Array(7).fill('page');\\n\\nexport const Container = () => {\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n\\n  return (\\n    <PaginationContainer\\n      selectedItem={controlledSelectedItem}\\n      onSelect={newSelectedItem => {\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n        if (newSelectedItem === 'prev') {\\n          if (controlledSelectedItem > 0) {\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\n          }\\n        } else if (newSelectedItem === 'next') {\\n          if (controlledSelectedItem < pages.length - 1) {\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\n          }\\n        } else {\\n          modifiedNewSelectedItem = newSelectedItem;\\n        }\\n\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n          setSelectedItem(modifiedNewSelectedItem);\\n        }\\n      }}\\n    >\\n      {({\\n        selectedItem,\\n        focusedItem,\\n        getContainerProps,\\n        getNextPageProps,\\n        getPreviousPageProps,\\n        getPageProps\\n      }) => {\\n        return (\\n          <nav aria-label=\\\"Pagination (Container)\\\">\\n            <div\\n              {...getContainerProps({\\n                style: { display: 'flex' }\\n              })}\\n            >\\n              <div\\n                {...getPreviousPageProps({\\n                  item: 'prev',\\n                  'aria-disabled': selectedItem === 0,\\n                  focusRef: previousPageRef,\\n                  ref: previousPageRef,\\n                  key: 'previous-page',\\n                  style: {\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Prev\\n              </div>\\n              {pages.map((page, index) => {\\n                return (\\n                  <div\\n                    {...getPageProps({\\n                      page: index,\\n                      current: index === selectedItem,\\n                      item: index,\\n                      focusRef: pageRefs[index],\\n                      ref: pageRefs[index],\\n                      key: `page-${index}`,\\n                      style: {\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\n                        background: index === selectedItem ? 'gray' : undefined,\\n                        padding: '0 6px',\\n                        cursor: 'pointer',\\n                        userSelect: 'none'\\n                      }\\n                    })}\\n                  >\\n                    {index + 1}\\n                  </div>\\n                );\\n              })}\\n              <div\\n                {...getNextPageProps({\\n                  item: 'next',\\n                  'aria-disabled': selectedItem === pages.length - 1,\\n                  focusRef: nextPageRef,\\n                  ref: nextPageRef,\\n                  key: 'next-page',\\n                  style: {\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Next\\n              </div>\\n            </div>\\n          </nav>\\n        );\\n      }}\\n    </PaginationContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n\\n  const {\\n    selectedItem,\\n    focusedItem,\\n    getContainerProps,\\n    getNextPageProps,\\n    getPreviousPageProps,\\n    getPageProps\\n  } = usePagination<number | string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => {\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n      if (newSelectedItem === 'prev') {\\n        if (controlledSelectedItem > 0) {\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\n        }\\n      } else if (newSelectedItem === 'next') {\\n        if (controlledSelectedItem < pages.length - 1) {\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\n        }\\n      } else {\\n        modifiedNewSelectedItem = newSelectedItem as number;\\n      }\\n\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n        setSelectedItem(modifiedNewSelectedItem);\\n      }\\n    }\\n  });\\n\\n  return (\\n    <nav aria-label=\\\"Pagination (Hook)\\\">\\n      <ul\\n        {...getContainerProps({\\n          role: null,\\n          style: { display: 'flex' }\\n        })}\\n      >\\n        <li\\n          {...getPreviousPageProps({\\n            role: null,\\n            item: 'prev',\\n            'aria-disabled': selectedItem === 0,\\n            focusRef: previousPageRef,\\n            key: 'previous-page',\\n            style: {\\n              color: selectedItem === 0 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Prev\\n        </li>\\n        {pages.map((page, index) => {\\n          return (\\n            <li\\n              {...getPageProps({\\n                role: null,\\n                page: index,\\n                current: index === selectedItem,\\n                item: index,\\n                focusRef: pageRefs[index],\\n                key: `page-${index}`,\\n                style: {\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\n                  background: index === selectedItem ? 'gray' : undefined,\\n                  padding: '0 6px',\\n                  cursor: 'pointer',\\n                  userSelect: 'none'\\n                }\\n              })}\\n            >\\n              {index + 1}\\n            </li>\\n          );\\n        })}\\n        <li\\n          {...getNextPageProps({\\n            role: null,\\n            item: 'next',\\n            'aria-disabled': selectedItem === pages.length - 1,\\n            focusRef: nextPageRef,\\n            key: 'next-page',\\n            style: {\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Next\\n        </li>\\n      </ul>\\n    </nav>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'PaginationContainer'\\n};\\n\\nHook.story = {\\n  name: 'usePagination',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`usePagination\\\\` hook is wrapper on top of the [\\\\`useSelection\\\\`](/docs/selection-container--container#useselection) hook with\\n      specific prop getters for pagination.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Pagination Container',\\n  decorators: [withKnobs],\\n  component: PaginationContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"pagination-container--container\":{\"startLoc\":{\"col\":25,\"line\":16},\"endLoc\":{\"col\":1,\"line\":121},\"startBody\":{\"col\":25,\"line\":16},\"endBody\":{\"col\":1,\"line\":121}},\"pagination-container--hook\":{\"startLoc\":{\"col\":20,\"line\":123},\"endLoc\":{\"col\":1,\"line\":225},\"startBody\":{\"col\":20,\"line\":123},\"endBody\":{\"col\":1,\"line\":225}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/pagination.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, useState } from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { PaginationContainer, usePagination } from './src';\n\nconst pages = new Array(7).fill('page');\n\nexport const Container = addSourceDecorator(() => {\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\n  const previousPageRef = useRef(null);\n  const nextPageRef = useRef(null);\n  const pageRefs = pages.map(() => React.createRef());\n\n  return (\n    <PaginationContainer\n      selectedItem={controlledSelectedItem}\n      onSelect={newSelectedItem => {\n        let modifiedNewSelectedItem = controlledSelectedItem;\n\n        if (newSelectedItem === 'prev') {\n          if (controlledSelectedItem > 0) {\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\n          }\n        } else if (newSelectedItem === 'next') {\n          if (controlledSelectedItem < pages.length - 1) {\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\n          }\n        } else {\n          modifiedNewSelectedItem = newSelectedItem;\n        }\n\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\n          setSelectedItem(modifiedNewSelectedItem);\n        }\n      }}\n    >\n      {({\n        selectedItem,\n        focusedItem,\n        getContainerProps,\n        getNextPageProps,\n        getPreviousPageProps,\n        getPageProps\n      }) => {\n        return (\n          <nav aria-label=\"Pagination (Container)\">\n            <div\n              {...getContainerProps({\n                style: { display: 'flex' }\n              })}\n            >\n              <div\n                {...getPreviousPageProps({\n                  item: 'prev',\n                  'aria-disabled': selectedItem === 0,\n                  focusRef: previousPageRef,\n                  ref: previousPageRef,\n                  key: 'previous-page',\n                  style: {\n                    color: selectedItem === 0 ? 'gray' : undefined,\n                    cursor: 'pointer',\n                    userSelect: 'none'\n                  }\n                })}\n              >\n                Prev\n              </div>\n              {pages.map((page, index) => {\n                return (\n                  <div\n                    {...getPageProps({\n                      page: index,\n                      current: index === selectedItem,\n                      item: index,\n                      focusRef: pageRefs[index],\n                      ref: pageRefs[index],\n                      key: `page-${index}`,\n                      style: {\n                        outline: index === focusedItem ? '3px solid red' : undefined,\n                        background: index === selectedItem ? 'gray' : undefined,\n                        padding: '0 6px',\n                        cursor: 'pointer',\n                        userSelect: 'none'\n                      }\n                    })}\n                  >\n                    {index + 1}\n                  </div>\n                );\n              })}\n              <div\n                {...getNextPageProps({\n                  item: 'next',\n                  'aria-disabled': selectedItem === pages.length - 1,\n                  focusRef: nextPageRef,\n                  ref: nextPageRef,\n                  key: 'next-page',\n                  style: {\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\n                    cursor: 'pointer',\n                    userSelect: 'none'\n                  }\n                })}\n              >\n                Next\n              </div>\n            </div>\n          </nav>\n        );\n      }}\n    </PaginationContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const previousPageRef = useRef(null);\n  const nextPageRef = useRef(null);\n  const pageRefs = pages.map(() => React.createRef());\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\n\n  const {\n    selectedItem,\n    focusedItem,\n    getContainerProps,\n    getNextPageProps,\n    getPreviousPageProps,\n    getPageProps\n  } = usePagination<number | string>({\n    selectedItem: controlledSelectedItem,\n    onSelect: newSelectedItem => {\n      let modifiedNewSelectedItem = controlledSelectedItem;\n\n      if (newSelectedItem === 'prev') {\n        if (controlledSelectedItem > 0) {\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\n        }\n      } else if (newSelectedItem === 'next') {\n        if (controlledSelectedItem < pages.length - 1) {\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\n        }\n      } else {\n        modifiedNewSelectedItem = newSelectedItem as number;\n      }\n\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\n        setSelectedItem(modifiedNewSelectedItem);\n      }\n    }\n  });\n\n  return (\n    <nav aria-label=\"Pagination (Hook)\">\n      <ul\n        {...getContainerProps({\n          role: null,\n          style: { display: 'flex' }\n        })}\n      >\n        <li\n          {...getPreviousPageProps({\n            role: null,\n            item: 'prev',\n            'aria-disabled': selectedItem === 0,\n            focusRef: previousPageRef,\n            key: 'previous-page',\n            style: {\n              color: selectedItem === 0 ? 'gray' : undefined,\n              cursor: 'pointer',\n              userSelect: 'none'\n            }\n          })}\n        >\n          Prev\n        </li>\n        {pages.map((page, index) => {\n          return (\n            <li\n              {...getPageProps({\n                role: null,\n                page: index,\n                current: index === selectedItem,\n                item: index,\n                focusRef: pageRefs[index],\n                key: `page-${index}`,\n                style: {\n                  outline: index === focusedItem ? '3px solid red' : undefined,\n                  background: index === selectedItem ? 'gray' : undefined,\n                  padding: '0 6px',\n                  cursor: 'pointer',\n                  userSelect: 'none'\n                }\n              })}\n            >\n              {index + 1}\n            </li>\n          );\n        })}\n        <li\n          {...getNextPageProps({\n            role: null,\n            item: 'next',\n            'aria-disabled': selectedItem === pages.length - 1,\n            focusRef: nextPageRef,\n            key: 'next-page',\n            style: {\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\n              cursor: 'pointer',\n              userSelect: 'none'\n            }\n          })}\n        >\n          Next\n        </li>\n      </ul>\n    </nav>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'PaginationContainer'\n};\n\nHook.story = {\n  name: 'usePagination',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`usePagination\\` hook is wrapper on top of the [\\`useSelection\\`](/docs/selection-container--container#useselection) hook with\n      specific prop getters for pagination.`\n    }\n  }\n};\n\nexport default {\n  title: 'Pagination Container',\n  decorators: [withKnobs],\n  component: PaginationContainer,\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { useRef, useState } from 'react';\\n\\nimport { withKnobs } from '@storybook/addon-knobs';\\n\\nimport { PaginationContainer, usePagination } from './src';\\n\\nconst pages = new Array(7).fill('page');\\n\\nexport const Container = () => {\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n\\n  return (\\n    <PaginationContainer\\n      selectedItem={controlledSelectedItem}\\n      onSelect={newSelectedItem => {\\n        let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n        if (newSelectedItem === 'prev') {\\n          if (controlledSelectedItem > 0) {\\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\\n          }\\n        } else if (newSelectedItem === 'next') {\\n          if (controlledSelectedItem < pages.length - 1) {\\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\\n          }\\n        } else {\\n          modifiedNewSelectedItem = newSelectedItem;\\n        }\\n\\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n          setSelectedItem(modifiedNewSelectedItem);\\n        }\\n      }}\\n    >\\n      {({\\n        selectedItem,\\n        focusedItem,\\n        getContainerProps,\\n        getNextPageProps,\\n        getPreviousPageProps,\\n        getPageProps\\n      }) => {\\n        return (\\n          <nav aria-label=\\\"Pagination (Container)\\\">\\n            <div\\n              {...getContainerProps({\\n                style: { display: 'flex' }\\n              })}\\n            >\\n              <div\\n                {...getPreviousPageProps({\\n                  item: 'prev',\\n                  'aria-disabled': selectedItem === 0,\\n                  focusRef: previousPageRef,\\n                  ref: previousPageRef,\\n                  key: 'previous-page',\\n                  style: {\\n                    color: selectedItem === 0 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Prev\\n              </div>\\n              {pages.map((page, index) => {\\n                return (\\n                  <div\\n                    {...getPageProps({\\n                      page: index,\\n                      current: index === selectedItem,\\n                      item: index,\\n                      focusRef: pageRefs[index],\\n                      ref: pageRefs[index],\\n                      key: `page-${index}`,\\n                      style: {\\n                        outline: index === focusedItem ? '3px solid red' : undefined,\\n                        background: index === selectedItem ? 'gray' : undefined,\\n                        padding: '0 6px',\\n                        cursor: 'pointer',\\n                        userSelect: 'none'\\n                      }\\n                    })}\\n                  >\\n                    {index + 1}\\n                  </div>\\n                );\\n              })}\\n              <div\\n                {...getNextPageProps({\\n                  item: 'next',\\n                  'aria-disabled': selectedItem === pages.length - 1,\\n                  focusRef: nextPageRef,\\n                  ref: nextPageRef,\\n                  key: 'next-page',\\n                  style: {\\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n                    cursor: 'pointer',\\n                    userSelect: 'none'\\n                  }\\n                })}\\n              >\\n                Next\\n              </div>\\n            </div>\\n          </nav>\\n        );\\n      }}\\n    </PaginationContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const previousPageRef = useRef(null);\\n  const nextPageRef = useRef(null);\\n  const pageRefs = pages.map(() => React.createRef());\\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\\n\\n  const {\\n    selectedItem,\\n    focusedItem,\\n    getContainerProps,\\n    getNextPageProps,\\n    getPreviousPageProps,\\n    getPageProps\\n  } = usePagination<number | string>({\\n    selectedItem: controlledSelectedItem,\\n    onSelect: newSelectedItem => {\\n      let modifiedNewSelectedItem = controlledSelectedItem;\\n\\n      if (newSelectedItem === 'prev') {\\n        if (controlledSelectedItem > 0) {\\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\\n        }\\n      } else if (newSelectedItem === 'next') {\\n        if (controlledSelectedItem < pages.length - 1) {\\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\\n        }\\n      } else {\\n        modifiedNewSelectedItem = newSelectedItem as number;\\n      }\\n\\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\\n        setSelectedItem(modifiedNewSelectedItem);\\n      }\\n    }\\n  });\\n\\n  return (\\n    <nav aria-label=\\\"Pagination (Hook)\\\">\\n      <ul\\n        {...getContainerProps({\\n          role: null,\\n          style: { display: 'flex' }\\n        })}\\n      >\\n        <li\\n          {...getPreviousPageProps({\\n            role: null,\\n            item: 'prev',\\n            'aria-disabled': selectedItem === 0,\\n            focusRef: previousPageRef,\\n            key: 'previous-page',\\n            style: {\\n              color: selectedItem === 0 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Prev\\n        </li>\\n        {pages.map((page, index) => {\\n          return (\\n            <li\\n              {...getPageProps({\\n                role: null,\\n                page: index,\\n                current: index === selectedItem,\\n                item: index,\\n                focusRef: pageRefs[index],\\n                key: `page-${index}`,\\n                style: {\\n                  outline: index === focusedItem ? '3px solid red' : undefined,\\n                  background: index === selectedItem ? 'gray' : undefined,\\n                  padding: '0 6px',\\n                  cursor: 'pointer',\\n                  userSelect: 'none'\\n                }\\n              })}\\n            >\\n              {index + 1}\\n            </li>\\n          );\\n        })}\\n        <li\\n          {...getNextPageProps({\\n            role: null,\\n            item: 'next',\\n            'aria-disabled': selectedItem === pages.length - 1,\\n            focusRef: nextPageRef,\\n            key: 'next-page',\\n            style: {\\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\\n              cursor: 'pointer',\\n              userSelect: 'none'\\n            }\\n          })}\\n        >\\n          Next\\n        </li>\\n      </ul>\\n    </nav>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'PaginationContainer'\\n};\\n\\nHook.story = {\\n  name: 'usePagination',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`usePagination\\\\` hook is wrapper on top of the [\\\\`useSelection\\\\`](/docs/selection-container--container#useselection) hook with\\n      specific prop getters for pagination.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Pagination Container',\\n  decorators: [withKnobs],\\n  component: PaginationContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the usePagination hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"pagination-container--container\":{\"startLoc\":{\"col\":25,\"line\":16},\"endLoc\":{\"col\":1,\"line\":121},\"startBody\":{\"col\":25,\"line\":16},\"endBody\":{\"col\":1,\"line\":121}},\"pagination-container--hook\":{\"startLoc\":{\"col\":20,\"line\":123},\"endLoc\":{\"col\":1,\"line\":225},\"startBody\":{\"col\":20,\"line\":123},\"endBody\":{\"col\":1,\"line\":225}}}},\n    componentSubtitle: `A container component which wraps the usePagination hook.`\n  },};\n",locationsMap:{"pagination-container--container":{startLoc:{col:25,line:38},endLoc:{col:139,line:143},startBody:{col:25,line:38},endBody:{col:139,line:143}},"pagination-container--hook":{startLoc:{col:20,line:145},endLoc:{col:139,line:247},startBody:{col:20,line:145},endBody:{col:139,line:247}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { useRef, useState } from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport { PaginationContainer, usePagination } from './src';\n\nconst pages = new Array(7).fill('page');\n\nexport const Container = () => {\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\n  const previousPageRef = useRef(null);\n  const nextPageRef = useRef(null);\n  const pageRefs = pages.map(() => React.createRef());\n\n  return (\n    <PaginationContainer\n      selectedItem={controlledSelectedItem}\n      onSelect={newSelectedItem => {\n        let modifiedNewSelectedItem = controlledSelectedItem;\n\n        if (newSelectedItem === 'prev') {\n          if (controlledSelectedItem > 0) {\n            modifiedNewSelectedItem = controlledSelectedItem - 1;\n          }\n        } else if (newSelectedItem === 'next') {\n          if (controlledSelectedItem < pages.length - 1) {\n            modifiedNewSelectedItem = controlledSelectedItem + 1;\n          }\n        } else {\n          modifiedNewSelectedItem = newSelectedItem;\n        }\n\n        if (modifiedNewSelectedItem !== controlledSelectedItem) {\n          setSelectedItem(modifiedNewSelectedItem);\n        }\n      }}\n    >\n      {({\n        selectedItem,\n        focusedItem,\n        getContainerProps,\n        getNextPageProps,\n        getPreviousPageProps,\n        getPageProps\n      }) => {\n        return (\n          <nav aria-label=\"Pagination (Container)\">\n            <div\n              {...getContainerProps({\n                style: { display: 'flex' }\n              })}\n            >\n              <div\n                {...getPreviousPageProps({\n                  item: 'prev',\n                  'aria-disabled': selectedItem === 0,\n                  focusRef: previousPageRef,\n                  ref: previousPageRef,\n                  key: 'previous-page',\n                  style: {\n                    color: selectedItem === 0 ? 'gray' : undefined,\n                    cursor: 'pointer',\n                    userSelect: 'none'\n                  }\n                })}\n              >\n                Prev\n              </div>\n              {pages.map((page, index) => {\n                return (\n                  <div\n                    {...getPageProps({\n                      page: index,\n                      current: index === selectedItem,\n                      item: index,\n                      focusRef: pageRefs[index],\n                      ref: pageRefs[index],\n                      key: `page-${index}`,\n                      style: {\n                        outline: index === focusedItem ? '3px solid red' : undefined,\n                        background: index === selectedItem ? 'gray' : undefined,\n                        padding: '0 6px',\n                        cursor: 'pointer',\n                        userSelect: 'none'\n                      }\n                    })}\n                  >\n                    {index + 1}\n                  </div>\n                );\n              })}\n              <div\n                {...getNextPageProps({\n                  item: 'next',\n                  'aria-disabled': selectedItem === pages.length - 1,\n                  focusRef: nextPageRef,\n                  ref: nextPageRef,\n                  key: 'next-page',\n                  style: {\n                    color: selectedItem === pages.length - 1 ? 'gray' : undefined,\n                    cursor: 'pointer',\n                    userSelect: 'none'\n                  }\n                })}\n              >\n                Next\n              </div>\n            </div>\n          </nav>\n        );\n      }}\n    </PaginationContainer>\n  );\n};\n\nexport const Hook = () => {\n  const previousPageRef = useRef(null);\n  const nextPageRef = useRef(null);\n  const pageRefs = pages.map(() => React.createRef());\n  const [controlledSelectedItem, setSelectedItem] = useState(3);\n\n  const {\n    selectedItem,\n    focusedItem,\n    getContainerProps,\n    getNextPageProps,\n    getPreviousPageProps,\n    getPageProps\n  } = usePagination<number | string>({\n    selectedItem: controlledSelectedItem,\n    onSelect: newSelectedItem => {\n      let modifiedNewSelectedItem = controlledSelectedItem;\n\n      if (newSelectedItem === 'prev') {\n        if (controlledSelectedItem > 0) {\n          modifiedNewSelectedItem = controlledSelectedItem - 1;\n        }\n      } else if (newSelectedItem === 'next') {\n        if (controlledSelectedItem < pages.length - 1) {\n          modifiedNewSelectedItem = controlledSelectedItem + 1;\n        }\n      } else {\n        modifiedNewSelectedItem = newSelectedItem as number;\n      }\n\n      if (modifiedNewSelectedItem !== controlledSelectedItem) {\n        setSelectedItem(modifiedNewSelectedItem);\n      }\n    }\n  });\n\n  return (\n    <nav aria-label=\"Pagination (Hook)\">\n      <ul\n        {...getContainerProps({\n          role: null,\n          style: { display: 'flex' }\n        })}\n      >\n        <li\n          {...getPreviousPageProps({\n            role: null,\n            item: 'prev',\n            'aria-disabled': selectedItem === 0,\n            focusRef: previousPageRef,\n            key: 'previous-page',\n            style: {\n              color: selectedItem === 0 ? 'gray' : undefined,\n              cursor: 'pointer',\n              userSelect: 'none'\n            }\n          })}\n        >\n          Prev\n        </li>\n        {pages.map((page, index) => {\n          return (\n            <li\n              {...getPageProps({\n                role: null,\n                page: index,\n                current: index === selectedItem,\n                item: index,\n                focusRef: pageRefs[index],\n                key: `page-${index}`,\n                style: {\n                  outline: index === focusedItem ? '3px solid red' : undefined,\n                  background: index === selectedItem ? 'gray' : undefined,\n                  padding: '0 6px',\n                  cursor: 'pointer',\n                  userSelect: 'none'\n                }\n              })}\n            >\n              {index + 1}\n            </li>\n          );\n        })}\n        <li\n          {...getNextPageProps({\n            role: null,\n            item: 'next',\n            'aria-disabled': selectedItem === pages.length - 1,\n            focusRef: nextPageRef,\n            key: 'next-page',\n            style: {\n              color: selectedItem === pages.length - 1 ? 'gray' : undefined,\n              cursor: 'pointer',\n              userSelect: 'none'\n            }\n          })}\n        >\n          Next\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nContainer.story = {\n  name: 'PaginationContainer'\n};\n\nHook.story = {\n  name: 'usePagination',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`usePagination\\` hook is wrapper on top of the [\\`useSelection\\`](/docs/selection-container--container#useselection) hook with\n      specific prop getters for pagination.`\n    }\n  }\n};\n\nexport default {\n  title: 'Pagination Container',\n  decorators: [withKnobs],\n  component: PaginationContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the usePagination hook.`\n  }\n};\n",locationsMap:{"pagination-container--container":{startLoc:{col:25,line:16},endLoc:{col:1,line:121},startBody:{col:25,line:16},endBody:{col:1,line:121}},"pagination-container--hook":{startLoc:{col:20,line:123},endLoc:{col:1,line:225},startBody:{col:20,line:123},endBody:{col:1,line:225}}}},_parameters.componentSubtitle="A container component which wraps the usePagination hook.",_parameters)}},2820:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(2804);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),objectWithoutPropertiesLoose=__webpack_require__(1422),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),useSchedule=(__webpack_require__(2807),__webpack_require__(2808),__webpack_require__(573),function(_temp){var _ref=void 0===_temp?{}:_temp,_ref$duration=_ref.duration,duration=void 0===_ref$duration?1250:_ref$duration,_ref$delayMS=_ref.delayMS,delayMS=void 0===_ref$delayMS?750:_ref$delayMS,_ref$loop=_ref.loop,loop=void 0===_ref$loop||_ref$loop,_useState=Object(react.useState)(0),elapsed=_useState[0],setTime=_useState[1],_useState2=Object(react.useState)(!1),delayComplete=_useState2[0],setDelayComplete=_useState2[1];return Object(react.useLayoutEffect)((function(){var raf,start,loopTimeout,destroyed=!1,tick=function(){destroyed||(raf=requestAnimationFrame(performAnimationFrame))},performAnimationFrame=function(){setTime(Date.now()-start),tick()},renderingDelayTimeout=setTimeout((function onStart(){destroyed||(loopTimeout=setTimeout((function(){cancelAnimationFrame(raf),setTime(Date.now()-start),loop&&onStart()}),duration),start=Date.now(),setDelayComplete(!0),tick())}),delayMS);return function(){destroyed=!0,clearTimeout(renderingDelayTimeout),clearTimeout(loopTimeout),cancelAnimationFrame(raf)}}),[duration,delayMS,loop]),{elapsed:Math.min(1,elapsed/duration),delayMS:delayMS,delayComplete:delayComplete}}),ScheduleContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,props=Object(objectWithoutPropertiesLoose.a)(_ref,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(useSchedule(props))))};ScheduleContainer.defaultProps={duration:1250,delayMS:750,loop:!0},ScheduleContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,duration:prop_types_default.a.number,loop:prop_types_default.a.bool,delayMS:prop_types_default.a.number},ScheduleContainer.__docgenInfo={description:"",methods:[],displayName:"ScheduleContainer",props:{duration:{defaultValue:{value:"1250",computed:!1},type:{name:"number"},required:!1,description:"The duration of a schedule in miliseconds"},delayMS:{defaultValue:{value:"750",computed:!1},type:{name:"number"},required:!1,description:"The delay in miliseconds prior to the beginning of the schedule"},loop:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:"Determines whether a schedule should loop"},children:{type:{name:"func"},required:!1,description:"A children render prop function which receives the schedule state"},render:{type:{name:"func"},required:!1,description:"A render prop function which receives the schedule state"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/schedule/src/ScheduleContainer.tsx"]={name:"ScheduleContainer",docgenInfo:ScheduleContainer.__docgenInfo,path:"packages/schedule/src/ScheduleContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/schedule",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/schedule";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/schedule\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <ScheduleContainer\\\\n    duration={number(\'duration\', 1250)}\\\\n    loop={boolean(\'loop\', true)}\\\\n    delayMS={number(\'delayMS\', 750)}\\\\n  >\\\\n    {({ elapsed, delayMS, delayComplete }) => {\\\\n      if (!delayComplete && delayMS !== 0) {\\\\n        return <div>Delay...</div>;\\\\n      }\\\\n\\\\n      return (\\\\n        <div>\\\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n          Elapsed: {elapsed}\\\\n        </div>\\\\n      );\\\\n    }}\\\\n  </ScheduleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Animation = () => {\\\\n    const duration = number(\'duration\', 1250);\\\\n    const loop = boolean(\'loop\', true);\\\\n    const delayMS = number(\'delayMS\', 750);\\\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\\\n\\\\n    if (!delayComplete && delayMS !== 0) {\\\\n      return <div>Delay...</div>;\\\\n    }\\\\n\\\\n    return (\\\\n      <div>\\\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n        Elapsed: {elapsed}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return <Animation />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ScheduleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSchedule\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSchedule\\\\\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Schedule Container\',\\\\n  decorators: [withKnobs],\\\\n  component: ScheduleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"schedule-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":33},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":33}},\\"schedule-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":35},\\"endLoc\\":{\\"col\\":1,\\"line\\":55},\\"startBody\\":{\\"col\\":20,\\"line\\":35},\\"endBody\\":{\\"col\\":1,\\"line\\":55}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/schedule.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <ScheduleContainer\\\\n    duration={number(\'duration\', 1250)}\\\\n    loop={boolean(\'loop\', true)}\\\\n    delayMS={number(\'delayMS\', 750)}\\\\n  >\\\\n    {({ elapsed, delayMS, delayComplete }) => {\\\\n      if (!delayComplete && delayMS !== 0) {\\\\n        return <div>Delay...</div>;\\\\n      }\\\\n\\\\n      return (\\\\n        <div>\\\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n          Elapsed: {elapsed}\\\\n        </div>\\\\n      );\\\\n    }}\\\\n  </ScheduleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Animation = () => {\\\\n    const duration = number(\'duration\', 1250);\\\\n    const loop = boolean(\'loop\', true);\\\\n    const delayMS = number(\'delayMS\', 750);\\\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\\\n\\\\n    if (!delayComplete && delayMS !== 0) {\\\\n      return <div>Delay...</div>;\\\\n    }\\\\n\\\\n    return (\\\\n      <div>\\\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n        Elapsed: {elapsed}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return <Animation />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ScheduleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSchedule\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSchedule\\\\\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Schedule Container\',\\\\n  decorators: [withKnobs],\\\\n  component: ScheduleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"schedule-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":33},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":33}},\\"schedule-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":35},\\"endLoc\\":{\\"col\\":1,\\"line\\":55},\\"startBody\\":{\\"col\\":20,\\"line\\":35},\\"endBody\\":{\\"col\\":1,\\"line\\":55}}}},\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"schedule-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":55},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":55}},"schedule-container--hook":{"startLoc":{"col":20,"line":57},"endLoc":{"col":139,"line":77},"startBody":{"col":20,"line":57},"endBody":{"col":139,"line":77}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/schedule.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/schedule";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = () => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n};\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"schedule-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":33},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":33}},"schedule-container--hook":{"startLoc":{"col":20,"line":35},"endLoc":{"col":1,"line":55},"startBody":{"col":20,"line":35},"endBody":{"col":1,"line":55}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/schedule.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\n\nimport { ScheduleContainer, useSchedule } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <ScheduleContainer\n    duration={number(\'duration\', 1250)}\n    loop={boolean(\'loop\', true)}\n    delayMS={number(\'delayMS\', 750)}\n  >\n    {({ elapsed, delayMS, delayComplete }) => {\n      if (!delayComplete && delayMS !== 0) {\n        return <div>Delay...</div>;\n      }\n\n      return (\n        <div>\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\n          Elapsed: {elapsed}\n        </div>\n      );\n    }}\n  </ScheduleContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const Animation = () => {\n    const duration = number(\'duration\', 1250);\n    const loop = boolean(\'loop\', true);\n    const delayMS = number(\'delayMS\', 750);\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\n\n    if (!delayComplete && delayMS !== 0) {\n      return <div>Delay...</div>;\n    }\n\n    return (\n      <div>\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\n        Elapsed: {elapsed}\n      </div>\n    );\n  };\n\n  return <Animation />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'ScheduleContainer\'\n};\n\nHook.story = {\n  name: \'useSchedule\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSchedule\\` hook implements a schedule (timer) and communicates when it has elapsed.`\n    }\n  }\n};\n\nexport default {\n  title: \'Schedule Container\',\n  decorators: [withKnobs],\n  component: ScheduleContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/schedule\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <ScheduleContainer\\\\n    duration={number(\'duration\', 1250)}\\\\n    loop={boolean(\'loop\', true)}\\\\n    delayMS={number(\'delayMS\', 750)}\\\\n  >\\\\n    {({ elapsed, delayMS, delayComplete }) => {\\\\n      if (!delayComplete && delayMS !== 0) {\\\\n        return <div>Delay...</div>;\\\\n      }\\\\n\\\\n      return (\\\\n        <div>\\\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n          Elapsed: {elapsed}\\\\n        </div>\\\\n      );\\\\n    }}\\\\n  </ScheduleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Animation = () => {\\\\n    const duration = number(\'duration\', 1250);\\\\n    const loop = boolean(\'loop\', true);\\\\n    const delayMS = number(\'delayMS\', 750);\\\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\\\n\\\\n    if (!delayComplete && delayMS !== 0) {\\\\n      return <div>Delay...</div>;\\\\n    }\\\\n\\\\n    return (\\\\n      <div>\\\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n        Elapsed: {elapsed}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return <Animation />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ScheduleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSchedule\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSchedule\\\\\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Schedule Container\',\\\\n  decorators: [withKnobs],\\\\n  component: ScheduleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"schedule-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":33},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":33}},\\"schedule-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":35},\\"endLoc\\":{\\"col\\":1,\\"line\\":55},\\"startBody\\":{\\"col\\":20,\\"line\\":35},\\"endBody\\":{\\"col\\":1,\\"line\\":55}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/schedule.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <ScheduleContainer\\\\n    duration={number(\'duration\', 1250)}\\\\n    loop={boolean(\'loop\', true)}\\\\n    delayMS={number(\'delayMS\', 750)}\\\\n  >\\\\n    {({ elapsed, delayMS, delayComplete }) => {\\\\n      if (!delayComplete && delayMS !== 0) {\\\\n        return <div>Delay...</div>;\\\\n      }\\\\n\\\\n      return (\\\\n        <div>\\\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n          Elapsed: {elapsed}\\\\n        </div>\\\\n      );\\\\n    }}\\\\n  </ScheduleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Animation = () => {\\\\n    const duration = number(\'duration\', 1250);\\\\n    const loop = boolean(\'loop\', true);\\\\n    const delayMS = number(\'delayMS\', 750);\\\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\\\n\\\\n    if (!delayComplete && delayMS !== 0) {\\\\n      return <div>Delay...</div>;\\\\n    }\\\\n\\\\n    return (\\\\n      <div>\\\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n        Elapsed: {elapsed}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return <Animation />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ScheduleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSchedule\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSchedule\\\\\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Schedule Container\',\\\\n  decorators: [withKnobs],\\\\n  component: ScheduleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"schedule-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":33},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":33}},\\"schedule-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":35},\\"endLoc\\":{\\"col\\":1,\\"line\\":55},\\"startBody\\":{\\"col\\":20,\\"line\\":35},\\"endBody\\":{\\"col\\":1,\\"line\\":55}}}},\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  },};\\n","locationsMap":{"schedule-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":55},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":55}},"schedule-container--hook":{"startLoc":{"col":20,"line":57},"endLoc":{"col":139,"line":77},"startBody":{"col":20,"line":57},"endBody":{"col":139,"line":77}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = () => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n};\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  }\\n};\\n","locationsMap":{"schedule-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":33},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":33}},"schedule-container--hook":{"startLoc":{"col":20,"line":35},"endLoc":{"col":1,"line":55},"startBody":{"col":20,"line":35},"endBody":{"col":1,"line":55}}}},\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\n  },};\n',__ADDS_MAP__={"schedule-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:77},startBody:{col:25,line:58},endBody:{col:277,line:77}},"schedule-container--hook":{startLoc:{col:20,line:79},endLoc:{col:277,line:99},startBody:{col:20,line:79},endBody:{col:277,line:99}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},Container=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/schedule",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/schedule";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = () => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n};\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"schedule-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":33},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":33}},"schedule-container--hook":{"startLoc":{"col":20,"line":35},"endLoc":{"col":1,"line":55},"startBody":{"col":20,"line":35},"endBody":{"col":1,"line":55}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/schedule.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\n\nimport { ScheduleContainer, useSchedule } from \'./src\';\n\nexport const Container = addSourceDecorator(() => (\n  <ScheduleContainer\n    duration={number(\'duration\', 1250)}\n    loop={boolean(\'loop\', true)}\n    delayMS={number(\'delayMS\', 750)}\n  >\n    {({ elapsed, delayMS, delayComplete }) => {\n      if (!delayComplete && delayMS !== 0) {\n        return <div>Delay...</div>;\n      }\n\n      return (\n        <div>\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\n          Elapsed: {elapsed}\n        </div>\n      );\n    }}\n  </ScheduleContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const Animation = () => {\n    const duration = number(\'duration\', 1250);\n    const loop = boolean(\'loop\', true);\n    const delayMS = number(\'delayMS\', 750);\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\n\n    if (!delayComplete && delayMS !== 0) {\n      return <div>Delay...</div>;\n    }\n\n    return (\n      <div>\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\n        Elapsed: {elapsed}\n      </div>\n    );\n  };\n\n  return <Animation />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'ScheduleContainer\'\n};\n\nHook.story = {\n  name: \'useSchedule\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSchedule\\` hook implements a schedule (timer) and communicates when it has elapsed.`\n    }\n  }\n};\n\nexport default {\n  title: \'Schedule Container\',\n  decorators: [withKnobs],\n  component: ScheduleContainer,\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = () => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n};\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  }\\n};\\n","locationsMap":{"schedule-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":33},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":33}},"schedule-container--hook":{"startLoc":{"col":20,"line":35},"endLoc":{"col":1,"line":55},"startBody":{"col":20,"line":35},"endBody":{"col":1,"line":55}}}},\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\n  },};\n',__ADDS_MAP__={"schedule-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:55},startBody:{col:25,line:36},endBody:{col:139,line:55}},"schedule-container--hook":{startLoc:{col:20,line:57},endLoc:{col:139,line:77},startBody:{col:20,line:57},endBody:{col:139,line:77}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(2).withSource,(addSourceDecorator=__webpack_require__(2).addSource)(addSourceDecorator(addSourceDecorator((function(){return react_default.a.createElement(ScheduleContainer,{duration:Object(dist.number)("duration",1250),loop:Object(dist.boolean)("loop",!0),delayMS:Object(dist.number)("delayMS",750)},(function(_ref){var elapsed=_ref.elapsed,delayMS=_ref.delayMS;return _ref.delayComplete||0===delayMS?react_default.a.createElement("div",null,"Percentage: ",(100*elapsed).toFixed(0),"%",react_default.a.createElement("br",null),"Elapsed: ",elapsed):react_default.a.createElement("div",null,"Delay...")}))}),{__STORY__:__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\n\nimport { withKnobs, boolean, number } from '@storybook/addon-knobs';\n\nimport { ScheduleContainer, useSchedule } from './src';\n\nexport const Container = () => (\n  <ScheduleContainer\n    duration={number('duration', 1250)}\n    loop={boolean('loop', true)}\n    delayMS={number('delayMS', 750)}\n  >\n    {({ elapsed, delayMS, delayComplete }) => {\n      if (!delayComplete && delayMS !== 0) {\n        return <div>Delay...</div>;\n      }\n\n      return (\n        <div>\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\n          Elapsed: {elapsed}\n        </div>\n      );\n    }}\n  </ScheduleContainer>\n);\n\nexport const Hook = () => {\n  const Animation = () => {\n    const duration = number('duration', 1250);\n    const loop = boolean('loop', true);\n    const delayMS = number('delayMS', 750);\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\n\n    if (!delayComplete && delayMS !== 0) {\n      return <div>Delay...</div>;\n    }\n\n    return (\n      <div>\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\n        Elapsed: {elapsed}\n      </div>\n    );\n  };\n\n  return <Animation />;\n};\n\nContainer.story = {\n  name: 'ScheduleContainer'\n};\n\nHook.story = {\n  name: 'useSchedule',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSchedule\\` hook implements a schedule (timer) and communicates when it has elapsed.`\n    }\n  }\n};\n\nexport default {\n  title: 'Schedule Container',\n  decorators: [withKnobs],\n  component: ScheduleContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\n  }\n};\n",__ADDS_MAP__:__ADDS_MAP__={"schedule-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:33},startBody:{col:25,line:14},endBody:{col:1,line:33}},"schedule-container--hook":{startLoc:{col:20,line:35},endLoc:{col:1,line:55},startBody:{col:20,line:35},endBody:{col:1,line:55}}},__MAIN_FILE_LOCATION__:"/schedule.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/home/circleci/project/packages/schedule",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/schedule.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/schedule.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){return react_default.a.createElement((function(){var duration=Object(dist.number)("duration",1250),loop=Object(dist.boolean)("loop",!0),delayMS=Object(dist.number)("delayMS",750),_useSchedule=useSchedule({duration:duration,loop:loop,delayMS:delayMS}),elapsed=_useSchedule.elapsed;return _useSchedule.delayComplete||0===delayMS?react_default.a.createElement("div",null,"Percentage: ",(100*elapsed).toFixed(0),"%",react_default.a.createElement("br",null),"Elapsed: ",elapsed):react_default.a.createElement("div",null,"Delay...")}),null)}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/schedule.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/schedule.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/schedule.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"ScheduleContainer"},Hook.story={name:"useSchedule",parameters:{docs:{storyDescription:"The `useSchedule` hook implements a schedule (timer) and communicates when it has elapsed."}}};__webpack_exports__.default={title:"Schedule Container",decorators:[dist.withKnobs],component:ScheduleContainer,parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/schedule";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/schedule\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <ScheduleContainer\\\\n    duration={number(\'duration\', 1250)}\\\\n    loop={boolean(\'loop\', true)}\\\\n    delayMS={number(\'delayMS\', 750)}\\\\n  >\\\\n    {({ elapsed, delayMS, delayComplete }) => {\\\\n      if (!delayComplete && delayMS !== 0) {\\\\n        return <div>Delay...</div>;\\\\n      }\\\\n\\\\n      return (\\\\n        <div>\\\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n          Elapsed: {elapsed}\\\\n        </div>\\\\n      );\\\\n    }}\\\\n  </ScheduleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Animation = () => {\\\\n    const duration = number(\'duration\', 1250);\\\\n    const loop = boolean(\'loop\', true);\\\\n    const delayMS = number(\'delayMS\', 750);\\\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\\\n\\\\n    if (!delayComplete && delayMS !== 0) {\\\\n      return <div>Delay...</div>;\\\\n    }\\\\n\\\\n    return (\\\\n      <div>\\\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n        Elapsed: {elapsed}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return <Animation />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ScheduleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSchedule\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSchedule\\\\\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Schedule Container\',\\\\n  decorators: [withKnobs],\\\\n  component: ScheduleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"schedule-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":33},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":33}},\\"schedule-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":35},\\"endLoc\\":{\\"col\\":1,\\"line\\":55},\\"startBody\\":{\\"col\\":20,\\"line\\":35},\\"endBody\\":{\\"col\\":1,\\"line\\":55}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/schedule.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <ScheduleContainer\\\\n    duration={number(\'duration\', 1250)}\\\\n    loop={boolean(\'loop\', true)}\\\\n    delayMS={number(\'delayMS\', 750)}\\\\n  >\\\\n    {({ elapsed, delayMS, delayComplete }) => {\\\\n      if (!delayComplete && delayMS !== 0) {\\\\n        return <div>Delay...</div>;\\\\n      }\\\\n\\\\n      return (\\\\n        <div>\\\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n          Elapsed: {elapsed}\\\\n        </div>\\\\n      );\\\\n    }}\\\\n  </ScheduleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Animation = () => {\\\\n    const duration = number(\'duration\', 1250);\\\\n    const loop = boolean(\'loop\', true);\\\\n    const delayMS = number(\'delayMS\', 750);\\\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\\\n\\\\n    if (!delayComplete && delayMS !== 0) {\\\\n      return <div>Delay...</div>;\\\\n    }\\\\n\\\\n    return (\\\\n      <div>\\\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n        Elapsed: {elapsed}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return <Animation />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ScheduleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSchedule\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSchedule\\\\\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Schedule Container\',\\\\n  decorators: [withKnobs],\\\\n  component: ScheduleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"schedule-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":33},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":33}},\\"schedule-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":35},\\"endLoc\\":{\\"col\\":1,\\"line\\":55},\\"startBody\\":{\\"col\\":20,\\"line\\":35},\\"endBody\\":{\\"col\\":1,\\"line\\":55}}}},\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"schedule-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":55},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":55}},"schedule-container--hook":{"startLoc":{"col":20,"line":57},"endLoc":{"col":139,"line":77},"startBody":{"col":20,"line":57},"endBody":{"col":139,"line":77}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/schedule.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/schedule";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = () => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n};\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"schedule-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":33},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":33}},"schedule-container--hook":{"startLoc":{"col":20,"line":35},"endLoc":{"col":1,"line":55},"startBody":{"col":20,"line":35},"endBody":{"col":1,"line":55}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/schedule.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\n\nimport { ScheduleContainer, useSchedule } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => (\n  <ScheduleContainer\n    duration={number(\'duration\', 1250)}\n    loop={boolean(\'loop\', true)}\n    delayMS={number(\'delayMS\', 750)}\n  >\n    {({ elapsed, delayMS, delayComplete }) => {\n      if (!delayComplete && delayMS !== 0) {\n        return <div>Delay...</div>;\n      }\n\n      return (\n        <div>\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\n          Elapsed: {elapsed}\n        </div>\n      );\n    }}\n  </ScheduleContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const Animation = () => {\n    const duration = number(\'duration\', 1250);\n    const loop = boolean(\'loop\', true);\n    const delayMS = number(\'delayMS\', 750);\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\n\n    if (!delayComplete && delayMS !== 0) {\n      return <div>Delay...</div>;\n    }\n\n    return (\n      <div>\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\n        Elapsed: {elapsed}\n      </div>\n    );\n  };\n\n  return <Animation />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'ScheduleContainer\'\n};\n\nHook.story = {\n  name: \'useSchedule\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSchedule\\` hook implements a schedule (timer) and communicates when it has elapsed.`\n    }\n  }\n};\n\nexport default {\n  title: \'Schedule Container\',\n  decorators: [withKnobs],\n  component: ScheduleContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/schedule\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <ScheduleContainer\\\\n    duration={number(\'duration\', 1250)}\\\\n    loop={boolean(\'loop\', true)}\\\\n    delayMS={number(\'delayMS\', 750)}\\\\n  >\\\\n    {({ elapsed, delayMS, delayComplete }) => {\\\\n      if (!delayComplete && delayMS !== 0) {\\\\n        return <div>Delay...</div>;\\\\n      }\\\\n\\\\n      return (\\\\n        <div>\\\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n          Elapsed: {elapsed}\\\\n        </div>\\\\n      );\\\\n    }}\\\\n  </ScheduleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Animation = () => {\\\\n    const duration = number(\'duration\', 1250);\\\\n    const loop = boolean(\'loop\', true);\\\\n    const delayMS = number(\'delayMS\', 750);\\\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\\\n\\\\n    if (!delayComplete && delayMS !== 0) {\\\\n      return <div>Delay...</div>;\\\\n    }\\\\n\\\\n    return (\\\\n      <div>\\\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n        Elapsed: {elapsed}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return <Animation />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ScheduleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSchedule\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSchedule\\\\\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Schedule Container\',\\\\n  decorators: [withKnobs],\\\\n  component: ScheduleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"schedule-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":33},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":33}},\\"schedule-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":35},\\"endLoc\\":{\\"col\\":1,\\"line\\":55},\\"startBody\\":{\\"col\\":20,\\"line\\":35},\\"endBody\\":{\\"col\\":1,\\"line\\":55}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/schedule.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\n\\\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\\\n\\\\nexport const Container = () => (\\\\n  <ScheduleContainer\\\\n    duration={number(\'duration\', 1250)}\\\\n    loop={boolean(\'loop\', true)}\\\\n    delayMS={number(\'delayMS\', 750)}\\\\n  >\\\\n    {({ elapsed, delayMS, delayComplete }) => {\\\\n      if (!delayComplete && delayMS !== 0) {\\\\n        return <div>Delay...</div>;\\\\n      }\\\\n\\\\n      return (\\\\n        <div>\\\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n          Elapsed: {elapsed}\\\\n        </div>\\\\n      );\\\\n    }}\\\\n  </ScheduleContainer>\\\\n);\\\\n\\\\nexport const Hook = () => {\\\\n  const Animation = () => {\\\\n    const duration = number(\'duration\', 1250);\\\\n    const loop = boolean(\'loop\', true);\\\\n    const delayMS = number(\'delayMS\', 750);\\\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\\\n\\\\n    if (!delayComplete && delayMS !== 0) {\\\\n      return <div>Delay...</div>;\\\\n    }\\\\n\\\\n    return (\\\\n      <div>\\\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\\\n        Elapsed: {elapsed}\\\\n      </div>\\\\n    );\\\\n  };\\\\n\\\\n  return <Animation />;\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'ScheduleContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSchedule\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSchedule\\\\\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Schedule Container\',\\\\n  decorators: [withKnobs],\\\\n  component: ScheduleContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"schedule-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":33},\\"startBody\\":{\\"col\\":25,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":33}},\\"schedule-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":35},\\"endLoc\\":{\\"col\\":1,\\"line\\":55},\\"startBody\\":{\\"col\\":20,\\"line\\":35},\\"endBody\\":{\\"col\\":1,\\"line\\":55}}}},\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  },};\\n","locationsMap":{"schedule-container--container":{"startLoc":{"col":25,"line":36},"endLoc":{"col":139,"line":55},"startBody":{"col":25,"line":36},"endBody":{"col":139,"line":55}},"schedule-container--hook":{"startLoc":{"col":20,"line":57},"endLoc":{"col":139,"line":77},"startBody":{"col":20,"line":57},"endBody":{"col":139,"line":77}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = () => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n};\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  }\\n};\\n","locationsMap":{"schedule-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":33},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":33}},"schedule-container--hook":{"startLoc":{"col":20,"line":35},"endLoc":{"col":1,"line":55},"startBody":{"col":20,"line":35},"endBody":{"col":1,"line":55}}}},\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\n  },};\n',locationsMap:{"schedule-container--container":{startLoc:{col:25,line:58},endLoc:{col:277,line:77},startBody:{col:25,line:58},endBody:{col:277,line:77}},"schedule-container--hook":{startLoc:{col:20,line:79},endLoc:{col:277,line:99},startBody:{col:20,line:79},endBody:{col:277,line:99}}}}},_parameters.storySource={source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/schedule";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = () => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n};\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"schedule-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":33},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":33}},"schedule-container--hook":{"startLoc":{"col":20,"line":35},"endLoc":{"col":1,"line":55},"startBody":{"col":20,"line":35},"endBody":{"col":1,"line":55}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/schedule.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\n\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\n\nimport { ScheduleContainer, useSchedule } from \'./src\';\n\nexport const Container = addSourceDecorator(() => (\n  <ScheduleContainer\n    duration={number(\'duration\', 1250)}\n    loop={boolean(\'loop\', true)}\n    delayMS={number(\'delayMS\', 750)}\n  >\n    {({ elapsed, delayMS, delayComplete }) => {\n      if (!delayComplete && delayMS !== 0) {\n        return <div>Delay...</div>;\n      }\n\n      return (\n        <div>\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\n          Elapsed: {elapsed}\n        </div>\n      );\n    }}\n  </ScheduleContainer>\n), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const Animation = () => {\n    const duration = number(\'duration\', 1250);\n    const loop = boolean(\'loop\', true);\n    const delayMS = number(\'delayMS\', 750);\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\n\n    if (!delayComplete && delayMS !== 0) {\n      return <div>Delay...</div>;\n    }\n\n    return (\n      <div>\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\n        Elapsed: {elapsed}\n      </div>\n    );\n  };\n\n  return <Animation />;\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'ScheduleContainer\'\n};\n\nHook.story = {\n  name: \'useSchedule\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSchedule\\` hook implements a schedule (timer) and communicates when it has elapsed.`\n    }\n  }\n};\n\nexport default {\n  title: \'Schedule Container\',\n  decorators: [withKnobs],\n  component: ScheduleContainer,\n  parameters: {"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\n\\nimport { withKnobs, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { ScheduleContainer, useSchedule } from \'./src\';\\n\\nexport const Container = () => (\\n  <ScheduleContainer\\n    duration={number(\'duration\', 1250)}\\n    loop={boolean(\'loop\', true)}\\n    delayMS={number(\'delayMS\', 750)}\\n  >\\n    {({ elapsed, delayMS, delayComplete }) => {\\n      if (!delayComplete && delayMS !== 0) {\\n        return <div>Delay...</div>;\\n      }\\n\\n      return (\\n        <div>\\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n          Elapsed: {elapsed}\\n        </div>\\n      );\\n    }}\\n  </ScheduleContainer>\\n);\\n\\nexport const Hook = () => {\\n  const Animation = () => {\\n    const duration = number(\'duration\', 1250);\\n    const loop = boolean(\'loop\', true);\\n    const delayMS = number(\'delayMS\', 750);\\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\\n\\n    if (!delayComplete && delayMS !== 0) {\\n      return <div>Delay...</div>;\\n    }\\n\\n    return (\\n      <div>\\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\\n        Elapsed: {elapsed}\\n      </div>\\n    );\\n  };\\n\\n  return <Animation />;\\n};\\n\\nContainer.story = {\\n  name: \'ScheduleContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSchedule\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSchedule\\\\` hook implements a schedule (timer) and communicates when it has elapsed.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Schedule Container\',\\n  decorators: [withKnobs],\\n  component: ScheduleContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\\n  }\\n};\\n","locationsMap":{"schedule-container--container":{"startLoc":{"col":25,"line":14},"endLoc":{"col":1,"line":33},"startBody":{"col":25,"line":14},"endBody":{"col":1,"line":33}},"schedule-container--hook":{"startLoc":{"col":20,"line":35},"endLoc":{"col":1,"line":55},"startBody":{"col":20,"line":35},"endBody":{"col":1,"line":55}}}},\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\n  },};\n',locationsMap:{"schedule-container--container":{startLoc:{col:25,line:36},endLoc:{col:139,line:55},startBody:{col:25,line:36},endBody:{col:139,line:55}},"schedule-container--hook":{startLoc:{col:20,line:57},endLoc:{col:139,line:77},startBody:{col:20,line:57},endBody:{col:139,line:77}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\n\nimport { withKnobs, boolean, number } from '@storybook/addon-knobs';\n\nimport { ScheduleContainer, useSchedule } from './src';\n\nexport const Container = () => (\n  <ScheduleContainer\n    duration={number('duration', 1250)}\n    loop={boolean('loop', true)}\n    delayMS={number('delayMS', 750)}\n  >\n    {({ elapsed, delayMS, delayComplete }) => {\n      if (!delayComplete && delayMS !== 0) {\n        return <div>Delay...</div>;\n      }\n\n      return (\n        <div>\n          Percentage: {(elapsed * 100).toFixed(0)}%<br />\n          Elapsed: {elapsed}\n        </div>\n      );\n    }}\n  </ScheduleContainer>\n);\n\nexport const Hook = () => {\n  const Animation = () => {\n    const duration = number('duration', 1250);\n    const loop = boolean('loop', true);\n    const delayMS = number('delayMS', 750);\n    const { elapsed, delayComplete } = useSchedule({ duration, loop, delayMS });\n\n    if (!delayComplete && delayMS !== 0) {\n      return <div>Delay...</div>;\n    }\n\n    return (\n      <div>\n        Percentage: {(elapsed * 100).toFixed(0)}%<br />\n        Elapsed: {elapsed}\n      </div>\n    );\n  };\n\n  return <Animation />;\n};\n\nContainer.story = {\n  name: 'ScheduleContainer'\n};\n\nHook.story = {\n  name: 'useSchedule',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSchedule\\` hook implements a schedule (timer) and communicates when it has elapsed.`\n    }\n  }\n};\n\nexport default {\n  title: 'Schedule Container',\n  decorators: [withKnobs],\n  component: ScheduleContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useSchedule hook.`\n  }\n};\n",locationsMap:{"schedule-container--container":{startLoc:{col:25,line:14},endLoc:{col:1,line:33},startBody:{col:25,line:14},endBody:{col:1,line:33}},"schedule-container--hook":{startLoc:{col:20,line:35},endLoc:{col:1,line:55},startBody:{col:20,line:35},endBody:{col:1,line:55}}}},_parameters.componentSubtitle="A container component which wraps the useSchedule hook.",_parameters)}},2821:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(813),__webpack_require__(234);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),objectWithoutPropertiesLoose=__webpack_require__(237),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),esm_extends=__webpack_require__(413),hooks=__webpack_require__(2845),index_esm=__webpack_require__(290);function requiredArguments(arg,argStr,methodName){if(null==arg)throw new Error('Accessibility Error: You must provide an "'+argStr+'" option to "'+methodName+'()"')}function useTabs(_temp){var _ref=void 0===_temp?{}:_temp,vertical=_ref.vertical,idPrefix=_ref.idPrefix,options=Object(objectWithoutPropertiesLoose.a)(_ref,["vertical","idPrefix"]),_useSelection=Object(index_esm.a)(Object(esm_extends.a)({direction:vertical?"vertical":"horizontal",defaultSelectedIndex:0},options)),selectedItem=_useSelection.selectedItem,focusedItem=_useSelection.focusedItem,getContainerProps=_useSelection.getContainerProps,getItemProps=_useSelection.getItemProps,seed=Object(hooks.a)(),_id=Object(react.useState)(idPrefix||seed("tabs_storybook"))[0],PANEL_ID=_id+"--panel",TAB_ID=_id+"--tab";return{selectedItem:selectedItem,focusedItem:focusedItem,getTabPanelProps:function(_temp4){var _ref4=void 0===_temp4?{}:_temp4,_ref4$role=_ref4.role,role=void 0===_ref4$role?"tabpanel":_ref4$role,index=_ref4.index,item=_ref4.item,other=Object(objectWithoutPropertiesLoose.a)(_ref4,["role","index","item"]);return requiredArguments(index,"index","getTabPanelProps"),requiredArguments(item,"item","getTabPanelProps"),Object(esm_extends.a)({role:role,id:PANEL_ID+":"+index,hidden:item!==selectedItem,"aria-labelledby":TAB_ID+":"+index},other)},getTabListProps:function(props){return getContainerProps((_ref2$role=(_ref2=void 0===(_temp2=props)?{}:_temp2).role,role=void 0===_ref2$role?"tablist":_ref2$role,other=Object(objectWithoutPropertiesLoose.a)(_ref2,["role"]),Object(esm_extends.a)({role:role,"aria-orientation":vertical?"vertical":"horizontal","data-garden-container-id":"containers.tabs","data-garden-container-version":"storybook"},other)));var _temp2,_ref2,_ref2$role,role,other},getTabProps:function(props){return getItemProps((_ref3$role=(_ref3=void 0===(_temp3=props)?{}:_temp3).role,role=void 0===_ref3$role?"tab":_ref3$role,index=_ref3.index,other=Object(objectWithoutPropertiesLoose.a)(_ref3,["role","index"]),requiredArguments(index,"index","getTabProps"),Object(esm_extends.a)({id:TAB_ID+":"+index,"aria-controls":PANEL_ID+":"+index,role:role},other)),"getTabProps");var _temp3,_ref3,_ref3$role,role,index,other}}}var TabsContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=Object(objectWithoutPropertiesLoose.a)(_ref,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(useTabs(options))))};TabsContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,vertical:prop_types_default.a.bool,idPrefix:prop_types_default.a.string,defaultSelectedIndex:prop_types_default.a.number,onSelect:prop_types_default.a.func},TabsContainer.__docgenInfo={description:"",methods:[],displayName:"TabsContainer",props:{children:{type:{name:"func"},required:!1,description:"A children render prop function"},render:{type:{name:"func"},required:!1,description:"A render prop function"},vertical:{type:{name:"bool"},required:!1,description:"Determines the orientation of the tabs"},idPrefix:{type:{name:"string"},required:!1,description:"Prefix used for generating tab element IDs"},defaultSelectedIndex:{type:{name:"number"},required:!1,description:"Sets the default selected tab"},onSelect:{type:{name:"func"},required:!1,description:"Provides a callback function that returns the `selectedItem` when a `Tab` has been selected by keyboard or mouse"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/tabs/src/TabsContainer.tsx"]={name:"TabsContainer",docgenInfo:TabsContainer.__docgenInfo,path:"packages/tabs/src/TabsContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,"/home/circleci/project/packages/tabs"),__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef } from 'react';\n\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\n\nimport { TabsContainer, useTabs } from './src';\n\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\nconst tabRefs = tabs.map(() => createRef());\n\nexport const Container = () => {\n  const vertical = boolean('vertical', false);\n  const idPrefix = text('idPrefix', '');\n\n  return (\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\n        const tabComponents: React.ReactElement[] = [];\n        const tabPanels: React.ReactElement[] = [];\n\n        tabs.forEach((tab, index) => {\n          tabComponents.push(\n            <li\n              {...getTabProps({\n                item: tab,\n                index,\n                focusRef: tabRefs[index],\n                key: tab,\n                style: {\n                  padding: '5px 5px 0',\n                  borderBottom:\n                    vertical === false\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                      : undefined,\n                  borderLeft: vertical\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                    : undefined,\n                  color: tab === selectedItem ? '#1f73b7' : undefined\n                }\n              })}\n            >\n              {tab}\n            </li>\n          );\n\n          tabPanels.push(\n            <div\n              {...getTabPanelProps({\n                index,\n                item: tab,\n                key: tab,\n                style: {\n                  padding: vertical === false ? '10px 0' : undefined,\n                  borderTop: vertical === false ? '1px solid' : undefined\n                }\n              })}\n            >\n              {tab} Content\n            </div>\n          );\n        });\n\n        return (\n          <div style={{ display: vertical ? 'flex' : undefined }}>\n            <ul\n              {...getTabListProps({\n                style: {\n                  display: 'flex',\n                  flexDirection: vertical && 'column'\n                }\n              })}\n            >\n              {tabComponents}\n            </ul>\n            {tabPanels}\n          </div>\n        );\n      }}\n    </TabsContainer>\n  );\n};\n\nexport const Hook = () => {\n  const vertical = boolean('vertical', false);\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\n    vertical,\n    idPrefix: text('idPrefix', '')\n  });\n  const tabComponents: React.ReactElement[] = [];\n  const tabPanels: React.ReactElement[] = [];\n\n  tabs.forEach((tab, index) => {\n    tabComponents.push(\n      <li\n        {...getTabProps({\n          item: tab,\n          index,\n          focusRef: tabRefs[index],\n          key: tab,\n          style: {\n            padding: '5px 5px 0',\n            borderBottom:\n              vertical === false\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                : undefined,\n            borderLeft: vertical\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n              : undefined,\n            color: tab === selectedItem ? '#1f73b7' : undefined\n          }\n        })}\n      >\n        {tab}\n      </li>\n    );\n\n    tabPanels.push(\n      <div\n        {...getTabPanelProps({\n          index,\n          item: tab,\n          key: tab,\n          style: {\n            padding: vertical === false ? '10px 0' : undefined,\n            borderTop: vertical === false ? '1px solid' : undefined\n          }\n        })}\n      >\n        {tab} Content\n      </div>\n    );\n  });\n\n  return (\n    <div style={{ display: vertical ? 'flex' : undefined }}>\n      <ul\n        {...getTabListProps({\n          style: {\n            display: 'flex',\n            flexDirection: vertical && 'column'\n          }\n        })}\n      >\n        {tabComponents}\n      </ul>\n      {tabPanels}\n    </div>\n  );\n};\n\nContainer.story = {\n  name: 'TabsContainer'\n};\n\nHook.story = {\n  name: 'useTabs',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTabs\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Tabs Container',\n  decorators: [withKnobs],\n  component: TabsContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useTabs hook.`\n  }\n};\n",__ADDS_MAP__={"tabs-container--container":{startLoc:{col:25,line:17},endLoc:{col:1,line:87},startBody:{col:25,line:17},endBody:{col:1,line:87}},"tabs-container--hook":{startLoc:{col:20,line:89},endLoc:{col:1,line:155},startBody:{col:20,line:89},endBody:{col:1,line:155}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},tabs=["Tab 1","Tab 2","Tab 3"],tabRefs=tabs.map((function(){return Object(react.createRef)()})),Container=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var vertical=Object(dist.boolean)("vertical",!1),idPrefix=Object(dist.text)("idPrefix","");return(react_default.a.createElement(TabsContainer,{vertical:vertical,idPrefix:idPrefix},(function(_ref){var selectedItem=_ref.selectedItem,getTabProps=_ref.getTabProps,getTabListProps=_ref.getTabListProps,getTabPanelProps=_ref.getTabPanelProps,tabComponents=[],tabPanels=[];return tabs.forEach((function(tab,index){tabComponents.push(react_default.a.createElement("li",getTabProps({item:tab,index:index,focusRef:tabRefs[index],key:tab,style:{padding:"5px 5px 0",borderBottom:!1===vertical?"3px solid "+(tab===selectedItem?"#1f73b7":"transparent"):void 0,borderLeft:vertical?"3px solid "+(tab===selectedItem?"#1f73b7":"transparent"):void 0,color:tab===selectedItem?"#1f73b7":void 0}}),tab)),tabPanels.push(react_default.a.createElement("div",getTabPanelProps({index:index,item:tab,key:tab,style:{padding:!1===vertical?"10px 0":void 0,borderTop:!1===vertical?"1px solid":void 0}}),tab," Content"))})),react_default.a.createElement("div",{style:{display:vertical?"flex":void 0}},react_default.a.createElement("ul",getTabListProps({style:{display:"flex",flexDirection:vertical&&"column"}}),tabComponents),tabPanels)})))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tabs.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tabs.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tabs.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var vertical=Object(dist.boolean)("vertical",!1),_useTabs=useTabs({vertical:vertical,idPrefix:Object(dist.text)("idPrefix","")}),selectedItem=_useTabs.selectedItem,getTabProps=_useTabs.getTabProps,getTabListProps=_useTabs.getTabListProps,getTabPanelProps=_useTabs.getTabPanelProps,tabComponents=[],tabPanels=[];return tabs.forEach((function(tab,index){tabComponents.push(react_default.a.createElement("li",getTabProps({item:tab,index:index,focusRef:tabRefs[index],key:tab,style:{padding:"5px 5px 0",borderBottom:!1===vertical?"3px solid "+(tab===selectedItem?"#1f73b7":"transparent"):void 0,borderLeft:vertical?"3px solid "+(tab===selectedItem?"#1f73b7":"transparent"):void 0,color:tab===selectedItem?"#1f73b7":void 0}}),tab)),tabPanels.push(react_default.a.createElement("div",getTabPanelProps({index:index,item:tab,key:tab,style:{padding:!1===vertical?"10px 0":void 0,borderTop:!1===vertical?"1px solid":void 0}}),tab," Content"))})),react_default.a.createElement("div",{style:{display:vertical?"flex":void 0}},react_default.a.createElement("ul",getTabListProps({style:{display:"flex",flexDirection:vertical&&"column"}}),tabComponents),tabPanels)}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tabs.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tabs.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/tabs.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"TabsContainer"},Hook.story={name:"useTabs",parameters:{docs:{storyDescription:"The `useTabs` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component."}}};__webpack_exports__.default={title:"Tabs Container",decorators:[dist.withKnobs],component:TabsContainer,parameters:(_parameters={storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/tabs\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/home/circleci/project/packages/tabs\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\\\n\\\\nimport { TabsContainer, useTabs } from './src';\\\\n\\\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\\\nconst tabRefs = tabs.map(() => createRef());\\\\n\\\\nexport const Container = () => {\\\\n  const vertical = boolean('vertical', false);\\\\n  const idPrefix = text('idPrefix', '');\\\\n\\\\n  return (\\\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\\\n        const tabComponents: React.ReactElement[] = [];\\\\n        const tabPanels: React.ReactElement[] = [];\\\\n\\\\n        tabs.forEach((tab, index) => {\\\\n          tabComponents.push(\\\\n            <li\\\\n              {...getTabProps({\\\\n                item: tab,\\\\n                index,\\\\n                focusRef: tabRefs[index],\\\\n                key: tab,\\\\n                style: {\\\\n                  padding: '5px 5px 0',\\\\n                  borderBottom:\\\\n                    vertical === false\\\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                      : undefined,\\\\n                  borderLeft: vertical\\\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                    : undefined,\\\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tab}\\\\n            </li>\\\\n          );\\\\n\\\\n          tabPanels.push(\\\\n            <div\\\\n              {...getTabPanelProps({\\\\n                index,\\\\n                item: tab,\\\\n                key: tab,\\\\n                style: {\\\\n                  padding: vertical === false ? '10px 0' : undefined,\\\\n                  borderTop: vertical === false ? '1px solid' : undefined\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tab} Content\\\\n            </div>\\\\n          );\\\\n        });\\\\n\\\\n        return (\\\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\\\n            <ul\\\\n              {...getTabListProps({\\\\n                style: {\\\\n                  display: 'flex',\\\\n                  flexDirection: vertical && 'column'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tabComponents}\\\\n            </ul>\\\\n            {tabPanels}\\\\n          </div>\\\\n        );\\\\n      }}\\\\n    </TabsContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const vertical = boolean('vertical', false);\\\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\\\n    vertical,\\\\n    idPrefix: text('idPrefix', '')\\\\n  });\\\\n  const tabComponents: React.ReactElement[] = [];\\\\n  const tabPanels: React.ReactElement[] = [];\\\\n\\\\n  tabs.forEach((tab, index) => {\\\\n    tabComponents.push(\\\\n      <li\\\\n        {...getTabProps({\\\\n          item: tab,\\\\n          index,\\\\n          focusRef: tabRefs[index],\\\\n          key: tab,\\\\n          style: {\\\\n            padding: '5px 5px 0',\\\\n            borderBottom:\\\\n              vertical === false\\\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                : undefined,\\\\n            borderLeft: vertical\\\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n              : undefined,\\\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tab}\\\\n      </li>\\\\n    );\\\\n\\\\n    tabPanels.push(\\\\n      <div\\\\n        {...getTabPanelProps({\\\\n          index,\\\\n          item: tab,\\\\n          key: tab,\\\\n          style: {\\\\n            padding: vertical === false ? '10px 0' : undefined,\\\\n            borderTop: vertical === false ? '1px solid' : undefined\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tab} Content\\\\n      </div>\\\\n    );\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\\\n      <ul\\\\n        {...getTabListProps({\\\\n          style: {\\\\n            display: 'flex',\\\\n            flexDirection: vertical && 'column'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tabComponents}\\\\n      </ul>\\\\n      {tabPanels}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'TabsContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useTabs',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTabs\\\\\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Tabs Container',\\\\n  decorators: [withKnobs],\\\\n  component: TabsContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\\\n  }\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"tabs-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":17},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":87},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":17},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":87}},\\\"tabs-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":89},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":155},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":89},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":155}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/tabs.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef } from 'react';\\n\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\n\\nimport { TabsContainer, useTabs } from './src';\\n\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\nconst tabRefs = tabs.map(() => createRef());\\n\\nexport const Container = addSourceDecorator(() => {\\n  const vertical = boolean('vertical', false);\\n  const idPrefix = text('idPrefix', '');\\n\\n  return (\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\n        const tabComponents: React.ReactElement[] = [];\\n        const tabPanels: React.ReactElement[] = [];\\n\\n        tabs.forEach((tab, index) => {\\n          tabComponents.push(\\n            <li\\n              {...getTabProps({\\n                item: tab,\\n                index,\\n                focusRef: tabRefs[index],\\n                key: tab,\\n                style: {\\n                  padding: '5px 5px 0',\\n                  borderBottom:\\n                    vertical === false\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                      : undefined,\\n                  borderLeft: vertical\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                    : undefined,\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\n                }\\n              })}\\n            >\\n              {tab}\\n            </li>\\n          );\\n\\n          tabPanels.push(\\n            <div\\n              {...getTabPanelProps({\\n                index,\\n                item: tab,\\n                key: tab,\\n                style: {\\n                  padding: vertical === false ? '10px 0' : undefined,\\n                  borderTop: vertical === false ? '1px solid' : undefined\\n                }\\n              })}\\n            >\\n              {tab} Content\\n            </div>\\n          );\\n        });\\n\\n        return (\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\n            <ul\\n              {...getTabListProps({\\n                style: {\\n                  display: 'flex',\\n                  flexDirection: vertical && 'column'\\n                }\\n              })}\\n            >\\n              {tabComponents}\\n            </ul>\\n            {tabPanels}\\n          </div>\\n        );\\n      }}\\n    </TabsContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const vertical = boolean('vertical', false);\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\n    vertical,\\n    idPrefix: text('idPrefix', '')\\n  });\\n  const tabComponents: React.ReactElement[] = [];\\n  const tabPanels: React.ReactElement[] = [];\\n\\n  tabs.forEach((tab, index) => {\\n    tabComponents.push(\\n      <li\\n        {...getTabProps({\\n          item: tab,\\n          index,\\n          focusRef: tabRefs[index],\\n          key: tab,\\n          style: {\\n            padding: '5px 5px 0',\\n            borderBottom:\\n              vertical === false\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                : undefined,\\n            borderLeft: vertical\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n              : undefined,\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\n          }\\n        })}\\n      >\\n        {tab}\\n      </li>\\n    );\\n\\n    tabPanels.push(\\n      <div\\n        {...getTabPanelProps({\\n          index,\\n          item: tab,\\n          key: tab,\\n          style: {\\n            padding: vertical === false ? '10px 0' : undefined,\\n            borderTop: vertical === false ? '1px solid' : undefined\\n          }\\n        })}\\n      >\\n        {tab} Content\\n      </div>\\n    );\\n  });\\n\\n  return (\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\n      <ul\\n        {...getTabListProps({\\n          style: {\\n            display: 'flex',\\n            flexDirection: vertical && 'column'\\n          }\\n        })}\\n      >\\n        {tabComponents}\\n      </ul>\\n      {tabPanels}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: 'TabsContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTabs',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTabs\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tabs Container',\\n  decorators: [withKnobs],\\n  component: TabsContainer,\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\\\n\\\\nimport { TabsContainer, useTabs } from './src';\\\\n\\\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\\\nconst tabRefs = tabs.map(() => createRef());\\\\n\\\\nexport const Container = () => {\\\\n  const vertical = boolean('vertical', false);\\\\n  const idPrefix = text('idPrefix', '');\\\\n\\\\n  return (\\\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\\\n        const tabComponents: React.ReactElement[] = [];\\\\n        const tabPanels: React.ReactElement[] = [];\\\\n\\\\n        tabs.forEach((tab, index) => {\\\\n          tabComponents.push(\\\\n            <li\\\\n              {...getTabProps({\\\\n                item: tab,\\\\n                index,\\\\n                focusRef: tabRefs[index],\\\\n                key: tab,\\\\n                style: {\\\\n                  padding: '5px 5px 0',\\\\n                  borderBottom:\\\\n                    vertical === false\\\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                      : undefined,\\\\n                  borderLeft: vertical\\\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                    : undefined,\\\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tab}\\\\n            </li>\\\\n          );\\\\n\\\\n          tabPanels.push(\\\\n            <div\\\\n              {...getTabPanelProps({\\\\n                index,\\\\n                item: tab,\\\\n                key: tab,\\\\n                style: {\\\\n                  padding: vertical === false ? '10px 0' : undefined,\\\\n                  borderTop: vertical === false ? '1px solid' : undefined\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tab} Content\\\\n            </div>\\\\n          );\\\\n        });\\\\n\\\\n        return (\\\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\\\n            <ul\\\\n              {...getTabListProps({\\\\n                style: {\\\\n                  display: 'flex',\\\\n                  flexDirection: vertical && 'column'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tabComponents}\\\\n            </ul>\\\\n            {tabPanels}\\\\n          </div>\\\\n        );\\\\n      }}\\\\n    </TabsContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const vertical = boolean('vertical', false);\\\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\\\n    vertical,\\\\n    idPrefix: text('idPrefix', '')\\\\n  });\\\\n  const tabComponents: React.ReactElement[] = [];\\\\n  const tabPanels: React.ReactElement[] = [];\\\\n\\\\n  tabs.forEach((tab, index) => {\\\\n    tabComponents.push(\\\\n      <li\\\\n        {...getTabProps({\\\\n          item: tab,\\\\n          index,\\\\n          focusRef: tabRefs[index],\\\\n          key: tab,\\\\n          style: {\\\\n            padding: '5px 5px 0',\\\\n            borderBottom:\\\\n              vertical === false\\\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                : undefined,\\\\n            borderLeft: vertical\\\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n              : undefined,\\\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tab}\\\\n      </li>\\\\n    );\\\\n\\\\n    tabPanels.push(\\\\n      <div\\\\n        {...getTabPanelProps({\\\\n          index,\\\\n          item: tab,\\\\n          key: tab,\\\\n          style: {\\\\n            padding: vertical === false ? '10px 0' : undefined,\\\\n            borderTop: vertical === false ? '1px solid' : undefined\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tab} Content\\\\n      </div>\\\\n    );\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\\\n      <ul\\\\n        {...getTabListProps({\\\\n          style: {\\\\n            display: 'flex',\\\\n            flexDirection: vertical && 'column'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tabComponents}\\\\n      </ul>\\\\n      {tabPanels}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'TabsContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useTabs',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTabs\\\\\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Tabs Container',\\\\n  decorators: [withKnobs],\\\\n  component: TabsContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\\\n  }\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"tabs-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":17},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":87},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":17},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":87}},\\\"tabs-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":89},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":155},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":89},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":155}}}},\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\n  },};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"tabs-container--container\":{\"startLoc\":{\"col\":25,\"line\":39},\"endLoc\":{\"col\":139,\"line\":109},\"startBody\":{\"col\":25,\"line\":39},\"endBody\":{\"col\":139,\"line\":109}},\"tabs-container--hook\":{\"startLoc\":{\"col\":20,\"line\":111},\"endLoc\":{\"col\":139,\"line\":177},\"startBody\":{\"col\":20,\"line\":111},\"endBody\":{\"col\":139,\"line\":177}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/tabs.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/tabs\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef } from 'react';\\n\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\n\\nimport { TabsContainer, useTabs } from './src';\\n\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\nconst tabRefs = tabs.map(() => createRef());\\n\\nexport const Container = () => {\\n  const vertical = boolean('vertical', false);\\n  const idPrefix = text('idPrefix', '');\\n\\n  return (\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\n        const tabComponents: React.ReactElement[] = [];\\n        const tabPanels: React.ReactElement[] = [];\\n\\n        tabs.forEach((tab, index) => {\\n          tabComponents.push(\\n            <li\\n              {...getTabProps({\\n                item: tab,\\n                index,\\n                focusRef: tabRefs[index],\\n                key: tab,\\n                style: {\\n                  padding: '5px 5px 0',\\n                  borderBottom:\\n                    vertical === false\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                      : undefined,\\n                  borderLeft: vertical\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                    : undefined,\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\n                }\\n              })}\\n            >\\n              {tab}\\n            </li>\\n          );\\n\\n          tabPanels.push(\\n            <div\\n              {...getTabPanelProps({\\n                index,\\n                item: tab,\\n                key: tab,\\n                style: {\\n                  padding: vertical === false ? '10px 0' : undefined,\\n                  borderTop: vertical === false ? '1px solid' : undefined\\n                }\\n              })}\\n            >\\n              {tab} Content\\n            </div>\\n          );\\n        });\\n\\n        return (\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\n            <ul\\n              {...getTabListProps({\\n                style: {\\n                  display: 'flex',\\n                  flexDirection: vertical && 'column'\\n                }\\n              })}\\n            >\\n              {tabComponents}\\n            </ul>\\n            {tabPanels}\\n          </div>\\n        );\\n      }}\\n    </TabsContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const vertical = boolean('vertical', false);\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\n    vertical,\\n    idPrefix: text('idPrefix', '')\\n  });\\n  const tabComponents: React.ReactElement[] = [];\\n  const tabPanels: React.ReactElement[] = [];\\n\\n  tabs.forEach((tab, index) => {\\n    tabComponents.push(\\n      <li\\n        {...getTabProps({\\n          item: tab,\\n          index,\\n          focusRef: tabRefs[index],\\n          key: tab,\\n          style: {\\n            padding: '5px 5px 0',\\n            borderBottom:\\n              vertical === false\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                : undefined,\\n            borderLeft: vertical\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n              : undefined,\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\n          }\\n        })}\\n      >\\n        {tab}\\n      </li>\\n    );\\n\\n    tabPanels.push(\\n      <div\\n        {...getTabPanelProps({\\n          index,\\n          item: tab,\\n          key: tab,\\n          style: {\\n            padding: vertical === false ? '10px 0' : undefined,\\n            borderTop: vertical === false ? '1px solid' : undefined\\n          }\\n        })}\\n      >\\n        {tab} Content\\n      </div>\\n    );\\n  });\\n\\n  return (\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\n      <ul\\n        {...getTabListProps({\\n          style: {\\n            display: 'flex',\\n            flexDirection: vertical && 'column'\\n          }\\n        })}\\n      >\\n        {tabComponents}\\n      </ul>\\n      {tabPanels}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'TabsContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTabs',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTabs\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tabs Container',\\n  decorators: [withKnobs],\\n  component: TabsContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"tabs-container--container\":{\"startLoc\":{\"col\":25,\"line\":17},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":25,\"line\":17},\"endBody\":{\"col\":1,\"line\":87}},\"tabs-container--hook\":{\"startLoc\":{\"col\":20,\"line\":89},\"endLoc\":{\"col\":1,\"line\":155},\"startBody\":{\"col\":20,\"line\":89},\"endBody\":{\"col\":1,\"line\":155}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/tabs.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef } from 'react';\n\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\n\nimport { TabsContainer, useTabs } from './src';\n\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\nconst tabRefs = tabs.map(() => createRef());\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const vertical = boolean('vertical', false);\n  const idPrefix = text('idPrefix', '');\n\n  return (\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\n        const tabComponents: React.ReactElement[] = [];\n        const tabPanels: React.ReactElement[] = [];\n\n        tabs.forEach((tab, index) => {\n          tabComponents.push(\n            <li\n              {...getTabProps({\n                item: tab,\n                index,\n                focusRef: tabRefs[index],\n                key: tab,\n                style: {\n                  padding: '5px 5px 0',\n                  borderBottom:\n                    vertical === false\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                      : undefined,\n                  borderLeft: vertical\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                    : undefined,\n                  color: tab === selectedItem ? '#1f73b7' : undefined\n                }\n              })}\n            >\n              {tab}\n            </li>\n          );\n\n          tabPanels.push(\n            <div\n              {...getTabPanelProps({\n                index,\n                item: tab,\n                key: tab,\n                style: {\n                  padding: vertical === false ? '10px 0' : undefined,\n                  borderTop: vertical === false ? '1px solid' : undefined\n                }\n              })}\n            >\n              {tab} Content\n            </div>\n          );\n        });\n\n        return (\n          <div style={{ display: vertical ? 'flex' : undefined }}>\n            <ul\n              {...getTabListProps({\n                style: {\n                  display: 'flex',\n                  flexDirection: vertical && 'column'\n                }\n              })}\n            >\n              {tabComponents}\n            </ul>\n            {tabPanels}\n          </div>\n        );\n      }}\n    </TabsContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const vertical = boolean('vertical', false);\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\n    vertical,\n    idPrefix: text('idPrefix', '')\n  });\n  const tabComponents: React.ReactElement[] = [];\n  const tabPanels: React.ReactElement[] = [];\n\n  tabs.forEach((tab, index) => {\n    tabComponents.push(\n      <li\n        {...getTabProps({\n          item: tab,\n          index,\n          focusRef: tabRefs[index],\n          key: tab,\n          style: {\n            padding: '5px 5px 0',\n            borderBottom:\n              vertical === false\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                : undefined,\n            borderLeft: vertical\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n              : undefined,\n            color: tab === selectedItem ? '#1f73b7' : undefined\n          }\n        })}\n      >\n        {tab}\n      </li>\n    );\n\n    tabPanels.push(\n      <div\n        {...getTabPanelProps({\n          index,\n          item: tab,\n          key: tab,\n          style: {\n            padding: vertical === false ? '10px 0' : undefined,\n            borderTop: vertical === false ? '1px solid' : undefined\n          }\n        })}\n      >\n        {tab} Content\n      </div>\n    );\n  });\n\n  return (\n    <div style={{ display: vertical ? 'flex' : undefined }}>\n      <ul\n        {...getTabListProps({\n          style: {\n            display: 'flex',\n            flexDirection: vertical && 'column'\n          }\n        })}\n      >\n        {tabComponents}\n      </ul>\n      {tabPanels}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'TabsContainer'\n};\n\nHook.story = {\n  name: 'useTabs',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTabs\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Tabs Container',\n  decorators: [withKnobs],\n  component: TabsContainer,\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/home/circleci/project/packages/tabs\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\\\n\\\\nimport { TabsContainer, useTabs } from './src';\\\\n\\\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\\\nconst tabRefs = tabs.map(() => createRef());\\\\n\\\\nexport const Container = () => {\\\\n  const vertical = boolean('vertical', false);\\\\n  const idPrefix = text('idPrefix', '');\\\\n\\\\n  return (\\\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\\\n        const tabComponents: React.ReactElement[] = [];\\\\n        const tabPanels: React.ReactElement[] = [];\\\\n\\\\n        tabs.forEach((tab, index) => {\\\\n          tabComponents.push(\\\\n            <li\\\\n              {...getTabProps({\\\\n                item: tab,\\\\n                index,\\\\n                focusRef: tabRefs[index],\\\\n                key: tab,\\\\n                style: {\\\\n                  padding: '5px 5px 0',\\\\n                  borderBottom:\\\\n                    vertical === false\\\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                      : undefined,\\\\n                  borderLeft: vertical\\\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                    : undefined,\\\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tab}\\\\n            </li>\\\\n          );\\\\n\\\\n          tabPanels.push(\\\\n            <div\\\\n              {...getTabPanelProps({\\\\n                index,\\\\n                item: tab,\\\\n                key: tab,\\\\n                style: {\\\\n                  padding: vertical === false ? '10px 0' : undefined,\\\\n                  borderTop: vertical === false ? '1px solid' : undefined\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tab} Content\\\\n            </div>\\\\n          );\\\\n        });\\\\n\\\\n        return (\\\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\\\n            <ul\\\\n              {...getTabListProps({\\\\n                style: {\\\\n                  display: 'flex',\\\\n                  flexDirection: vertical && 'column'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tabComponents}\\\\n            </ul>\\\\n            {tabPanels}\\\\n          </div>\\\\n        );\\\\n      }}\\\\n    </TabsContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const vertical = boolean('vertical', false);\\\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\\\n    vertical,\\\\n    idPrefix: text('idPrefix', '')\\\\n  });\\\\n  const tabComponents: React.ReactElement[] = [];\\\\n  const tabPanels: React.ReactElement[] = [];\\\\n\\\\n  tabs.forEach((tab, index) => {\\\\n    tabComponents.push(\\\\n      <li\\\\n        {...getTabProps({\\\\n          item: tab,\\\\n          index,\\\\n          focusRef: tabRefs[index],\\\\n          key: tab,\\\\n          style: {\\\\n            padding: '5px 5px 0',\\\\n            borderBottom:\\\\n              vertical === false\\\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                : undefined,\\\\n            borderLeft: vertical\\\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n              : undefined,\\\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tab}\\\\n      </li>\\\\n    );\\\\n\\\\n    tabPanels.push(\\\\n      <div\\\\n        {...getTabPanelProps({\\\\n          index,\\\\n          item: tab,\\\\n          key: tab,\\\\n          style: {\\\\n            padding: vertical === false ? '10px 0' : undefined,\\\\n            borderTop: vertical === false ? '1px solid' : undefined\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tab} Content\\\\n      </div>\\\\n    );\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\\\n      <ul\\\\n        {...getTabListProps({\\\\n          style: {\\\\n            display: 'flex',\\\\n            flexDirection: vertical && 'column'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tabComponents}\\\\n      </ul>\\\\n      {tabPanels}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'TabsContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useTabs',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTabs\\\\\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Tabs Container',\\\\n  decorators: [withKnobs],\\\\n  component: TabsContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\\\n  }\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"tabs-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":17},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":87},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":17},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":87}},\\\"tabs-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":89},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":155},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":89},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":155}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/tabs.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef } from 'react';\\n\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\n\\nimport { TabsContainer, useTabs } from './src';\\n\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\nconst tabRefs = tabs.map(() => createRef());\\n\\nexport const Container = addSourceDecorator(() => {\\n  const vertical = boolean('vertical', false);\\n  const idPrefix = text('idPrefix', '');\\n\\n  return (\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\n        const tabComponents: React.ReactElement[] = [];\\n        const tabPanels: React.ReactElement[] = [];\\n\\n        tabs.forEach((tab, index) => {\\n          tabComponents.push(\\n            <li\\n              {...getTabProps({\\n                item: tab,\\n                index,\\n                focusRef: tabRefs[index],\\n                key: tab,\\n                style: {\\n                  padding: '5px 5px 0',\\n                  borderBottom:\\n                    vertical === false\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                      : undefined,\\n                  borderLeft: vertical\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                    : undefined,\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\n                }\\n              })}\\n            >\\n              {tab}\\n            </li>\\n          );\\n\\n          tabPanels.push(\\n            <div\\n              {...getTabPanelProps({\\n                index,\\n                item: tab,\\n                key: tab,\\n                style: {\\n                  padding: vertical === false ? '10px 0' : undefined,\\n                  borderTop: vertical === false ? '1px solid' : undefined\\n                }\\n              })}\\n            >\\n              {tab} Content\\n            </div>\\n          );\\n        });\\n\\n        return (\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\n            <ul\\n              {...getTabListProps({\\n                style: {\\n                  display: 'flex',\\n                  flexDirection: vertical && 'column'\\n                }\\n              })}\\n            >\\n              {tabComponents}\\n            </ul>\\n            {tabPanels}\\n          </div>\\n        );\\n      }}\\n    </TabsContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const vertical = boolean('vertical', false);\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\n    vertical,\\n    idPrefix: text('idPrefix', '')\\n  });\\n  const tabComponents: React.ReactElement[] = [];\\n  const tabPanels: React.ReactElement[] = [];\\n\\n  tabs.forEach((tab, index) => {\\n    tabComponents.push(\\n      <li\\n        {...getTabProps({\\n          item: tab,\\n          index,\\n          focusRef: tabRefs[index],\\n          key: tab,\\n          style: {\\n            padding: '5px 5px 0',\\n            borderBottom:\\n              vertical === false\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                : undefined,\\n            borderLeft: vertical\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n              : undefined,\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\n          }\\n        })}\\n      >\\n        {tab}\\n      </li>\\n    );\\n\\n    tabPanels.push(\\n      <div\\n        {...getTabPanelProps({\\n          index,\\n          item: tab,\\n          key: tab,\\n          style: {\\n            padding: vertical === false ? '10px 0' : undefined,\\n            borderTop: vertical === false ? '1px solid' : undefined\\n          }\\n        })}\\n      >\\n        {tab} Content\\n      </div>\\n    );\\n  });\\n\\n  return (\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\n      <ul\\n        {...getTabListProps({\\n          style: {\\n            display: 'flex',\\n            flexDirection: vertical && 'column'\\n          }\\n        })}\\n      >\\n        {tabComponents}\\n      </ul>\\n      {tabPanels}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: 'TabsContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTabs',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTabs\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tabs Container',\\n  decorators: [withKnobs],\\n  component: TabsContainer,\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React, { createRef } from 'react';\\\\n\\\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\\\n\\\\nimport { TabsContainer, useTabs } from './src';\\\\n\\\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\\\nconst tabRefs = tabs.map(() => createRef());\\\\n\\\\nexport const Container = () => {\\\\n  const vertical = boolean('vertical', false);\\\\n  const idPrefix = text('idPrefix', '');\\\\n\\\\n  return (\\\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\\\n        const tabComponents: React.ReactElement[] = [];\\\\n        const tabPanels: React.ReactElement[] = [];\\\\n\\\\n        tabs.forEach((tab, index) => {\\\\n          tabComponents.push(\\\\n            <li\\\\n              {...getTabProps({\\\\n                item: tab,\\\\n                index,\\\\n                focusRef: tabRefs[index],\\\\n                key: tab,\\\\n                style: {\\\\n                  padding: '5px 5px 0',\\\\n                  borderBottom:\\\\n                    vertical === false\\\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                      : undefined,\\\\n                  borderLeft: vertical\\\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                    : undefined,\\\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tab}\\\\n            </li>\\\\n          );\\\\n\\\\n          tabPanels.push(\\\\n            <div\\\\n              {...getTabPanelProps({\\\\n                index,\\\\n                item: tab,\\\\n                key: tab,\\\\n                style: {\\\\n                  padding: vertical === false ? '10px 0' : undefined,\\\\n                  borderTop: vertical === false ? '1px solid' : undefined\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tab} Content\\\\n            </div>\\\\n          );\\\\n        });\\\\n\\\\n        return (\\\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\\\n            <ul\\\\n              {...getTabListProps({\\\\n                style: {\\\\n                  display: 'flex',\\\\n                  flexDirection: vertical && 'column'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {tabComponents}\\\\n            </ul>\\\\n            {tabPanels}\\\\n          </div>\\\\n        );\\\\n      }}\\\\n    </TabsContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const vertical = boolean('vertical', false);\\\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\\\n    vertical,\\\\n    idPrefix: text('idPrefix', '')\\\\n  });\\\\n  const tabComponents: React.ReactElement[] = [];\\\\n  const tabPanels: React.ReactElement[] = [];\\\\n\\\\n  tabs.forEach((tab, index) => {\\\\n    tabComponents.push(\\\\n      <li\\\\n        {...getTabProps({\\\\n          item: tab,\\\\n          index,\\\\n          focusRef: tabRefs[index],\\\\n          key: tab,\\\\n          style: {\\\\n            padding: '5px 5px 0',\\\\n            borderBottom:\\\\n              vertical === false\\\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n                : undefined,\\\\n            borderLeft: vertical\\\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\\\n              : undefined,\\\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tab}\\\\n      </li>\\\\n    );\\\\n\\\\n    tabPanels.push(\\\\n      <div\\\\n        {...getTabPanelProps({\\\\n          index,\\\\n          item: tab,\\\\n          key: tab,\\\\n          style: {\\\\n            padding: vertical === false ? '10px 0' : undefined,\\\\n            borderTop: vertical === false ? '1px solid' : undefined\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tab} Content\\\\n      </div>\\\\n    );\\\\n  });\\\\n\\\\n  return (\\\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\\\n      <ul\\\\n        {...getTabListProps({\\\\n          style: {\\\\n            display: 'flex',\\\\n            flexDirection: vertical && 'column'\\\\n          }\\\\n        })}\\\\n      >\\\\n        {tabComponents}\\\\n      </ul>\\\\n      {tabPanels}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: 'TabsContainer'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: 'useTabs',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useTabs\\\\\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: 'Tabs Container',\\\\n  decorators: [withKnobs],\\\\n  component: TabsContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\\\n  }\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"tabs-container--container\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":17},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":87},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":17},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":87}},\\\"tabs-container--hook\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":89},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":155},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":89},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":155}}}},\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\n  },};\\n\",\"locationsMap\":{\"tabs-container--container\":{\"startLoc\":{\"col\":25,\"line\":39},\"endLoc\":{\"col\":139,\"line\":109},\"startBody\":{\"col\":25,\"line\":39},\"endBody\":{\"col\":139,\"line\":109}},\"tabs-container--hook\":{\"startLoc\":{\"col\":20,\"line\":111},\"endLoc\":{\"col\":139,\"line\":177},\"startBody\":{\"col\":20,\"line\":111},\"endBody\":{\"col\":139,\"line\":177}}}},\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef } from 'react';\\n\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\n\\nimport { TabsContainer, useTabs } from './src';\\n\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\nconst tabRefs = tabs.map(() => createRef());\\n\\nexport const Container = () => {\\n  const vertical = boolean('vertical', false);\\n  const idPrefix = text('idPrefix', '');\\n\\n  return (\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\n        const tabComponents: React.ReactElement[] = [];\\n        const tabPanels: React.ReactElement[] = [];\\n\\n        tabs.forEach((tab, index) => {\\n          tabComponents.push(\\n            <li\\n              {...getTabProps({\\n                item: tab,\\n                index,\\n                focusRef: tabRefs[index],\\n                key: tab,\\n                style: {\\n                  padding: '5px 5px 0',\\n                  borderBottom:\\n                    vertical === false\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                      : undefined,\\n                  borderLeft: vertical\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                    : undefined,\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\n                }\\n              })}\\n            >\\n              {tab}\\n            </li>\\n          );\\n\\n          tabPanels.push(\\n            <div\\n              {...getTabPanelProps({\\n                index,\\n                item: tab,\\n                key: tab,\\n                style: {\\n                  padding: vertical === false ? '10px 0' : undefined,\\n                  borderTop: vertical === false ? '1px solid' : undefined\\n                }\\n              })}\\n            >\\n              {tab} Content\\n            </div>\\n          );\\n        });\\n\\n        return (\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\n            <ul\\n              {...getTabListProps({\\n                style: {\\n                  display: 'flex',\\n                  flexDirection: vertical && 'column'\\n                }\\n              })}\\n            >\\n              {tabComponents}\\n            </ul>\\n            {tabPanels}\\n          </div>\\n        );\\n      }}\\n    </TabsContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const vertical = boolean('vertical', false);\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\n    vertical,\\n    idPrefix: text('idPrefix', '')\\n  });\\n  const tabComponents: React.ReactElement[] = [];\\n  const tabPanels: React.ReactElement[] = [];\\n\\n  tabs.forEach((tab, index) => {\\n    tabComponents.push(\\n      <li\\n        {...getTabProps({\\n          item: tab,\\n          index,\\n          focusRef: tabRefs[index],\\n          key: tab,\\n          style: {\\n            padding: '5px 5px 0',\\n            borderBottom:\\n              vertical === false\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                : undefined,\\n            borderLeft: vertical\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n              : undefined,\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\n          }\\n        })}\\n      >\\n        {tab}\\n      </li>\\n    );\\n\\n    tabPanels.push(\\n      <div\\n        {...getTabPanelProps({\\n          index,\\n          item: tab,\\n          key: tab,\\n          style: {\\n            padding: vertical === false ? '10px 0' : undefined,\\n            borderTop: vertical === false ? '1px solid' : undefined\\n          }\\n        })}\\n      >\\n        {tab} Content\\n      </div>\\n    );\\n  });\\n\\n  return (\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\n      <ul\\n        {...getTabListProps({\\n          style: {\\n            display: 'flex',\\n            flexDirection: vertical && 'column'\\n          }\\n        })}\\n      >\\n        {tabComponents}\\n      </ul>\\n      {tabPanels}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'TabsContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTabs',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTabs\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tabs Container',\\n  decorators: [withKnobs],\\n  component: TabsContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"tabs-container--container\":{\"startLoc\":{\"col\":25,\"line\":17},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":25,\"line\":17},\"endBody\":{\"col\":1,\"line\":87}},\"tabs-container--hook\":{\"startLoc\":{\"col\":20,\"line\":89},\"endLoc\":{\"col\":1,\"line\":155},\"startBody\":{\"col\":20,\"line\":89},\"endBody\":{\"col\":1,\"line\":155}}}},\n    componentSubtitle: `A container component which wraps the useTabs hook.`\n  },};\n",locationsMap:{"tabs-container--container":{startLoc:{col:25,line:61},endLoc:{col:277,line:131},startBody:{col:25,line:61},endBody:{col:277,line:131}},"tabs-container--hook":{startLoc:{col:20,line:133},endLoc:{col:277,line:199},startBody:{col:20,line:133},endBody:{col:277,line:199}}}}},_parameters.storySource={source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/tabs\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef } from 'react';\\n\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\n\\nimport { TabsContainer, useTabs } from './src';\\n\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\nconst tabRefs = tabs.map(() => createRef());\\n\\nexport const Container = () => {\\n  const vertical = boolean('vertical', false);\\n  const idPrefix = text('idPrefix', '');\\n\\n  return (\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\n        const tabComponents: React.ReactElement[] = [];\\n        const tabPanels: React.ReactElement[] = [];\\n\\n        tabs.forEach((tab, index) => {\\n          tabComponents.push(\\n            <li\\n              {...getTabProps({\\n                item: tab,\\n                index,\\n                focusRef: tabRefs[index],\\n                key: tab,\\n                style: {\\n                  padding: '5px 5px 0',\\n                  borderBottom:\\n                    vertical === false\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                      : undefined,\\n                  borderLeft: vertical\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                    : undefined,\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\n                }\\n              })}\\n            >\\n              {tab}\\n            </li>\\n          );\\n\\n          tabPanels.push(\\n            <div\\n              {...getTabPanelProps({\\n                index,\\n                item: tab,\\n                key: tab,\\n                style: {\\n                  padding: vertical === false ? '10px 0' : undefined,\\n                  borderTop: vertical === false ? '1px solid' : undefined\\n                }\\n              })}\\n            >\\n              {tab} Content\\n            </div>\\n          );\\n        });\\n\\n        return (\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\n            <ul\\n              {...getTabListProps({\\n                style: {\\n                  display: 'flex',\\n                  flexDirection: vertical && 'column'\\n                }\\n              })}\\n            >\\n              {tabComponents}\\n            </ul>\\n            {tabPanels}\\n          </div>\\n        );\\n      }}\\n    </TabsContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const vertical = boolean('vertical', false);\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\n    vertical,\\n    idPrefix: text('idPrefix', '')\\n  });\\n  const tabComponents: React.ReactElement[] = [];\\n  const tabPanels: React.ReactElement[] = [];\\n\\n  tabs.forEach((tab, index) => {\\n    tabComponents.push(\\n      <li\\n        {...getTabProps({\\n          item: tab,\\n          index,\\n          focusRef: tabRefs[index],\\n          key: tab,\\n          style: {\\n            padding: '5px 5px 0',\\n            borderBottom:\\n              vertical === false\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                : undefined,\\n            borderLeft: vertical\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n              : undefined,\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\n          }\\n        })}\\n      >\\n        {tab}\\n      </li>\\n    );\\n\\n    tabPanels.push(\\n      <div\\n        {...getTabPanelProps({\\n          index,\\n          item: tab,\\n          key: tab,\\n          style: {\\n            padding: vertical === false ? '10px 0' : undefined,\\n            borderTop: vertical === false ? '1px solid' : undefined\\n          }\\n        })}\\n      >\\n        {tab} Content\\n      </div>\\n    );\\n  });\\n\\n  return (\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\n      <ul\\n        {...getTabListProps({\\n          style: {\\n            display: 'flex',\\n            flexDirection: vertical && 'column'\\n          }\\n        })}\\n      >\\n        {tabComponents}\\n      </ul>\\n      {tabPanels}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'TabsContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTabs',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTabs\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tabs Container',\\n  decorators: [withKnobs],\\n  component: TabsContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"tabs-container--container\":{\"startLoc\":{\"col\":25,\"line\":17},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":25,\"line\":17},\"endBody\":{\"col\":1,\"line\":87}},\"tabs-container--hook\":{\"startLoc\":{\"col\":20,\"line\":89},\"endLoc\":{\"col\":1,\"line\":155},\"startBody\":{\"col\":20,\"line\":89},\"endBody\":{\"col\":1,\"line\":155}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/tabs.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef } from 'react';\n\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\n\nimport { TabsContainer, useTabs } from './src';\n\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\nconst tabRefs = tabs.map(() => createRef());\n\nexport const Container = addSourceDecorator(() => {\n  const vertical = boolean('vertical', false);\n  const idPrefix = text('idPrefix', '');\n\n  return (\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\n        const tabComponents: React.ReactElement[] = [];\n        const tabPanels: React.ReactElement[] = [];\n\n        tabs.forEach((tab, index) => {\n          tabComponents.push(\n            <li\n              {...getTabProps({\n                item: tab,\n                index,\n                focusRef: tabRefs[index],\n                key: tab,\n                style: {\n                  padding: '5px 5px 0',\n                  borderBottom:\n                    vertical === false\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                      : undefined,\n                  borderLeft: vertical\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                    : undefined,\n                  color: tab === selectedItem ? '#1f73b7' : undefined\n                }\n              })}\n            >\n              {tab}\n            </li>\n          );\n\n          tabPanels.push(\n            <div\n              {...getTabPanelProps({\n                index,\n                item: tab,\n                key: tab,\n                style: {\n                  padding: vertical === false ? '10px 0' : undefined,\n                  borderTop: vertical === false ? '1px solid' : undefined\n                }\n              })}\n            >\n              {tab} Content\n            </div>\n          );\n        });\n\n        return (\n          <div style={{ display: vertical ? 'flex' : undefined }}>\n            <ul\n              {...getTabListProps({\n                style: {\n                  display: 'flex',\n                  flexDirection: vertical && 'column'\n                }\n              })}\n            >\n              {tabComponents}\n            </ul>\n            {tabPanels}\n          </div>\n        );\n      }}\n    </TabsContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const vertical = boolean('vertical', false);\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\n    vertical,\n    idPrefix: text('idPrefix', '')\n  });\n  const tabComponents: React.ReactElement[] = [];\n  const tabPanels: React.ReactElement[] = [];\n\n  tabs.forEach((tab, index) => {\n    tabComponents.push(\n      <li\n        {...getTabProps({\n          item: tab,\n          index,\n          focusRef: tabRefs[index],\n          key: tab,\n          style: {\n            padding: '5px 5px 0',\n            borderBottom:\n              vertical === false\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                : undefined,\n            borderLeft: vertical\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n              : undefined,\n            color: tab === selectedItem ? '#1f73b7' : undefined\n          }\n        })}\n      >\n        {tab}\n      </li>\n    );\n\n    tabPanels.push(\n      <div\n        {...getTabPanelProps({\n          index,\n          item: tab,\n          key: tab,\n          style: {\n            padding: vertical === false ? '10px 0' : undefined,\n            borderTop: vertical === false ? '1px solid' : undefined\n          }\n        })}\n      >\n        {tab} Content\n      </div>\n    );\n  });\n\n  return (\n    <div style={{ display: vertical ? 'flex' : undefined }}>\n      <ul\n        {...getTabListProps({\n          style: {\n            display: 'flex',\n            flexDirection: vertical && 'column'\n          }\n        })}\n      >\n        {tabComponents}\n      </ul>\n      {tabPanels}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'TabsContainer'\n};\n\nHook.story = {\n  name: 'useTabs',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTabs\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Tabs Container',\n  decorators: [withKnobs],\n  component: TabsContainer,\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React, { createRef } from 'react';\\n\\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\\n\\nimport { TabsContainer, useTabs } from './src';\\n\\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\\nconst tabRefs = tabs.map(() => createRef());\\n\\nexport const Container = () => {\\n  const vertical = boolean('vertical', false);\\n  const idPrefix = text('idPrefix', '');\\n\\n  return (\\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\\n        const tabComponents: React.ReactElement[] = [];\\n        const tabPanels: React.ReactElement[] = [];\\n\\n        tabs.forEach((tab, index) => {\\n          tabComponents.push(\\n            <li\\n              {...getTabProps({\\n                item: tab,\\n                index,\\n                focusRef: tabRefs[index],\\n                key: tab,\\n                style: {\\n                  padding: '5px 5px 0',\\n                  borderBottom:\\n                    vertical === false\\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                      : undefined,\\n                  borderLeft: vertical\\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                    : undefined,\\n                  color: tab === selectedItem ? '#1f73b7' : undefined\\n                }\\n              })}\\n            >\\n              {tab}\\n            </li>\\n          );\\n\\n          tabPanels.push(\\n            <div\\n              {...getTabPanelProps({\\n                index,\\n                item: tab,\\n                key: tab,\\n                style: {\\n                  padding: vertical === false ? '10px 0' : undefined,\\n                  borderTop: vertical === false ? '1px solid' : undefined\\n                }\\n              })}\\n            >\\n              {tab} Content\\n            </div>\\n          );\\n        });\\n\\n        return (\\n          <div style={{ display: vertical ? 'flex' : undefined }}>\\n            <ul\\n              {...getTabListProps({\\n                style: {\\n                  display: 'flex',\\n                  flexDirection: vertical && 'column'\\n                }\\n              })}\\n            >\\n              {tabComponents}\\n            </ul>\\n            {tabPanels}\\n          </div>\\n        );\\n      }}\\n    </TabsContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const vertical = boolean('vertical', false);\\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\\n    vertical,\\n    idPrefix: text('idPrefix', '')\\n  });\\n  const tabComponents: React.ReactElement[] = [];\\n  const tabPanels: React.ReactElement[] = [];\\n\\n  tabs.forEach((tab, index) => {\\n    tabComponents.push(\\n      <li\\n        {...getTabProps({\\n          item: tab,\\n          index,\\n          focusRef: tabRefs[index],\\n          key: tab,\\n          style: {\\n            padding: '5px 5px 0',\\n            borderBottom:\\n              vertical === false\\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n                : undefined,\\n            borderLeft: vertical\\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\\n              : undefined,\\n            color: tab === selectedItem ? '#1f73b7' : undefined\\n          }\\n        })}\\n      >\\n        {tab}\\n      </li>\\n    );\\n\\n    tabPanels.push(\\n      <div\\n        {...getTabPanelProps({\\n          index,\\n          item: tab,\\n          key: tab,\\n          style: {\\n            padding: vertical === false ? '10px 0' : undefined,\\n            borderTop: vertical === false ? '1px solid' : undefined\\n          }\\n        })}\\n      >\\n        {tab} Content\\n      </div>\\n    );\\n  });\\n\\n  return (\\n    <div style={{ display: vertical ? 'flex' : undefined }}>\\n      <ul\\n        {...getTabListProps({\\n          style: {\\n            display: 'flex',\\n            flexDirection: vertical && 'column'\\n          }\\n        })}\\n      >\\n        {tabComponents}\\n      </ul>\\n      {tabPanels}\\n    </div>\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'TabsContainer'\\n};\\n\\nHook.story = {\\n  name: 'useTabs',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useTabs\\\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Tabs Container',\\n  decorators: [withKnobs],\\n  component: TabsContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useTabs hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"tabs-container--container\":{\"startLoc\":{\"col\":25,\"line\":17},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":25,\"line\":17},\"endBody\":{\"col\":1,\"line\":87}},\"tabs-container--hook\":{\"startLoc\":{\"col\":20,\"line\":89},\"endLoc\":{\"col\":1,\"line\":155},\"startBody\":{\"col\":20,\"line\":89},\"endBody\":{\"col\":1,\"line\":155}}}},\n    componentSubtitle: `A container component which wraps the useTabs hook.`\n  },};\n",locationsMap:{"tabs-container--container":{startLoc:{col:25,line:39},endLoc:{col:139,line:109},startBody:{col:25,line:39},endBody:{col:139,line:109}},"tabs-container--hook":{startLoc:{col:20,line:111},endLoc:{col:139,line:177},startBody:{col:20,line:111},endBody:{col:139,line:177}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React, { createRef } from 'react';\n\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\n\nimport { TabsContainer, useTabs } from './src';\n\nconst tabs = ['Tab 1', 'Tab 2', 'Tab 3'];\nconst tabRefs = tabs.map(() => createRef());\n\nexport const Container = () => {\n  const vertical = boolean('vertical', false);\n  const idPrefix = text('idPrefix', '');\n\n  return (\n    <TabsContainer vertical={vertical} idPrefix={idPrefix}>\n      {({ selectedItem, getTabProps, getTabListProps, getTabPanelProps }) => {\n        const tabComponents: React.ReactElement[] = [];\n        const tabPanels: React.ReactElement[] = [];\n\n        tabs.forEach((tab, index) => {\n          tabComponents.push(\n            <li\n              {...getTabProps({\n                item: tab,\n                index,\n                focusRef: tabRefs[index],\n                key: tab,\n                style: {\n                  padding: '5px 5px 0',\n                  borderBottom:\n                    vertical === false\n                      ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                      : undefined,\n                  borderLeft: vertical\n                    ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                    : undefined,\n                  color: tab === selectedItem ? '#1f73b7' : undefined\n                }\n              })}\n            >\n              {tab}\n            </li>\n          );\n\n          tabPanels.push(\n            <div\n              {...getTabPanelProps({\n                index,\n                item: tab,\n                key: tab,\n                style: {\n                  padding: vertical === false ? '10px 0' : undefined,\n                  borderTop: vertical === false ? '1px solid' : undefined\n                }\n              })}\n            >\n              {tab} Content\n            </div>\n          );\n        });\n\n        return (\n          <div style={{ display: vertical ? 'flex' : undefined }}>\n            <ul\n              {...getTabListProps({\n                style: {\n                  display: 'flex',\n                  flexDirection: vertical && 'column'\n                }\n              })}\n            >\n              {tabComponents}\n            </ul>\n            {tabPanels}\n          </div>\n        );\n      }}\n    </TabsContainer>\n  );\n};\n\nexport const Hook = () => {\n  const vertical = boolean('vertical', false);\n  const { selectedItem, getTabProps, getTabListProps, getTabPanelProps } = useTabs<string>({\n    vertical,\n    idPrefix: text('idPrefix', '')\n  });\n  const tabComponents: React.ReactElement[] = [];\n  const tabPanels: React.ReactElement[] = [];\n\n  tabs.forEach((tab, index) => {\n    tabComponents.push(\n      <li\n        {...getTabProps({\n          item: tab,\n          index,\n          focusRef: tabRefs[index],\n          key: tab,\n          style: {\n            padding: '5px 5px 0',\n            borderBottom:\n              vertical === false\n                ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n                : undefined,\n            borderLeft: vertical\n              ? `3px solid ${tab === selectedItem ? '#1f73b7' : 'transparent'}`\n              : undefined,\n            color: tab === selectedItem ? '#1f73b7' : undefined\n          }\n        })}\n      >\n        {tab}\n      </li>\n    );\n\n    tabPanels.push(\n      <div\n        {...getTabPanelProps({\n          index,\n          item: tab,\n          key: tab,\n          style: {\n            padding: vertical === false ? '10px 0' : undefined,\n            borderTop: vertical === false ? '1px solid' : undefined\n          }\n        })}\n      >\n        {tab} Content\n      </div>\n    );\n  });\n\n  return (\n    <div style={{ display: vertical ? 'flex' : undefined }}>\n      <ul\n        {...getTabListProps({\n          style: {\n            display: 'flex',\n            flexDirection: vertical && 'column'\n          }\n        })}\n      >\n        {tabComponents}\n      </ul>\n      {tabPanels}\n    </div>\n  );\n};\n\nContainer.story = {\n  name: 'TabsContainer'\n};\n\nHook.story = {\n  name: 'useTabs',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useTabs\\` hook implements the [tabs pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel) and can be used to build a tabs component.`\n    }\n  }\n};\n\nexport default {\n  title: 'Tabs Container',\n  decorators: [withKnobs],\n  component: TabsContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useTabs hook.`\n  }\n};\n",locationsMap:{"tabs-container--container":{startLoc:{col:25,line:17},endLoc:{col:1,line:87},startBody:{col:25,line:17},endBody:{col:1,line:87}},"tabs-container--hook":{startLoc:{col:20,line:89},endLoc:{col:1,line:155},startBody:{col:20,line:89},endBody:{col:1,line:155}}}},_parameters.componentSubtitle="A container component which wraps the useTabs hook.",_parameters)}},290:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return useSelection}));__webpack_require__(45),__webpack_require__(76),__webpack_require__(66);var react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__),_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(3),prop_types__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),prop_types__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_5__);function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function stateReducer(state,action){switch(action.type){case"FOCUS":return action.onFocus?(action.payload!==action.focusedItem&&action.onFocus(action.payload),state):_extends({},state,{focusedItem:action.payload});case"INCREMENT":var controlledFocusedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(action.focusedItem,state.focusedItem),controlledSelectedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(action.selectedItem,state.selectedItem),currentItemIndex=void 0===controlledFocusedItem?action.items.indexOf(controlledSelectedItem):action.items.indexOf(controlledFocusedItem),newFocusedItem=action.items[(currentItemIndex+1)%action.items.length];return action.onFocus?(action.onFocus(newFocusedItem),state):_extends({},state,{focusedItem:newFocusedItem});case"DECREMENT":var _controlledFocusedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(action.focusedItem,state.focusedItem),_controlledSelectedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(action.selectedItem,state.selectedItem),_currentItemIndex=void 0===_controlledFocusedItem?action.items.indexOf(_controlledSelectedItem):action.items.indexOf(_controlledFocusedItem),_newFocusedItem=action.items[(_currentItemIndex+action.items.length-1)%action.items.length];return action.onFocus?(action.onFocus(_newFocusedItem),state):_extends({},state,{focusedItem:_newFocusedItem});case"HOME":return action.onFocus?(action.onFocus(action.items[0]),state):_extends({},state,{focusedItem:action.items[0]});case"END":return action.onFocus?(action.onFocus(action.items[action.items.length-1]),state):_extends({},state,{focusedItem:action.items[action.items.length-1]});case"MOUSE_SELECT":var isSelectControlled=!1,isFocusControlled=!1;if(action.onSelect&&(action.onSelect(action.payload),isSelectControlled=!0),action.onFocus&&(action.onFocus(void 0),isFocusControlled=!0),isFocusControlled&&isSelectControlled)return state;var updatedState=_extends({},state);return isSelectControlled||(updatedState.selectedItem=action.payload),isFocusControlled||(updatedState.focusedItem=void 0),updatedState;case"KEYBOARD_SELECT":return action.onSelect?(action.onSelect(action.payload),state):_extends({},state,{selectedItem:action.payload});case"EXIT_WIDGET":return action.onFocus?(action.onFocus(void 0),state):_extends({},state,{focusedItem:void 0});default:return state}}function useSelection(_temp){var _ref=void 0===_temp?{}:_temp,_ref$direction=_ref.direction,direction=void 0===_ref$direction?"horizontal":_ref$direction,_ref$defaultFocusedIn=_ref.defaultFocusedIndex,defaultFocusedIndex=void 0===_ref$defaultFocusedIn?0:_ref$defaultFocusedIn,defaultSelectedIndex=_ref.defaultSelectedIndex,rtl=_ref.rtl,selectedItem=_ref.selectedItem,focusedItem=_ref.focusedItem,onSelect=_ref.onSelect,onFocus=_ref.onFocus,refs=[],items=[],_useReducer=Object(react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(stateReducer,{selectedItem:selectedItem,focusedItem:focusedItem}),state=_useReducer[0],dispatch=_useReducer[1],controlledFocusedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(focusedItem,state.focusedItem),controlledSelectedItem=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.c)(selectedItem,state.selectedItem);Object(react__WEBPACK_IMPORTED_MODULE_3__.useEffect)((function(){if(void 0!==controlledFocusedItem){var focusedIndex=items.indexOf(controlledFocusedItem);refs[focusedIndex]&&refs[focusedIndex].current.focus()}}),[controlledFocusedItem]),Object(react__WEBPACK_IMPORTED_MODULE_3__.useEffect)((function(){void 0===selectedItem&&void 0!==defaultSelectedIndex&&dispatch({type:"KEYBOARD_SELECT",payload:items[defaultSelectedIndex],onSelect:onSelect})}),[]);return{focusedItem:controlledFocusedItem,selectedItem:controlledSelectedItem,getItemProps:function(_temp3,propGetterName){var _extends2,_ref3=void 0===_temp3?{}:_temp3,_ref3$selectedAriaKey=_ref3.selectedAriaKey,selectedAriaKey=void 0===_ref3$selectedAriaKey?"aria-selected":_ref3$selectedAriaKey,_ref3$role=_ref3.role,role=void 0===_ref3$role?"option":_ref3$role,onFocusCallback=_ref3.onFocus,onKeyDown=_ref3.onKeyDown,onClick=_ref3.onClick,item=_ref3.item,focusRef=_ref3.focusRef,_ref3$refKey=_ref3.refKey,refKey=void 0===_ref3$refKey?"ref":_ref3$refKey,other=_objectWithoutPropertiesLoose(_ref3,["selectedAriaKey","role","onFocus","onKeyDown","onClick","item","focusRef","refKey"]);if(void 0===propGetterName&&(propGetterName="getItemProps"),void 0===item)throw new Error('Accessibility Error: You must provide an "item" option to "'+propGetterName+'()"');if(void 0===focusRef)throw new Error('Accessibility Error: You must provide a "focusRef" option to "'+propGetterName+'()"');refs.push(focusRef),items.push(item);var isSelected=controlledSelectedItem===item,tabIndex=(void 0===controlledFocusedItem?isSelected:controlledFocusedItem===item)||void 0===controlledSelectedItem&&void 0===controlledFocusedItem&&items.indexOf(item)===defaultFocusedIndex?0:-1,verticalDirection="vertical"===direction||"both"===direction,horizontalDirection="horizontal"===direction||"both"===direction;return _extends(((_extends2={role:role,tabIndex:tabIndex})[selectedAriaKey]=selectedAriaKey?isSelected:void 0,_extends2[refKey]=focusRef,_extends2.onFocus=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.b)(onFocusCallback,(function(){dispatch({type:"FOCUS",payload:item,focusedItem:focusedItem,onFocus:onFocus})})),_extends2.onBlur=function(e){0===e.target.tabIndex&&dispatch({type:"EXIT_WIDGET",onFocus:onFocus})},_extends2.onClick=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.b)(onClick,(function(){dispatch({type:"MOUSE_SELECT",payload:item,onSelect:onSelect,onFocus:onFocus})})),_extends2.onKeyDown=Object(_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.b)(onKeyDown,(function(e){e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.UP&&verticalDirection||e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.LEFT&&horizontalDirection?(dispatch(rtl&&!verticalDirection?{type:"INCREMENT",items:items,focusedItem:focusedItem,selectedItem:selectedItem,onFocus:onFocus}:{type:"DECREMENT",items:items,focusedItem:focusedItem,selectedItem:selectedItem,onFocus:onFocus}),e.preventDefault()):e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.DOWN&&verticalDirection||e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.RIGHT&&horizontalDirection?(dispatch(rtl&&!verticalDirection?{type:"DECREMENT",items:items,focusedItem:focusedItem,selectedItem:selectedItem,onFocus:onFocus}:{type:"INCREMENT",items:items,focusedItem:focusedItem,selectedItem:selectedItem,onFocus:onFocus}),e.preventDefault()):e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.HOME?(dispatch({type:"HOME",items:items,onFocus:onFocus}),e.preventDefault()):e.keyCode===_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.END?(dispatch({type:"END",items:items,onFocus:onFocus}),e.preventDefault()):e.keyCode!==_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.SPACE&&e.keyCode!==_zendeskgarden_container_utilities__WEBPACK_IMPORTED_MODULE_4__.a.ENTER||(dispatch({type:"KEYBOARD_SELECT",payload:item,onSelect:onSelect}),e.preventDefault())})),_extends2),other)},getContainerProps:function(_temp2){var _ref2=void 0===_temp2?{}:_temp2,_ref2$role=_ref2.role;return _extends({role:void 0===_ref2$role?"listbox":_ref2$role,"data-garden-container-id":"containers.selection","data-garden-container-version":"1.3.6"},_objectWithoutPropertiesLoose(_ref2,["role"]))}}}var SelectionContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=_objectWithoutPropertiesLoose(_ref,["children","render"]);return(react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment,null,render(useSelection(options))))};SelectionContainer.defaultProps={direction:"horizontal",defaultFocusedIndex:0},SelectionContainer.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,render:prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,rtl:prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.bool,direction:prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.oneOf(["horizontal","vertical","both"]),defaultFocusedIndex:prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.number,focusedItem:prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,selectedItem:prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.any,onSelect:prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func,onFocus:prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func},SelectionContainer.__docgenInfo={description:"",methods:[],displayName:"SelectionContainer",props:{direction:{defaultValue:{value:"'horizontal'",computed:!1},type:{name:"enum",value:[{value:"'horizontal'",computed:!1},{value:"'vertical'",computed:!1},{value:"'both'",computed:!1}]},required:!1,description:""},defaultFocusedIndex:{defaultValue:{value:"0",computed:!1},type:{name:"number"},required:!1,description:""},children:{type:{name:"func"},required:!1,description:""},render:{type:{name:"func"},required:!1,description:""},rtl:{type:{name:"bool"},required:!1,description:""},focusedItem:{type:{name:"any"},required:!1,description:""},selectedItem:{type:{name:"any"},required:!1,description:""},onSelect:{type:{name:"func"},required:!1,description:""},onFocus:{type:{name:"func"},required:!1,description:""}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/selection/dist/index.esm.js"]={name:"SelectionContainer",docgenInfo:SelectionContainer.__docgenInfo,path:"packages/selection/dist/index.esm.js"})},3:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return KEY_CODES})),__webpack_require__.d(__webpack_exports__,"b",(function(){return composeEventHandlers})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getControlledValue}));__webpack_require__(1391),__webpack_require__(813),__webpack_require__(2796),__webpack_require__(2797),__webpack_require__(0);function composeEventHandlers(){for(var _len=arguments.length,fns=Array(_len),_key=0;_key<_len;_key++)fns[_key]=arguments[_key];return function(event){for(var _len2=arguments.length,args=Array(1<_len2?_len2-1:0),_key2=1;_key2<_len2;_key2++)args[_key2-1]=arguments[_key2];return fns.some((function(fn){return fn&&fn.apply(void 0,[event].concat(args)),event&&event.defaultPrevented}))}}function getControlledValue(){for(var _len=arguments.length,values=Array(_len),_key=0;_key<_len;_key++)values[_key]=arguments[_key];for(var value,_i=0,_values=values;_i<_values.length;_i++)if(void 0!==(value=_values[_i]))return value}var KEY_CODES={ALT:18,BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38}},574:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(234);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),dist=__webpack_require__(4),objectWithoutPropertiesLoose=__webpack_require__(408),prop_types=__webpack_require__(1),prop_types_default=__webpack_require__.n(prop_types),useSelection=__webpack_require__(1415),SelectionContainer=function(_ref){var children=_ref.children,_ref$render=_ref.render,render=void 0===_ref$render?children:_ref$render,options=Object(objectWithoutPropertiesLoose.a)(_ref,["children","render"]);return(react_default.a.createElement(react_default.a.Fragment,null,render(Object(useSelection.a)(options))))};SelectionContainer.defaultProps={direction:"horizontal",defaultFocusedIndex:0},SelectionContainer.propTypes={children:prop_types_default.a.func,render:prop_types_default.a.func,rtl:prop_types_default.a.bool,direction:prop_types_default.a.oneOf(["horizontal","vertical","both"]),defaultFocusedIndex:prop_types_default.a.number,focusedItem:prop_types_default.a.any,selectedItem:prop_types_default.a.any,onSelect:prop_types_default.a.func,onFocus:prop_types_default.a.func},SelectionContainer.__docgenInfo={description:"",methods:[],displayName:"SelectionContainer",props:{direction:{defaultValue:{value:"'horizontal'",computed:!1},type:{name:"enum",value:[{value:"'horizontal'",computed:!1},{value:"'vertical'",computed:!1},{value:"'both'",computed:!1}]},required:!1,description:"Determines the orientation of the selection"},defaultFocusedIndex:{defaultValue:{value:"0",computed:!1},type:{name:"number"},required:!1,description:"Sets the  initial focused item"},children:{type:{name:"func"},required:!1,description:"A children render prop function which receives selection state"},render:{type:{name:"func"},required:!1,description:"A render prop function which receives selection state"},rtl:{type:{name:"bool"},required:!1,description:"Determines if selection uses right-to-left writing direction"},focusedItem:{type:{name:"any"},required:!1,description:"Sets the focused item in a controlled selection"},selectedItem:{type:{name:"any"},required:!1,description:"Sets the selected item in a controlled selection"},onSelect:{type:{name:"func"},required:!1,description:"A callback function that receives the selected item"},onFocus:{type:{name:"func"},required:!1,description:"A callback function that receives the focused item"}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/selection/src/SelectionContainer.tsx"]={name:"SelectionContainer",docgenInfo:SelectionContainer.__docgenInfo,path:"packages/selection/src/SelectionContainer.tsx"}),__webpack_require__.d(__webpack_exports__,"Container",(function(){return Container})),__webpack_require__.d(__webpack_exports__,"Hook",(function(){return Hook}));__webpack_require__(2).withSource;var _parameters,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/selection",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/selection";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/selection\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { SelectionContainer, useSelection } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\\\n\\\\n  return (\\\\n    <SelectionContainer direction=\\\\\\"vertical\\\\\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\\\n        <ul {...getContainerProps()}>\\\\n          {items.map(item => {\\\\n            const ref = React.createRef();\\\\n            const isSelected = item === selectedItem;\\\\n            const isFocused = item === focusedItem;\\\\n\\\\n            return (\\\\n              <li\\\\n                {...getItemProps({\\\\n                  key: item,\\\\n                  item,\\\\n                  focusRef: ref\\\\n                })}\\\\n              >\\\\n                {item}\\\\n                {isSelected && <span> - Selected</span>}\\\\n                {isFocused && <span> - Focused</span>}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n      )}\\\\n    </SelectionContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n  const isRtl = boolean(\'Enable RTL\', false);\\\\n\\\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\\\n      direction,\\\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\\\n      rtl: isRtl\\\\n    });\\\\n\\\\n    return (\\\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef<HTMLLIElement>();\\\\n          const isSelected = selectedItem === item;\\\\n          const isFocused = focusedItem === item;\\\\n\\\\n          return (\\\\n            <li\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                style: {\\\\n                  listStyle: \'none\',\\\\n                  margin: 16,\\\\n                  padding: 8,\\\\n                  textAlign: \'center\'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {item}\\\\n              {isSelected && <div>[Selected]</div>}\\\\n              {isFocused && <div>(Focused)</div>}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n      </ul>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Selection\\\\n      direction={select(\\\\n        \'Direction\',\\\\n        {\\\\n          vertical: \'vertical\',\\\\n          horizontal: \'horizontal\',\\\\n          both: \'both\'\\\\n        },\\\\n        \'horizontal\'\\\\n      )}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'SelectionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSelection\\\\\\\\` hook manages an items focus state including keyboard controls,\\\\n      aria attributes and RTL support. It uses the \\\\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Selection Container\',\\\\n  decorators: [withKnobs],\\\\n  component: SelectionContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"selection-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":43},\\"startBody\\":{\\"col\\":25,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":43}},\\"selection-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":45},\\"endLoc\\":{\\"col\\":1,\\"line\\":100},\\"startBody\\":{\\"col\\":20,\\"line\\":45},\\"endBody\\":{\\"col\\":1,\\"line\\":100}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/selection.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { SelectionContainer, useSelection } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\n\\n  return (\\n    <SelectionContainer direction=\\"vertical\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n  const isRtl = boolean(\'Enable RTL\', false);\\n\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: \'none\',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: \'center\'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        \'Direction\',\\n        {\\n          vertical: \'vertical\',\\n          horizontal: \'horizontal\',\\n          both: \'both\'\\n        },\\n        \'horizontal\'\\n      )}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'SelectionContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Selection Container\',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { SelectionContainer, useSelection } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\\\n\\\\n  return (\\\\n    <SelectionContainer direction=\\\\\\"vertical\\\\\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\\\n        <ul {...getContainerProps()}>\\\\n          {items.map(item => {\\\\n            const ref = React.createRef();\\\\n            const isSelected = item === selectedItem;\\\\n            const isFocused = item === focusedItem;\\\\n\\\\n            return (\\\\n              <li\\\\n                {...getItemProps({\\\\n                  key: item,\\\\n                  item,\\\\n                  focusRef: ref\\\\n                })}\\\\n              >\\\\n                {item}\\\\n                {isSelected && <span> - Selected</span>}\\\\n                {isFocused && <span> - Focused</span>}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n      )}\\\\n    </SelectionContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n  const isRtl = boolean(\'Enable RTL\', false);\\\\n\\\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\\\n      direction,\\\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\\\n      rtl: isRtl\\\\n    });\\\\n\\\\n    return (\\\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef<HTMLLIElement>();\\\\n          const isSelected = selectedItem === item;\\\\n          const isFocused = focusedItem === item;\\\\n\\\\n          return (\\\\n            <li\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                style: {\\\\n                  listStyle: \'none\',\\\\n                  margin: 16,\\\\n                  padding: 8,\\\\n                  textAlign: \'center\'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {item}\\\\n              {isSelected && <div>[Selected]</div>}\\\\n              {isFocused && <div>(Focused)</div>}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n      </ul>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Selection\\\\n      direction={select(\\\\n        \'Direction\',\\\\n        {\\\\n          vertical: \'vertical\',\\\\n          horizontal: \'horizontal\',\\\\n          both: \'both\'\\\\n        },\\\\n        \'horizontal\'\\\\n      )}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'SelectionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSelection\\\\\\\\` hook manages an items focus state including keyboard controls,\\\\n      aria attributes and RTL support. It uses the \\\\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Selection Container\',\\\\n  decorators: [withKnobs],\\\\n  component: SelectionContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"selection-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":43},\\"startBody\\":{\\"col\\":25,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":43}},\\"selection-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":45},\\"endLoc\\":{\\"col\\":1,\\"line\\":100},\\"startBody\\":{\\"col\\":20,\\"line\\":45},\\"endBody\\":{\\"col\\":1,\\"line\\":100}}}},\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"selection-container--container":{"startLoc":{"col":25,"line":35},"endLoc":{"col":139,"line":65},"startBody":{"col":25,"line":35},"endBody":{"col":139,"line":65}},"selection-container--hook":{"startLoc":{"col":20,"line":67},"endLoc":{"col":139,"line":122},"startBody":{"col":20,"line":67},"endBody":{"col":139,"line":122}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/selection.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/selection";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { SelectionContainer, useSelection } from \'./src\';\\n\\nexport const Container = () => {\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\n\\n  return (\\n    <SelectionContainer direction=\\"vertical\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n  const isRtl = boolean(\'Enable RTL\', false);\\n\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: \'none\',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: \'center\'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        \'Direction\',\\n        {\\n          vertical: \'vertical\',\\n          horizontal: \'horizontal\',\\n          both: \'both\'\\n        },\\n        \'horizontal\'\\n      )}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'SelectionContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Selection Container\',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"selection-container--container":{"startLoc":{"col":25,"line":13},"endLoc":{"col":1,"line":43},"startBody":{"col":25,"line":13},"endBody":{"col":1,"line":43}},"selection-container--hook":{"startLoc":{"col":20,"line":45},"endLoc":{"col":1,"line":100},"startBody":{"col":20,"line":45},"endBody":{"col":1,"line":100}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/selection.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\n\nimport { SelectionContainer, useSelection } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\n\n  return (\n    <SelectionContainer direction="vertical" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\n        <ul {...getContainerProps()}>\n          {items.map(item => {\n            const ref = React.createRef();\n            const isSelected = item === selectedItem;\n            const isFocused = item === focusedItem;\n\n            return (\n              <li\n                {...getItemProps({\n                  key: item,\n                  item,\n                  focusRef: ref\n                })}\n              >\n                {item}\n                {isSelected && <span> - Selected</span>}\n                {isFocused && <span> - Focused</span>}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </SelectionContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const items = [\'One\', \'Two\', \'Three\'];\n  const isRtl = boolean(\'Enable RTL\', false);\n\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\n      direction,\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\n      rtl: isRtl\n    });\n\n    return (\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\n        {items.map(item => {\n          const itemRef = React.createRef<HTMLLIElement>();\n          const isSelected = selectedItem === item;\n          const isFocused = focusedItem === item;\n\n          return (\n            <li\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                style: {\n                  listStyle: \'none\',\n                  margin: 16,\n                  padding: 8,\n                  textAlign: \'center\'\n                }\n              })}\n            >\n              {item}\n              {isSelected && <div>[Selected]</div>}\n              {isFocused && <div>(Focused)</div>}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  return (\n    <Selection\n      direction={select(\n        \'Direction\',\n        {\n          vertical: \'vertical\',\n          horizontal: \'horizontal\',\n          both: \'both\'\n        },\n        \'horizontal\'\n      )}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'SelectionContainer\'\n};\n\nHook.story = {\n  name: \'useSelection\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSelection\\` hook manages an items focus state including keyboard controls,\n      aria attributes and RTL support. It uses the \n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\n    }\n  }\n};\n\nexport default {\n  title: \'Selection Container\',\n  decorators: [withKnobs],\n  component: SelectionContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/selection\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { SelectionContainer, useSelection } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\\\n\\\\n  return (\\\\n    <SelectionContainer direction=\\\\\\"vertical\\\\\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\\\n        <ul {...getContainerProps()}>\\\\n          {items.map(item => {\\\\n            const ref = React.createRef();\\\\n            const isSelected = item === selectedItem;\\\\n            const isFocused = item === focusedItem;\\\\n\\\\n            return (\\\\n              <li\\\\n                {...getItemProps({\\\\n                  key: item,\\\\n                  item,\\\\n                  focusRef: ref\\\\n                })}\\\\n              >\\\\n                {item}\\\\n                {isSelected && <span> - Selected</span>}\\\\n                {isFocused && <span> - Focused</span>}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n      )}\\\\n    </SelectionContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n  const isRtl = boolean(\'Enable RTL\', false);\\\\n\\\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\\\n      direction,\\\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\\\n      rtl: isRtl\\\\n    });\\\\n\\\\n    return (\\\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef<HTMLLIElement>();\\\\n          const isSelected = selectedItem === item;\\\\n          const isFocused = focusedItem === item;\\\\n\\\\n          return (\\\\n            <li\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                style: {\\\\n                  listStyle: \'none\',\\\\n                  margin: 16,\\\\n                  padding: 8,\\\\n                  textAlign: \'center\'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {item}\\\\n              {isSelected && <div>[Selected]</div>}\\\\n              {isFocused && <div>(Focused)</div>}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n      </ul>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Selection\\\\n      direction={select(\\\\n        \'Direction\',\\\\n        {\\\\n          vertical: \'vertical\',\\\\n          horizontal: \'horizontal\',\\\\n          both: \'both\'\\\\n        },\\\\n        \'horizontal\'\\\\n      )}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'SelectionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSelection\\\\\\\\` hook manages an items focus state including keyboard controls,\\\\n      aria attributes and RTL support. It uses the \\\\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Selection Container\',\\\\n  decorators: [withKnobs],\\\\n  component: SelectionContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"selection-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":43},\\"startBody\\":{\\"col\\":25,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":43}},\\"selection-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":45},\\"endLoc\\":{\\"col\\":1,\\"line\\":100},\\"startBody\\":{\\"col\\":20,\\"line\\":45},\\"endBody\\":{\\"col\\":1,\\"line\\":100}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/selection.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { SelectionContainer, useSelection } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\n\\n  return (\\n    <SelectionContainer direction=\\"vertical\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n  const isRtl = boolean(\'Enable RTL\', false);\\n\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: \'none\',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: \'center\'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        \'Direction\',\\n        {\\n          vertical: \'vertical\',\\n          horizontal: \'horizontal\',\\n          both: \'both\'\\n        },\\n        \'horizontal\'\\n      )}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'SelectionContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Selection Container\',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { SelectionContainer, useSelection } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\\\n\\\\n  return (\\\\n    <SelectionContainer direction=\\\\\\"vertical\\\\\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\\\n        <ul {...getContainerProps()}>\\\\n          {items.map(item => {\\\\n            const ref = React.createRef();\\\\n            const isSelected = item === selectedItem;\\\\n            const isFocused = item === focusedItem;\\\\n\\\\n            return (\\\\n              <li\\\\n                {...getItemProps({\\\\n                  key: item,\\\\n                  item,\\\\n                  focusRef: ref\\\\n                })}\\\\n              >\\\\n                {item}\\\\n                {isSelected && <span> - Selected</span>}\\\\n                {isFocused && <span> - Focused</span>}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n      )}\\\\n    </SelectionContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n  const isRtl = boolean(\'Enable RTL\', false);\\\\n\\\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\\\n      direction,\\\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\\\n      rtl: isRtl\\\\n    });\\\\n\\\\n    return (\\\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef<HTMLLIElement>();\\\\n          const isSelected = selectedItem === item;\\\\n          const isFocused = focusedItem === item;\\\\n\\\\n          return (\\\\n            <li\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                style: {\\\\n                  listStyle: \'none\',\\\\n                  margin: 16,\\\\n                  padding: 8,\\\\n                  textAlign: \'center\'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {item}\\\\n              {isSelected && <div>[Selected]</div>}\\\\n              {isFocused && <div>(Focused)</div>}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n      </ul>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Selection\\\\n      direction={select(\\\\n        \'Direction\',\\\\n        {\\\\n          vertical: \'vertical\',\\\\n          horizontal: \'horizontal\',\\\\n          both: \'both\'\\\\n        },\\\\n        \'horizontal\'\\\\n      )}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'SelectionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSelection\\\\\\\\` hook manages an items focus state including keyboard controls,\\\\n      aria attributes and RTL support. It uses the \\\\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Selection Container\',\\\\n  decorators: [withKnobs],\\\\n  component: SelectionContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"selection-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":43},\\"startBody\\":{\\"col\\":25,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":43}},\\"selection-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":45},\\"endLoc\\":{\\"col\\":1,\\"line\\":100},\\"startBody\\":{\\"col\\":20,\\"line\\":45},\\"endBody\\":{\\"col\\":1,\\"line\\":100}}}},\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  },};\\n","locationsMap":{"selection-container--container":{"startLoc":{"col":25,"line":35},"endLoc":{"col":139,"line":65},"startBody":{"col":25,"line":35},"endBody":{"col":139,"line":65}},"selection-container--hook":{"startLoc":{"col":20,"line":67},"endLoc":{"col":139,"line":122},"startBody":{"col":20,"line":67},"endBody":{"col":139,"line":122}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { SelectionContainer, useSelection } from \'./src\';\\n\\nexport const Container = () => {\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\n\\n  return (\\n    <SelectionContainer direction=\\"vertical\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n  const isRtl = boolean(\'Enable RTL\', false);\\n\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: \'none\',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: \'center\'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        \'Direction\',\\n        {\\n          vertical: \'vertical\',\\n          horizontal: \'horizontal\',\\n          both: \'both\'\\n        },\\n        \'horizontal\'\\n      )}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'SelectionContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Selection Container\',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  }\\n};\\n","locationsMap":{"selection-container--container":{"startLoc":{"col":25,"line":13},"endLoc":{"col":1,"line":43},"startBody":{"col":25,"line":13},"endBody":{"col":1,"line":43}},"selection-container--hook":{"startLoc":{"col":20,"line":45},"endLoc":{"col":1,"line":100},"startBody":{"col":20,"line":45},"endBody":{"col":1,"line":100}}}},\n    componentSubtitle: `A container component which wraps the useSelection hook.`\n  },};\n',__ADDS_MAP__={"selection-container--container":{startLoc:{col:25,line:57},endLoc:{col:277,line:87},startBody:{col:25,line:57},endBody:{col:277,line:87}},"selection-container--hook":{startLoc:{col:20,line:89},endLoc:{col:277,line:144},startBody:{col:20,line:89},endBody:{col:277,line:144}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},Container=(__webpack_require__(2).withSource,addSourceDecorator=__webpack_require__(2).addSource,__SOURCE_PREFIX__="/home/circleci/project/packages/selection",__STORY__="\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/selection\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from 'react';\\nimport { withKnobs, select, boolean, number } from '@storybook/addon-knobs';\\n\\nimport { SelectionContainer, useSelection } from './src';\\n\\nexport const Container = () => {\\n  const items = ['Item 1', 'Item 2', 'Item 3'];\\n\\n  return (\\n    <SelectionContainer direction=\\\"vertical\\\" defaultFocusedIndex={number('defaultFocusedIndex', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const items = ['One', 'Two', 'Three'];\\n  const isRtl = boolean('Enable RTL', false);\\n\\n  const Selection = ({ direction }: { direction?: 'both' | 'horizontal' | 'vertical' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number('defaultSelectedIndex', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: 'flex' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: 'none',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: 'center'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        'Direction',\\n        {\\n          vertical: 'vertical',\\n          horizontal: 'horizontal',\\n          both: 'both'\\n        },\\n        'horizontal'\\n      )}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'SelectionContainer'\\n};\\n\\nHook.story = {\\n  name: 'useSelection',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Selection Container',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"selection-container--container\":{\"startLoc\":{\"col\":25,\"line\":13},\"endLoc\":{\"col\":1,\"line\":43},\"startBody\":{\"col\":25,\"line\":13},\"endBody\":{\"col\":1,\"line\":43}},\"selection-container--hook\":{\"startLoc\":{\"col\":20,\"line\":45},\"endLoc\":{\"col\":1,\"line\":100},\"startBody\":{\"col\":20,\"line\":45},\"endBody\":{\"col\":1,\"line\":100}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/selection.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\nimport { withKnobs, select, boolean, number } from '@storybook/addon-knobs';\n\nimport { SelectionContainer, useSelection } from './src';\n\nexport const Container = addSourceDecorator(() => {\n  const items = ['Item 1', 'Item 2', 'Item 3'];\n\n  return (\n    <SelectionContainer direction=\"vertical\" defaultFocusedIndex={number('defaultFocusedIndex', 0)}>\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\n        <ul {...getContainerProps()}>\n          {items.map(item => {\n            const ref = React.createRef();\n            const isSelected = item === selectedItem;\n            const isFocused = item === focusedItem;\n\n            return (\n              <li\n                {...getItemProps({\n                  key: item,\n                  item,\n                  focusRef: ref\n                })}\n              >\n                {item}\n                {isSelected && <span> - Selected</span>}\n                {isFocused && <span> - Focused</span>}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </SelectionContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const items = ['One', 'Two', 'Three'];\n  const isRtl = boolean('Enable RTL', false);\n\n  const Selection = ({ direction }: { direction?: 'both' | 'horizontal' | 'vertical' }) => {\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\n      direction,\n      defaultSelectedIndex: number('defaultSelectedIndex', 0),\n      rtl: isRtl\n    });\n\n    return (\n      <ul {...getContainerProps({ style: { display: 'flex' } })}>\n        {items.map(item => {\n          const itemRef = React.createRef<HTMLLIElement>();\n          const isSelected = selectedItem === item;\n          const isFocused = focusedItem === item;\n\n          return (\n            <li\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                style: {\n                  listStyle: 'none',\n                  margin: 16,\n                  padding: 8,\n                  textAlign: 'center'\n                }\n              })}\n            >\n              {item}\n              {isSelected && <div>[Selected]</div>}\n              {isFocused && <div>(Focused)</div>}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  return (\n    <Selection\n      direction={select(\n        'Direction',\n        {\n          vertical: 'vertical',\n          horizontal: 'horizontal',\n          both: 'both'\n        },\n        'horizontal'\n      )}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'SelectionContainer'\n};\n\nHook.story = {\n  name: 'useSelection',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSelection\\` hook manages an items focus state including keyboard controls,\n      aria attributes and RTL support. It uses the \n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\n    }\n  }\n};\n\nexport default {\n  title: 'Selection Container',\n  decorators: [withKnobs],\n  component: SelectionContainer,\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from 'react';\\nimport { withKnobs, select, boolean, number } from '@storybook/addon-knobs';\\n\\nimport { SelectionContainer, useSelection } from './src';\\n\\nexport const Container = () => {\\n  const items = ['Item 1', 'Item 2', 'Item 3'];\\n\\n  return (\\n    <SelectionContainer direction=\\\"vertical\\\" defaultFocusedIndex={number('defaultFocusedIndex', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const items = ['One', 'Two', 'Three'];\\n  const isRtl = boolean('Enable RTL', false);\\n\\n  const Selection = ({ direction }: { direction?: 'both' | 'horizontal' | 'vertical' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number('defaultSelectedIndex', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: 'flex' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: 'none',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: 'center'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        'Direction',\\n        {\\n          vertical: 'vertical',\\n          horizontal: 'horizontal',\\n          both: 'both'\\n        },\\n        'horizontal'\\n      )}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'SelectionContainer'\\n};\\n\\nHook.story = {\\n  name: 'useSelection',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Selection Container',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"selection-container--container\":{\"startLoc\":{\"col\":25,\"line\":13},\"endLoc\":{\"col\":1,\"line\":43},\"startBody\":{\"col\":25,\"line\":13},\"endBody\":{\"col\":1,\"line\":43}},\"selection-container--hook\":{\"startLoc\":{\"col\":20,\"line\":45},\"endLoc\":{\"col\":1,\"line\":100},\"startBody\":{\"col\":20,\"line\":45},\"endBody\":{\"col\":1,\"line\":100}}}},\n    componentSubtitle: `A container component which wraps the useSelection hook.`\n  },};\n",__ADDS_MAP__={"selection-container--container":{startLoc:{col:25,line:35},endLoc:{col:139,line:65},startBody:{col:25,line:35},endBody:{col:139,line:65}},"selection-container--hook":{startLoc:{col:20,line:67},endLoc:{col:139,line:122},startBody:{col:20,line:67},endBody:{col:139,line:122}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(2).withSource,(addSourceDecorator=__webpack_require__(2).addSource)(addSourceDecorator(addSourceDecorator((function(){var items=["Item 1","Item 2","Item 3"];return(react_default.a.createElement(SelectionContainer,{direction:"vertical",defaultFocusedIndex:Object(dist.number)("defaultFocusedIndex",0)},(function(_ref){var selectedItem=_ref.selectedItem,focusedItem=_ref.focusedItem,getContainerProps=_ref.getContainerProps,getItemProps=_ref.getItemProps;return(react_default.a.createElement("ul",getContainerProps(),items.map((function(item){var ref=react_default.a.createRef();return(react_default.a.createElement("li",getItemProps({key:item,item:item,focusRef:ref}),item,item===selectedItem&&react_default.a.createElement("span",null," - Selected"),item===focusedItem&&react_default.a.createElement("span",null," - Focused")))}))))})))}),{__STORY__:__STORY__="/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\nimport { withKnobs, select, boolean, number } from '@storybook/addon-knobs';\n\nimport { SelectionContainer, useSelection } from './src';\n\nexport const Container = () => {\n  const items = ['Item 1', 'Item 2', 'Item 3'];\n\n  return (\n    <SelectionContainer direction=\"vertical\" defaultFocusedIndex={number('defaultFocusedIndex', 0)}>\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\n        <ul {...getContainerProps()}>\n          {items.map(item => {\n            const ref = React.createRef();\n            const isSelected = item === selectedItem;\n            const isFocused = item === focusedItem;\n\n            return (\n              <li\n                {...getItemProps({\n                  key: item,\n                  item,\n                  focusRef: ref\n                })}\n              >\n                {item}\n                {isSelected && <span> - Selected</span>}\n                {isFocused && <span> - Focused</span>}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </SelectionContainer>\n  );\n};\n\nexport const Hook = () => {\n  const items = ['One', 'Two', 'Three'];\n  const isRtl = boolean('Enable RTL', false);\n\n  const Selection = ({ direction }: { direction?: 'both' | 'horizontal' | 'vertical' }) => {\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\n      direction,\n      defaultSelectedIndex: number('defaultSelectedIndex', 0),\n      rtl: isRtl\n    });\n\n    return (\n      <ul {...getContainerProps({ style: { display: 'flex' } })}>\n        {items.map(item => {\n          const itemRef = React.createRef<HTMLLIElement>();\n          const isSelected = selectedItem === item;\n          const isFocused = focusedItem === item;\n\n          return (\n            <li\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                style: {\n                  listStyle: 'none',\n                  margin: 16,\n                  padding: 8,\n                  textAlign: 'center'\n                }\n              })}\n            >\n              {item}\n              {isSelected && <div>[Selected]</div>}\n              {isFocused && <div>(Focused)</div>}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  return (\n    <Selection\n      direction={select(\n        'Direction',\n        {\n          vertical: 'vertical',\n          horizontal: 'horizontal',\n          both: 'both'\n        },\n        'horizontal'\n      )}\n    />\n  );\n};\n\nContainer.story = {\n  name: 'SelectionContainer'\n};\n\nHook.story = {\n  name: 'useSelection',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSelection\\` hook manages an items focus state including keyboard controls,\n      aria attributes and RTL support. It uses the \n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\n    }\n  }\n};\n\nexport default {\n  title: 'Selection Container',\n  decorators: [withKnobs],\n  component: SelectionContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useSelection hook.`\n  }\n};\n",__ADDS_MAP__:__ADDS_MAP__={"selection-container--container":{startLoc:{col:25,line:13},endLoc:{col:1,line:43},startBody:{col:25,line:13},endBody:{col:1,line:43}},"selection-container--hook":{startLoc:{col:20,line:45},endLoc:{col:1,line:100},startBody:{col:20,line:45},endBody:{col:1,line:100}}},__MAIN_FILE_LOCATION__:"/selection.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/home/circleci/project/packages/selection",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/selection.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/selection.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})),Hook=addSourceDecorator(addSourceDecorator(addSourceDecorator((function(){var items=["One","Two","Three"],isRtl=Object(dist.boolean)("Enable RTL",!1);return(react_default.a.createElement((function(_ref2){var direction=_ref2.direction,_useSelection=Object(useSelection.a)({direction:direction,defaultSelectedIndex:Object(dist.number)("defaultSelectedIndex",0),rtl:isRtl}),focusedItem=_useSelection.focusedItem,selectedItem=_useSelection.selectedItem,getContainerProps=_useSelection.getContainerProps,getItemProps=_useSelection.getItemProps;return(react_default.a.createElement("ul",getContainerProps({style:{display:"flex"}}),items.map((function(item){var itemRef=react_default.a.createRef();return(react_default.a.createElement("li",getItemProps({key:item,item:item,focusRef:itemRef,style:{listStyle:"none",margin:16,padding:8,textAlign:"center"}}),item,selectedItem===item&&react_default.a.createElement("div",null,"[Selected]"),focusedItem===item&&react_default.a.createElement("div",null,"(Focused)")))}))))}),{direction:Object(dist.select)("Direction",{vertical:"vertical",horizontal:"horizontal",both:"both"},"horizontal")}))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/selection.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/selection.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/selection.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Container.story={name:"SelectionContainer"},Hook.story={name:"useSelection",parameters:{docs:{storyDescription:"The `useSelection` hook manages an items focus state including keyboard controls,\n      aria attributes and RTL support. It uses the \n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex)."}}};__webpack_exports__.default={title:"Selection Container",decorators:[dist.withKnobs],component:SelectionContainer,parameters:(_parameters={storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/selection";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/selection\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { SelectionContainer, useSelection } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\\\n\\\\n  return (\\\\n    <SelectionContainer direction=\\\\\\"vertical\\\\\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\\\n        <ul {...getContainerProps()}>\\\\n          {items.map(item => {\\\\n            const ref = React.createRef();\\\\n            const isSelected = item === selectedItem;\\\\n            const isFocused = item === focusedItem;\\\\n\\\\n            return (\\\\n              <li\\\\n                {...getItemProps({\\\\n                  key: item,\\\\n                  item,\\\\n                  focusRef: ref\\\\n                })}\\\\n              >\\\\n                {item}\\\\n                {isSelected && <span> - Selected</span>}\\\\n                {isFocused && <span> - Focused</span>}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n      )}\\\\n    </SelectionContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n  const isRtl = boolean(\'Enable RTL\', false);\\\\n\\\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\\\n      direction,\\\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\\\n      rtl: isRtl\\\\n    });\\\\n\\\\n    return (\\\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef<HTMLLIElement>();\\\\n          const isSelected = selectedItem === item;\\\\n          const isFocused = focusedItem === item;\\\\n\\\\n          return (\\\\n            <li\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                style: {\\\\n                  listStyle: \'none\',\\\\n                  margin: 16,\\\\n                  padding: 8,\\\\n                  textAlign: \'center\'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {item}\\\\n              {isSelected && <div>[Selected]</div>}\\\\n              {isFocused && <div>(Focused)</div>}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n      </ul>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Selection\\\\n      direction={select(\\\\n        \'Direction\',\\\\n        {\\\\n          vertical: \'vertical\',\\\\n          horizontal: \'horizontal\',\\\\n          both: \'both\'\\\\n        },\\\\n        \'horizontal\'\\\\n      )}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'SelectionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSelection\\\\\\\\` hook manages an items focus state including keyboard controls,\\\\n      aria attributes and RTL support. It uses the \\\\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Selection Container\',\\\\n  decorators: [withKnobs],\\\\n  component: SelectionContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"selection-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":43},\\"startBody\\":{\\"col\\":25,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":43}},\\"selection-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":45},\\"endLoc\\":{\\"col\\":1,\\"line\\":100},\\"startBody\\":{\\"col\\":20,\\"line\\":45},\\"endBody\\":{\\"col\\":1,\\"line\\":100}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/selection.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { SelectionContainer, useSelection } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\n\\n  return (\\n    <SelectionContainer direction=\\"vertical\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n  const isRtl = boolean(\'Enable RTL\', false);\\n\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: \'none\',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: \'center\'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        \'Direction\',\\n        {\\n          vertical: \'vertical\',\\n          horizontal: \'horizontal\',\\n          both: \'both\'\\n        },\\n        \'horizontal\'\\n      )}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'SelectionContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Selection Container\',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { SelectionContainer, useSelection } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\\\n\\\\n  return (\\\\n    <SelectionContainer direction=\\\\\\"vertical\\\\\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\\\n        <ul {...getContainerProps()}>\\\\n          {items.map(item => {\\\\n            const ref = React.createRef();\\\\n            const isSelected = item === selectedItem;\\\\n            const isFocused = item === focusedItem;\\\\n\\\\n            return (\\\\n              <li\\\\n                {...getItemProps({\\\\n                  key: item,\\\\n                  item,\\\\n                  focusRef: ref\\\\n                })}\\\\n              >\\\\n                {item}\\\\n                {isSelected && <span> - Selected</span>}\\\\n                {isFocused && <span> - Focused</span>}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n      )}\\\\n    </SelectionContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n  const isRtl = boolean(\'Enable RTL\', false);\\\\n\\\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\\\n      direction,\\\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\\\n      rtl: isRtl\\\\n    });\\\\n\\\\n    return (\\\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef<HTMLLIElement>();\\\\n          const isSelected = selectedItem === item;\\\\n          const isFocused = focusedItem === item;\\\\n\\\\n          return (\\\\n            <li\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                style: {\\\\n                  listStyle: \'none\',\\\\n                  margin: 16,\\\\n                  padding: 8,\\\\n                  textAlign: \'center\'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {item}\\\\n              {isSelected && <div>[Selected]</div>}\\\\n              {isFocused && <div>(Focused)</div>}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n      </ul>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Selection\\\\n      direction={select(\\\\n        \'Direction\',\\\\n        {\\\\n          vertical: \'vertical\',\\\\n          horizontal: \'horizontal\',\\\\n          both: \'both\'\\\\n        },\\\\n        \'horizontal\'\\\\n      )}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'SelectionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSelection\\\\\\\\` hook manages an items focus state including keyboard controls,\\\\n      aria attributes and RTL support. It uses the \\\\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Selection Container\',\\\\n  decorators: [withKnobs],\\\\n  component: SelectionContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"selection-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":43},\\"startBody\\":{\\"col\\":25,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":43}},\\"selection-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":45},\\"endLoc\\":{\\"col\\":1,\\"line\\":100},\\"startBody\\":{\\"col\\":20,\\"line\\":45},\\"endBody\\":{\\"col\\":1,\\"line\\":100}}}},\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  },};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"selection-container--container":{"startLoc":{"col":25,"line":35},"endLoc":{"col":139,"line":65},"startBody":{"col":25,"line":35},"endBody":{"col":139,"line":65}},"selection-container--hook":{"startLoc":{"col":20,"line":67},"endLoc":{"col":139,"line":122},"startBody":{"col":20,"line":67},"endBody":{"col":139,"line":122}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/selection.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/home/circleci/project/packages/selection";\n// @ts-ignore\nvar __STORY__ = "/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { SelectionContainer, useSelection } from \'./src\';\\n\\nexport const Container = () => {\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\n\\n  return (\\n    <SelectionContainer direction=\\"vertical\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n  const isRtl = boolean(\'Enable RTL\', false);\\n\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: \'none\',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: \'center\'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        \'Direction\',\\n        {\\n          vertical: \'vertical\',\\n          horizontal: \'horizontal\',\\n          both: \'both\'\\n        },\\n        \'horizontal\'\\n      )}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'SelectionContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Selection Container\',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  }\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"selection-container--container":{"startLoc":{"col":25,"line":13},"endLoc":{"col":1,"line":43},"startBody":{"col":25,"line":13},"endBody":{"col":1,"line":43}},"selection-container--hook":{"startLoc":{"col":20,"line":45},"endLoc":{"col":1,"line":100},"startBody":{"col":20,"line":45},"endBody":{"col":1,"line":100}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/selection.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from \'react\';\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\n\nimport { SelectionContainer, useSelection } from \'./src\';\n\nexport const Container = addSourceDecorator(addSourceDecorator(() => {\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\n\n  return (\n    <SelectionContainer direction="vertical" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\n        <ul {...getContainerProps()}>\n          {items.map(item => {\n            const ref = React.createRef();\n            const isSelected = item === selectedItem;\n            const isFocused = item === focusedItem;\n\n            return (\n              <li\n                {...getItemProps({\n                  key: item,\n                  item,\n                  focusRef: ref\n                })}\n              >\n                {item}\n                {isSelected && <span> - Selected</span>}\n                {isFocused && <span> - Focused</span>}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </SelectionContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const Hook = addSourceDecorator(addSourceDecorator(() => {\n  const items = [\'One\', \'Two\', \'Three\'];\n  const isRtl = boolean(\'Enable RTL\', false);\n\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\n      direction,\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\n      rtl: isRtl\n    });\n\n    return (\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\n        {items.map(item => {\n          const itemRef = React.createRef<HTMLLIElement>();\n          const isSelected = selectedItem === item;\n          const isFocused = focusedItem === item;\n\n          return (\n            <li\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                style: {\n                  listStyle: \'none\',\n                  margin: 16,\n                  padding: 8,\n                  textAlign: \'center\'\n                }\n              })}\n            >\n              {item}\n              {isSelected && <div>[Selected]</div>}\n              {isFocused && <div>(Focused)</div>}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  return (\n    <Selection\n      direction={select(\n        \'Direction\',\n        {\n          vertical: \'vertical\',\n          horizontal: \'horizontal\',\n          both: \'both\'\n        },\n        \'horizontal\'\n      )}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: \'SelectionContainer\'\n};\n\nHook.story = {\n  name: \'useSelection\',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSelection\\` hook manages an items focus state including keyboard controls,\n      aria attributes and RTL support. It uses the \n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\n    }\n  }\n};\n\nexport default {\n  title: \'Selection Container\',\n  decorators: [withKnobs],\n  component: SelectionContainer,\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/home/circleci/project/packages/selection\\";\\n// @ts-ignore\\nvar __STORY__ = \\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { SelectionContainer, useSelection } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\\\n\\\\n  return (\\\\n    <SelectionContainer direction=\\\\\\"vertical\\\\\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\\\n        <ul {...getContainerProps()}>\\\\n          {items.map(item => {\\\\n            const ref = React.createRef();\\\\n            const isSelected = item === selectedItem;\\\\n            const isFocused = item === focusedItem;\\\\n\\\\n            return (\\\\n              <li\\\\n                {...getItemProps({\\\\n                  key: item,\\\\n                  item,\\\\n                  focusRef: ref\\\\n                })}\\\\n              >\\\\n                {item}\\\\n                {isSelected && <span> - Selected</span>}\\\\n                {isFocused && <span> - Focused</span>}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n      )}\\\\n    </SelectionContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n  const isRtl = boolean(\'Enable RTL\', false);\\\\n\\\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\\\n      direction,\\\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\\\n      rtl: isRtl\\\\n    });\\\\n\\\\n    return (\\\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef<HTMLLIElement>();\\\\n          const isSelected = selectedItem === item;\\\\n          const isFocused = focusedItem === item;\\\\n\\\\n          return (\\\\n            <li\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                style: {\\\\n                  listStyle: \'none\',\\\\n                  margin: 16,\\\\n                  padding: 8,\\\\n                  textAlign: \'center\'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {item}\\\\n              {isSelected && <div>[Selected]</div>}\\\\n              {isFocused && <div>(Focused)</div>}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n      </ul>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Selection\\\\n      direction={select(\\\\n        \'Direction\',\\\\n        {\\\\n          vertical: \'vertical\',\\\\n          horizontal: \'horizontal\',\\\\n          both: \'both\'\\\\n        },\\\\n        \'horizontal\'\\\\n      )}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'SelectionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSelection\\\\\\\\` hook manages an items focus state including keyboard controls,\\\\n      aria attributes and RTL support. It uses the \\\\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Selection Container\',\\\\n  decorators: [withKnobs],\\\\n  component: SelectionContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\\\n  }\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"selection-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":43},\\"startBody\\":{\\"col\\":25,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":43}},\\"selection-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":45},\\"endLoc\\":{\\"col\\":1,\\"line\\":100},\\"startBody\\":{\\"col\\":20,\\"line\\":45},\\"endBody\\":{\\"col\\":1,\\"line\\":100}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/selection.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\n/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { SelectionContainer, useSelection } from \'./src\';\\n\\nexport const Container = addSourceDecorator(() => {\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\n\\n  return (\\n    <SelectionContainer direction=\\"vertical\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const Hook = addSourceDecorator(() => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n  const isRtl = boolean(\'Enable RTL\', false);\\n\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: \'none\',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: \'center\'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        \'Direction\',\\n        {\\n          vertical: \'vertical\',\\n          horizontal: \'horizontal\',\\n          both: \'both\'\\n        },\\n        \'horizontal\'\\n      )}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nContainer.story = {\\n  name: \'SelectionContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Selection Container\',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\"storySource\\":{\\"source\\":\\"/**\\\\n * Copyright Zendesk, Inc.\\\\n *\\\\n * Use of this source code is governed under the Apache License, Version 2.0\\\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\\\n */\\\\n\\\\nimport React from \'react\';\\\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\\\n\\\\nimport { SelectionContainer, useSelection } from \'./src\';\\\\n\\\\nexport const Container = () => {\\\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\\\n\\\\n  return (\\\\n    <SelectionContainer direction=\\\\\\"vertical\\\\\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\\\n        <ul {...getContainerProps()}>\\\\n          {items.map(item => {\\\\n            const ref = React.createRef();\\\\n            const isSelected = item === selectedItem;\\\\n            const isFocused = item === focusedItem;\\\\n\\\\n            return (\\\\n              <li\\\\n                {...getItemProps({\\\\n                  key: item,\\\\n                  item,\\\\n                  focusRef: ref\\\\n                })}\\\\n              >\\\\n                {item}\\\\n                {isSelected && <span> - Selected</span>}\\\\n                {isFocused && <span> - Focused</span>}\\\\n              </li>\\\\n            );\\\\n          })}\\\\n        </ul>\\\\n      )}\\\\n    </SelectionContainer>\\\\n  );\\\\n};\\\\n\\\\nexport const Hook = () => {\\\\n  const items = [\'One\', \'Two\', \'Three\'];\\\\n  const isRtl = boolean(\'Enable RTL\', false);\\\\n\\\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\\\n      direction,\\\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\\\n      rtl: isRtl\\\\n    });\\\\n\\\\n    return (\\\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\\\n        {items.map(item => {\\\\n          const itemRef = React.createRef<HTMLLIElement>();\\\\n          const isSelected = selectedItem === item;\\\\n          const isFocused = focusedItem === item;\\\\n\\\\n          return (\\\\n            <li\\\\n              {...getItemProps({\\\\n                key: item,\\\\n                item,\\\\n                focusRef: itemRef,\\\\n                style: {\\\\n                  listStyle: \'none\',\\\\n                  margin: 16,\\\\n                  padding: 8,\\\\n                  textAlign: \'center\'\\\\n                }\\\\n              })}\\\\n            >\\\\n              {item}\\\\n              {isSelected && <div>[Selected]</div>}\\\\n              {isFocused && <div>(Focused)</div>}\\\\n            </li>\\\\n          );\\\\n        })}\\\\n      </ul>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <Selection\\\\n      direction={select(\\\\n        \'Direction\',\\\\n        {\\\\n          vertical: \'vertical\',\\\\n          horizontal: \'horizontal\',\\\\n          both: \'both\'\\\\n        },\\\\n        \'horizontal\'\\\\n      )}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nContainer.story = {\\\\n  name: \'SelectionContainer\'\\\\n};\\\\n\\\\nHook.story = {\\\\n  name: \'useSelection\',\\\\n  parameters: {\\\\n    docs: {\\\\n      storyDescription: `The \\\\\\\\`useSelection\\\\\\\\` hook manages an items focus state including keyboard controls,\\\\n      aria attributes and RTL support. It uses the \\\\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\\\n    }\\\\n  }\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'Selection Container\',\\\\n  decorators: [withKnobs],\\\\n  component: SelectionContainer,\\\\n  parameters: {\\\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\\\n  }\\\\n};\\\\n\\",\\"locationsMap\\":{\\"selection-container--container\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":43},\\"startBody\\":{\\"col\\":25,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":43}},\\"selection-container--hook\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":45},\\"endLoc\\":{\\"col\\":1,\\"line\\":100},\\"startBody\\":{\\"col\\":20,\\"line\\":45},\\"endBody\\":{\\"col\\":1,\\"line\\":100}}}},\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  },};\\n","locationsMap":{"selection-container--container":{"startLoc":{"col":25,"line":35},"endLoc":{"col":139,"line":65},"startBody":{"col":25,"line":35},"endBody":{"col":139,"line":65}},"selection-container--hook":{"startLoc":{"col":20,"line":67},"endLoc":{"col":139,"line":122},"startBody":{"col":20,"line":67},"endBody":{"col":139,"line":122}}}},"storySource":{"source":"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from \'react\';\\nimport { withKnobs, select, boolean, number } from \'@storybook/addon-knobs\';\\n\\nimport { SelectionContainer, useSelection } from \'./src\';\\n\\nexport const Container = () => {\\n  const items = [\'Item 1\', \'Item 2\', \'Item 3\'];\\n\\n  return (\\n    <SelectionContainer direction=\\"vertical\\" defaultFocusedIndex={number(\'defaultFocusedIndex\', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const items = [\'One\', \'Two\', \'Three\'];\\n  const isRtl = boolean(\'Enable RTL\', false);\\n\\n  const Selection = ({ direction }: { direction?: \'both\' | \'horizontal\' | \'vertical\' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number(\'defaultSelectedIndex\', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: \'flex\' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: \'none\',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: \'center\'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        \'Direction\',\\n        {\\n          vertical: \'vertical\',\\n          horizontal: \'horizontal\',\\n          both: \'both\'\\n        },\\n        \'horizontal\'\\n      )}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: \'SelectionContainer\'\\n};\\n\\nHook.story = {\\n  name: \'useSelection\',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: \'Selection Container\',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  }\\n};\\n","locationsMap":{"selection-container--container":{"startLoc":{"col":25,"line":13},"endLoc":{"col":1,"line":43},"startBody":{"col":25,"line":13},"endBody":{"col":1,"line":43}},"selection-container--hook":{"startLoc":{"col":20,"line":45},"endLoc":{"col":1,"line":100},"startBody":{"col":20,"line":45},"endBody":{"col":1,"line":100}}}},\n    componentSubtitle: `A container component which wraps the useSelection hook.`\n  },};\n',locationsMap:{"selection-container--container":{startLoc:{col:25,line:57},endLoc:{col:277,line:87},startBody:{col:25,line:57},endBody:{col:277,line:87}},"selection-container--hook":{startLoc:{col:20,line:89},endLoc:{col:277,line:144},startBody:{col:20,line:89},endBody:{col:277,line:144}}}}},_parameters.storySource={source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/circleci/project/packages/selection\";\n// @ts-ignore\nvar __STORY__ = \"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from 'react';\\nimport { withKnobs, select, boolean, number } from '@storybook/addon-knobs';\\n\\nimport { SelectionContainer, useSelection } from './src';\\n\\nexport const Container = () => {\\n  const items = ['Item 1', 'Item 2', 'Item 3'];\\n\\n  return (\\n    <SelectionContainer direction=\\\"vertical\\\" defaultFocusedIndex={number('defaultFocusedIndex', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const items = ['One', 'Two', 'Three'];\\n  const isRtl = boolean('Enable RTL', false);\\n\\n  const Selection = ({ direction }: { direction?: 'both' | 'horizontal' | 'vertical' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number('defaultSelectedIndex', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: 'flex' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: 'none',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: 'center'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        'Direction',\\n        {\\n          vertical: 'vertical',\\n          horizontal: 'horizontal',\\n          both: 'both'\\n        },\\n        'horizontal'\\n      )}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'SelectionContainer'\\n};\\n\\nHook.story = {\\n  name: 'useSelection',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Selection Container',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  }\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"selection-container--container\":{\"startLoc\":{\"col\":25,\"line\":13},\"endLoc\":{\"col\":1,\"line\":43},\"startBody\":{\"col\":25,\"line\":13},\"endBody\":{\"col\":1,\"line\":43}},\"selection-container--hook\":{\"startLoc\":{\"col\":20,\"line\":45},\"endLoc\":{\"col\":1,\"line\":100},\"startBody\":{\"col\":20,\"line\":45},\"endBody\":{\"col\":1,\"line\":100}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/selection.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\nimport { withKnobs, select, boolean, number } from '@storybook/addon-knobs';\n\nimport { SelectionContainer, useSelection } from './src';\n\nexport const Container = addSourceDecorator(() => {\n  const items = ['Item 1', 'Item 2', 'Item 3'];\n\n  return (\n    <SelectionContainer direction=\"vertical\" defaultFocusedIndex={number('defaultFocusedIndex', 0)}>\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\n        <ul {...getContainerProps()}>\n          {items.map(item => {\n            const ref = React.createRef();\n            const isSelected = item === selectedItem;\n            const isFocused = item === focusedItem;\n\n            return (\n              <li\n                {...getItemProps({\n                  key: item,\n                  item,\n                  focusRef: ref\n                })}\n              >\n                {item}\n                {isSelected && <span> - Selected</span>}\n                {isFocused && <span> - Focused</span>}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </SelectionContainer>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const Hook = addSourceDecorator(() => {\n  const items = ['One', 'Two', 'Three'];\n  const isRtl = boolean('Enable RTL', false);\n\n  const Selection = ({ direction }: { direction?: 'both' | 'horizontal' | 'vertical' }) => {\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\n      direction,\n      defaultSelectedIndex: number('defaultSelectedIndex', 0),\n      rtl: isRtl\n    });\n\n    return (\n      <ul {...getContainerProps({ style: { display: 'flex' } })}>\n        {items.map(item => {\n          const itemRef = React.createRef<HTMLLIElement>();\n          const isSelected = selectedItem === item;\n          const isFocused = focusedItem === item;\n\n          return (\n            <li\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                style: {\n                  listStyle: 'none',\n                  margin: 16,\n                  padding: 8,\n                  textAlign: 'center'\n                }\n              })}\n            >\n              {item}\n              {isSelected && <div>[Selected]</div>}\n              {isFocused && <div>(Focused)</div>}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  return (\n    <Selection\n      direction={select(\n        'Direction',\n        {\n          vertical: 'vertical',\n          horizontal: 'horizontal',\n          both: 'both'\n        },\n        'horizontal'\n      )}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nContainer.story = {\n  name: 'SelectionContainer'\n};\n\nHook.story = {\n  name: 'useSelection',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSelection\\` hook manages an items focus state including keyboard controls,\n      aria attributes and RTL support. It uses the \n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\n    }\n  }\n};\n\nexport default {\n  title: 'Selection Container',\n  decorators: [withKnobs],\n  component: SelectionContainer,\n  parameters: {\"storySource\":{\"source\":\"/**\\n * Copyright Zendesk, Inc.\\n *\\n * Use of this source code is governed under the Apache License, Version 2.0\\n * found at http://www.apache.org/licenses/LICENSE-2.0.\\n */\\n\\nimport React from 'react';\\nimport { withKnobs, select, boolean, number } from '@storybook/addon-knobs';\\n\\nimport { SelectionContainer, useSelection } from './src';\\n\\nexport const Container = () => {\\n  const items = ['Item 1', 'Item 2', 'Item 3'];\\n\\n  return (\\n    <SelectionContainer direction=\\\"vertical\\\" defaultFocusedIndex={number('defaultFocusedIndex', 0)}>\\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\\n        <ul {...getContainerProps()}>\\n          {items.map(item => {\\n            const ref = React.createRef();\\n            const isSelected = item === selectedItem;\\n            const isFocused = item === focusedItem;\\n\\n            return (\\n              <li\\n                {...getItemProps({\\n                  key: item,\\n                  item,\\n                  focusRef: ref\\n                })}\\n              >\\n                {item}\\n                {isSelected && <span> - Selected</span>}\\n                {isFocused && <span> - Focused</span>}\\n              </li>\\n            );\\n          })}\\n        </ul>\\n      )}\\n    </SelectionContainer>\\n  );\\n};\\n\\nexport const Hook = () => {\\n  const items = ['One', 'Two', 'Three'];\\n  const isRtl = boolean('Enable RTL', false);\\n\\n  const Selection = ({ direction }: { direction?: 'both' | 'horizontal' | 'vertical' }) => {\\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\\n      direction,\\n      defaultSelectedIndex: number('defaultSelectedIndex', 0),\\n      rtl: isRtl\\n    });\\n\\n    return (\\n      <ul {...getContainerProps({ style: { display: 'flex' } })}>\\n        {items.map(item => {\\n          const itemRef = React.createRef<HTMLLIElement>();\\n          const isSelected = selectedItem === item;\\n          const isFocused = focusedItem === item;\\n\\n          return (\\n            <li\\n              {...getItemProps({\\n                key: item,\\n                item,\\n                focusRef: itemRef,\\n                style: {\\n                  listStyle: 'none',\\n                  margin: 16,\\n                  padding: 8,\\n                  textAlign: 'center'\\n                }\\n              })}\\n            >\\n              {item}\\n              {isSelected && <div>[Selected]</div>}\\n              {isFocused && <div>(Focused)</div>}\\n            </li>\\n          );\\n        })}\\n      </ul>\\n    );\\n  };\\n\\n  return (\\n    <Selection\\n      direction={select(\\n        'Direction',\\n        {\\n          vertical: 'vertical',\\n          horizontal: 'horizontal',\\n          both: 'both'\\n        },\\n        'horizontal'\\n      )}\\n    />\\n  );\\n};\\n\\nContainer.story = {\\n  name: 'SelectionContainer'\\n};\\n\\nHook.story = {\\n  name: 'useSelection',\\n  parameters: {\\n    docs: {\\n      storyDescription: `The \\\\`useSelection\\\\` hook manages an items focus state including keyboard controls,\\n      aria attributes and RTL support. It uses the \\n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\\n    }\\n  }\\n};\\n\\nexport default {\\n  title: 'Selection Container',\\n  decorators: [withKnobs],\\n  component: SelectionContainer,\\n  parameters: {\\n    componentSubtitle: `A container component which wraps the useSelection hook.`\\n  }\\n};\\n\",\"locationsMap\":{\"selection-container--container\":{\"startLoc\":{\"col\":25,\"line\":13},\"endLoc\":{\"col\":1,\"line\":43},\"startBody\":{\"col\":25,\"line\":13},\"endBody\":{\"col\":1,\"line\":43}},\"selection-container--hook\":{\"startLoc\":{\"col\":20,\"line\":45},\"endLoc\":{\"col\":1,\"line\":100},\"startBody\":{\"col\":20,\"line\":45},\"endBody\":{\"col\":1,\"line\":100}}}},\n    componentSubtitle: `A container component which wraps the useSelection hook.`\n  },};\n",locationsMap:{"selection-container--container":{startLoc:{col:25,line:35},endLoc:{col:139,line:65},startBody:{col:25,line:35},endBody:{col:139,line:65}},"selection-container--hook":{startLoc:{col:20,line:67},endLoc:{col:139,line:122},startBody:{col:20,line:67},endBody:{col:139,line:122}}}},_parameters.storySource={source:"/**\n * Copyright Zendesk, Inc.\n *\n * Use of this source code is governed under the Apache License, Version 2.0\n * found at http://www.apache.org/licenses/LICENSE-2.0.\n */\n\nimport React from 'react';\nimport { withKnobs, select, boolean, number } from '@storybook/addon-knobs';\n\nimport { SelectionContainer, useSelection } from './src';\n\nexport const Container = () => {\n  const items = ['Item 1', 'Item 2', 'Item 3'];\n\n  return (\n    <SelectionContainer direction=\"vertical\" defaultFocusedIndex={number('defaultFocusedIndex', 0)}>\n      {({ selectedItem, focusedItem, getContainerProps, getItemProps }) => (\n        <ul {...getContainerProps()}>\n          {items.map(item => {\n            const ref = React.createRef();\n            const isSelected = item === selectedItem;\n            const isFocused = item === focusedItem;\n\n            return (\n              <li\n                {...getItemProps({\n                  key: item,\n                  item,\n                  focusRef: ref\n                })}\n              >\n                {item}\n                {isSelected && <span> - Selected</span>}\n                {isFocused && <span> - Focused</span>}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </SelectionContainer>\n  );\n};\n\nexport const Hook = () => {\n  const items = ['One', 'Two', 'Three'];\n  const isRtl = boolean('Enable RTL', false);\n\n  const Selection = ({ direction }: { direction?: 'both' | 'horizontal' | 'vertical' }) => {\n    const { focusedItem, selectedItem, getContainerProps, getItemProps } = useSelection<string>({\n      direction,\n      defaultSelectedIndex: number('defaultSelectedIndex', 0),\n      rtl: isRtl\n    });\n\n    return (\n      <ul {...getContainerProps({ style: { display: 'flex' } })}>\n        {items.map(item => {\n          const itemRef = React.createRef<HTMLLIElement>();\n          const isSelected = selectedItem === item;\n          const isFocused = focusedItem === item;\n\n          return (\n            <li\n              {...getItemProps({\n                key: item,\n                item,\n                focusRef: itemRef,\n                style: {\n                  listStyle: 'none',\n                  margin: 16,\n                  padding: 8,\n                  textAlign: 'center'\n                }\n              })}\n            >\n              {item}\n              {isSelected && <div>[Selected]</div>}\n              {isFocused && <div>(Focused)</div>}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  return (\n    <Selection\n      direction={select(\n        'Direction',\n        {\n          vertical: 'vertical',\n          horizontal: 'horizontal',\n          both: 'both'\n        },\n        'horizontal'\n      )}\n    />\n  );\n};\n\nContainer.story = {\n  name: 'SelectionContainer'\n};\n\nHook.story = {\n  name: 'useSelection',\n  parameters: {\n    docs: {\n      storyDescription: `The \\`useSelection\\` hook manages an items focus state including keyboard controls,\n      aria attributes and RTL support. It uses the \n      [roving tab index strategy](https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex).`\n    }\n  }\n};\n\nexport default {\n  title: 'Selection Container',\n  decorators: [withKnobs],\n  component: SelectionContainer,\n  parameters: {\n    componentSubtitle: `A container component which wraps the useSelection hook.`\n  }\n};\n",locationsMap:{"selection-container--container":{startLoc:{col:25,line:13},endLoc:{col:1,line:43},startBody:{col:25,line:13},endBody:{col:1,line:43}},"selection-container--hook":{startLoc:{col:20,line:45},endLoc:{col:1,line:100},startBody:{col:20,line:45},endBody:{col:1,line:100}}}},_parameters.componentSubtitle="A container component which wraps the useSelection hook.",_parameters)}}},[[1426,1,2]]]);
//# sourceMappingURL=main.33072ef8568dd47a19f8.bundle.js.map